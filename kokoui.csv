category,component_name,original_code,shadcn_code,description
open-in-v0-button.tsx,open-in-v0-button,"import { Button } from ""@/components/ui/button"";
import { cn } from ""@/lib/utils"";

const prePath = process.env.VERCEL_PROJECT_PRODUCTION_URL
  ? `https://${process.env.VERCEL_PROJECT_PRODUCTION_URL}`
  : `https://${process.env.NEXT_PUBLIC_SITE_URL}`;

export function OpenInV0Button({
  name,
  className,
}: { name: string } & React.ComponentProps<typeof Button>) {
  return (
    <Button
      aria-label=""Open in v0""
      className={cn(
        ""h-7 gap-1 rounded-lg shadow-none bg-black px-3 text-xs text-white hover:bg-zinc-800 dark:bg-white dark:text-black dark:hover:bg-zinc-200 transition-colors duration-200 not-prose"",
        className
      )}
      asChild
    >
      <a
        href={`https://v0.dev/chat/api/open?url=${prePath}/r/${name}.json`}
        target=""_blank""
        rel=""noreferrer""
      >
        Open in{"" ""}
        <svg
          viewBox=""0 0 40 20""
          fill=""none""
          xmlns=""http://www.w3.org/2000/svg""
          className=""h-5 w-5 text-current""
        >
          <path
            d=""M23.3919 0H32.9188C36.7819 0 39.9136 3.13165 39.9136 6.99475V16.0805H36.0006V6.99475C36.0006 6.90167 35.9969 6.80925 35.9898 6.71766L26.4628 16.079C26.4949 16.08 26.5272 16.0805 26.5595 16.0805H36.0006V19.7762H26.5595C22.6964 19.7762 19.4788 16.6139 19.4788 12.7508V3.68923H23.3919V12.7508C23.3919 12.9253 23.4054 13.0977 23.4316 13.2668L33.1682 3.6995C33.0861 3.6927 33.003 3.68923 32.9188 3.68923H23.3919V0Z""
            fill=""currentColor""
          />
          <path
            d=""M13.7688 19.0956L0 3.68759H5.53933L13.6231 12.7337V3.68759H17.7535V17.5746C17.7535 19.6705 15.1654 20.6584 13.7688 19.0956Z""
            fill=""currentColor""
          />
        </svg>
      </a>
    </Button>
  );
}","import { Button } from ""@/components/ui/button"";
import { FC } from ""react"";
import { cn } from ""@/lib/utils""; // Ensure this is available in your project

const prePath = process.env.VERCEL_PROJECT_PRODUCTION_URL
  ? `https://${process.env.VERCEL_PROJECT_PRODUCTION_URL}`
  : `https://${process.env.NEXT_PUBLIC_SITE_URL}`;

interface OpenInV0ButtonProps {
  name: string;
  className?: string;
}

export const OpenInV0Button: FC<OpenInV0ButtonProps & React.ComponentProps<typeof Button>> = ({
  name,
  className,
}) => {
  return (
    <Button
      aria-label=""Open in v0""
      className={cn(
        ""h-7 gap-1 rounded-lg shadow-none bg-black px-3 text-xs text-white hover:bg-zinc-800 dark:bg-white dark:text-black dark:hover:bg-zinc-200 transition-colors duration-200 not-prose"",
        className
      )}
      asChild
    >
      <a
        href={`https://v0.dev/chat/api/open?url=${prePath}/r/${name}.json`}
        target=""_blank""
        rel=""noreferrer""
        className=""inline-flex items-center""
      >
        Open in{"" ""}
        <svg
          viewBox=""0 0 40 20""
          fill=""none""
          xmlns=""http://www.w3.org/2000/svg""
          className=""h-5 w-5 text-current ml-1""
        >
          <path
            d=""M23.3919 0H32.9188C36.7819 0 39.9136 3.13165 39.9136 6.99475V16.0805H36.0006V6.99475C36.0006 6.90167 35.9969 6.80925 35.9898 6.71766L26.4628 16.079C26.4949 16.08 26.5272 16.0805 26.5595 16.0805H36.0006V19.7762H26.5595C22.6964 19.7762 19.4788 16.6139 19.4788 12.7508V3.68923H23.3919V12.7508C23.3919 12.9253 23.4054 13.0977 23.4316 13.2668L33.1682 3.6995C33.0861 3.6927 33.003 3.68923 32.9188 3.68923H23.3919V0Z""
            fill=""currentColor""
          />
          <path
            d=""M13.7688 19.0956L0 3.68759H5.53933L13.6231 12.7337V3.68759H17.7535V17.5746C17.7535 19.6705 15.1654 20.6584 13.7688 19.0956Z""
            fill=""currentColor""
          />
        </svg>
      </a>
    </Button>
  );
};","A button component that opens a new tab to a specific URL based on the 'name' prop, styled with Tailwind CSS."
event-toast.tsx,event-toast,"""use client"";

import Link from ""next/link"";
// import { toast } from ""sonner"";
import { useEffect } from ""react"";

import React from ""react"";
import { toast as sonnerToast } from ""sonner"";
import { ArrowRightBroken } from ""./icons/arrow-right-broken"";

/** A fully custom toast that still maintains the animations and interactions. */
function Toast(props: ToastProps) {
    const { title, description, id } = props;

    return (
        <Link
            href=""https://arca.directory/?utm_source=kokonutui.com&utm_medium=toast""
            target=""_blank""
            className=""block""
            tabIndex={0}
            aria-label={`${title} - ${description}`}
        >
            <div
                className=""group flex rounded-lg bg-zinc-100 dark:bg-zinc-800 border border-black/10 dark:border-white/10 w-full md:max-w-[320px] items-center p-2 hover:border-black/20 dark:hover:border-white/20 hover:shadow-[0_2px_8px_rgba(0,0,0,0.08)] dark:hover:shadow-[0_2px_8px_rgba(255,255,255,0.05)] transition-all relative""
                style={{
                    animation: ""slideIn 0.3s ease-out forwards"",
                }}
            >
                <img
                    src=""/arca-directory.svg""
                    alt=""Arca Directory""
                    className=""w-12 h-12 mr-3 flex-shrink-0""
                />
                <div className=""flex-1"">
                    <p className=""text-sm font-medium tracking-tighter text-zinc-900 dark:text-white"">
                        {title}
                    </p>
                    <p className=""text-xs tracking-tighter text-zinc-700 dark:text-zinc-300"">
                        {description}
                    </p>
                </div>
                <ArrowRightBroken className=""w-4 h-4 -rotate-90 group-hover:-rotate-45 transition-transform duration-300"" />

                {/* Close button that appears on hover */}
                <button
                    onClick={(e) => {
                        e.preventDefault();
                        e.stopPropagation();
                        sonnerToast.dismiss(id);
                    }}
                    className=""absolute top-1 right-1 opacity-0 group-hover:opacity-100 transition-opacity p-1 rounded-full hover:bg-zinc-200 dark:hover:bg-zinc-700""
                    aria-label=""Close toast""
                >
                    <svg
                        xmlns=""http://www.w3.org/2000/svg""
                        width=""14""
                        height=""14""
                        viewBox=""0 0 24 24""
                        fill=""none""
                        stroke=""currentColor""
                        strokeWidth=""2""
                        strokeLinecap=""round""
                        strokeLinejoin=""round""
                        className=""text-zinc-500 dark:text-zinc-400""
                    >
                        <path d=""M18 6 6 18""></path>
                        <path d=""m6 6 12 12""></path>
                    </svg>
                </button>
            </div>
            <style jsx>{`
                @keyframes slideIn {
                    0% {
                        transform: translateY(100%);
                        opacity: 0;
                    }
                    100% {
                        transform: translateY(0);
                        opacity: 1;
                    }
                }
            `}</style>
        </Link>
    );
}

function toast(toast: Omit<ToastProps, ""id""> & { duration?: number }) {
    return sonnerToast.custom(
        (id) => (
            <Toast
                id={id}
                title={toast.title}
                description={toast.description}
            />
        ),
        { duration: toast.duration || 4000 } // Default is 4000ms if not specified
    );
}

interface ToastProps {
    id: string | number;
    title: string;
    description: string;
}

export const EventToaster = () => {
    useEffect(() => {
        // Add a 1-second delay before showing the toast
        const timeoutId = setTimeout(() => {
            toast({
                title: ""Arca.directory"",
                description:
                    ""Find the best tools for entrepreneurs, developers, and designers."",
                duration: 6000, // Reduced to 2 seconds (from default 4 seconds)
            });
        }, 1000);

        // Clean up the timeout if the component unmounts
        return () => clearTimeout(timeoutId);
    }, []);

    return null;
};

export default EventToaster;","import Link from ""next/link"";
import { useEffect } from ""react"";
import { toast as sonnerToast } from ""sonner"";
import { ArrowRightBroken } from ""./icons/arrow-right-broken"";

interface ToastProps {
    id: string | number;
    title: string;
    description: string;
}

const Toast: React.FC<ToastProps> = ({ title, description, id }) => {
    return (
        <Link
            href=""https://arca.directory/?utm_source=kokonutui.com&utm_medium=toast""
            target=""_blank""
            className=""block focus:outline-none""
            tabIndex={0}
            aria-label={`${title} - ${description}`}
        >
            <div
                className=""group flex items-center p-2 rounded-lg bg-zinc-100 dark:bg-zinc-800 border border-black/10 dark:border-white/10 w-full md:max-w-[320px] hover:border-black/20 dark:hover:border-white/20 hover:shadow-md dark:hover:shadow-white animate-slideIn""
            >
                <img
                    src=""/arca-directory.svg""
                    alt=""Arca Directory""
                    className=""w-12 h-12 mr-3 flex-shrink-0""
                />
                <div className=""flex-1"">
                    <p className=""text-sm font-medium tracking-tighter text-zinc-900 dark:text-white"">
                        {title}
                    </p>
                    <p className=""text-xs tracking-tighter text-zinc-700 dark:text-zinc-300"">
                        {description}
                    </p>
                </div>
                <ArrowRightBroken className=""w-4 h-4 -rotate-90 group-hover:-rotate-45 transition-transform duration-300"" />

                <button
                    onClick={(e) => {
                        e.preventDefault();
                        e.stopPropagation();
                        sonnerToast.dismiss(id);
                    }}
                    className=""absolute top-1 right-1 opacity-0 group-hover:opacity-100 transition-opacity p-1 rounded-full hover:bg-zinc-200 dark:hover:bg-zinc-700""
                    aria-label=""Close toast""
                >
                    <svg
                        xmlns=""http://www.w3.org/2000/svg""
                        className=""w-3.5 h-3.5 text-zinc-500 dark:text-zinc-400""
                        fill=""none""
                        stroke=""currentColor""
                        strokeWidth=""2""
                        strokeLinecap=""round""
                        strokeLinejoin=""round""
                    >
                        <path d=""M18 6 6 18""></path>
                        <path d=""m6 6 12 12""></path>
                    </svg>
                </button>
            </div>
        </Link>
    );
}

const toast = (toast: Omit<ToastProps, ""id""> & { duration?: number }) => {
    return sonnerToast.custom(
        (id) => (
            <Toast
                id={id}
                title={toast.title}
                description={toast.description}
            />
        ),
        { duration: toast.duration || 4000 }
    );
}

export const EventToaster: React.FC = () => {
    useEffect(() => {
        const timeoutId = setTimeout(() => {
            toast({
                title: ""Arca.directory"",
                description: ""Find the best tools for entrepreneurs, developers, and designers."",
                duration: 6000,
            });
        }, 1000);

        return () => clearTimeout(timeoutId);
    }, []);

    return null;
};

export default EventToaster;","The `EventToaster` component shows a custom toast message with a slide-in animation. The toast includes a title, description, and a close button. The toast message is automatically dismissed after a specified duration."
button-cta.tsx,button-cta,"""use client"";

import React, { useEffect } from ""react"";
import Link from ""next/link"";
import { toast as sonnerToast } from ""sonner"";
import { ArrowRightBroken } from ""./icons/arrow-right-broken"";

// Toast component props
interface ToastProps {
  id: string | number;
  title: string;
  description: string;
}

// The visual toast element
const Toast: React.FC<ToastProps> = ({ id, title, description }) => {
  return (
    <Link
      href=""https://arca.directory/?utm_source=kokonutui.com&utm_medium=toast""
      target=""_blank""
      className=""block""
      tabIndex={0}
      aria-label={`${title} - ${description}`}
    >
      <div
        className=""group flex rounded-lg bg-zinc-100 dark:bg-zinc-800 border border-black/10 dark:border-white/10 w-full md:max-w-[320px] items-center p-2 hover:border-black/20 dark:hover:border-white/20 hover:shadow-[0_2px_8px_rgba(0,0,0,0.08)] dark:hover:shadow-[0_2px_8px_rgba(255,255,255,0.05)] transition-all relative""
        style={{
          animation: ""slideIn 0.3s ease-out forwards"",
        }}
      >
        <img
          src=""/arca-directory.svg""
          alt=""Arca Directory""
          className=""w-12 h-12 mr-3 flex-shrink-0""
        />
        <div className=""flex-1"">
          <p className=""text-sm font-medium tracking-tighter text-zinc-900 dark:text-white"">
            {title}
          </p>
          <p className=""text-xs tracking-tighter text-zinc-700 dark:text-zinc-300"">
            {description}
          </p>
        </div>

        <ArrowRightBroken className=""w-4 h-4 -rotate-90 group-hover:-rotate-45 transition-transform duration-300"" />

        <button
          onClick={(e) => {
            e.preventDefault();
            e.stopPropagation();
            sonnerToast.dismiss(id);
          }}
          className=""absolute top-1 right-1 opacity-0 group-hover:opacity-100 transition-opacity p-1 rounded-full hover:bg-zinc-200 dark:hover:bg-zinc-700""
          aria-label=""Close toast""
        >
          <svg
            xmlns=""http://www.w3.org/2000/svg""
            width=""14""
            height=""14""
            viewBox=""0 0 24 24""
            fill=""none""
            stroke=""currentColor""
            strokeWidth=""2""
            strokeLinecap=""round""
            strokeLinejoin=""round""
            className=""text-zinc-500 dark:text-zinc-400""
          >
            <path d=""M18 6 6 18""></path>
            <path d=""m6 6 12 12""></path>
          </svg>
        </button>
      </div>

      {/* Local CSS animation keyframes */}
      <style jsx>{`
        @keyframes slideIn {
          0% {
            transform: translateY(100%);
            opacity: 0;
          }
          100% {
            transform: translateY(0);
            opacity: 1;
          }
        }
      `}</style>
    </Link>
  );
};

// Toast launcher function
const toast = (data: Omit<ToastProps, ""id""> & { duration?: number }) => {
  return sonnerToast.custom((id) => (
    <Toast id={id} title={data.title} description={data.description} />
  ), {
    duration: data.duration || 4000,
  });
};

// Hook-based one-time toast displayer
export const EventToaster: React.FC = () => {
  useEffect(() => {
    const timeoutId = setTimeout(() => {
      toast({
        title: ""Arca.directory"",
        description:
          ""Find the best tools for entrepreneurs, developers, and designers."",
        duration: 6000,
      });
    }, 1000);

    return () => clearTimeout(timeoutId);
  }, []);

  return null;
};

export default EventToaster;","""use client"";

import React, { useEffect } from ""react"";
import Link from ""next/link"";
import { toast as sonnerToast } from ""sonner"";
import { ArrowRightBroken } from ""./icons/arrow-right-broken"";

interface ToastProps {
  id: string | number;
  title: string;
  description: string;
}

// Individual Toast UI Component
const Toast: React.FC<ToastProps> = ({ id, title, description }) => {
  return (
    <Link
      href=""https://arca.directory/?utm_source=kokonutui.com&utm_medium=toast""
      target=""_blank""
      className=""block focus:outline-none""
      tabIndex={0}
      aria-label={`${title} - ${description}`}
    >
      <div className=""group relative flex items-center p-2 rounded-lg bg-zinc-100 dark:bg-zinc-800 border border-black/10 dark:border-white/10 w-full md:max-w-[320px] hover:border-black/20 dark:hover:border-white/20 hover:shadow-md dark:hover:shadow-white animate-slide-in"">
        <img
          src=""/arca-directory.svg""
          alt=""Arca Directory""
          className=""w-12 h-12 mr-3 flex-shrink-0""
        />
        <div className=""flex-1"">
          <p className=""text-sm font-medium tracking-tighter text-zinc-900 dark:text-white"">
            {title}
          </p>
          <p className=""text-xs tracking-tighter text-zinc-700 dark:text-zinc-300"">
            {description}
          </p>
        </div>

        <ArrowRightBroken className=""w-4 h-4 -rotate-90 group-hover:-rotate-45 transition-transform duration-300"" />

        <button
          onClick={(e) => {
            e.preventDefault();
            e.stopPropagation();
            sonnerToast.dismiss(id);
          }}
          className=""absolute top-1 right-1 opacity-0 group-hover:opacity-100 transition-opacity p-1 rounded-full hover:bg-zinc-200 dark:hover:bg-zinc-700""
          aria-label=""Close toast""
        >
          <svg
            xmlns=""http://www.w3.org/2000/svg""
            className=""w-3.5 h-3.5 text-zinc-500 dark:text-zinc-400""
            fill=""none""
            stroke=""currentColor""
            strokeWidth=""2""
            strokeLinecap=""round""
            strokeLinejoin=""round""
          >
            <path d=""M18 6 6 18"" />
            <path d=""m6 6 12 12"" />
          </svg>
        </button>
      </div>

      <style jsx>{`
        @keyframes slide-in {
          from {
            transform: translateY(100%);
            opacity: 0;
          }
          to {
            transform: translateY(0);
            opacity: 1;
          }
        }
        .animate-slide-in {
          animation: slide-in 0.3s ease-out forwards;
        }
      `}</style>
    </Link>
  );
};

// Toast trigger function
const toast = (data: Omit<ToastProps, ""id""> & { duration?: number }) => {
  return sonnerToast.custom(
    (id) => <Toast id={id} title={data.title} description={data.description} />,
    {
      duration: data.duration || 4000,
    }
  );
};

// Hook to trigger toast on mount
export const EventToaster: React.FC = () => {
  useEffect(() => {
    const timeoutId = setTimeout(() => {
      toast({
        title: ""Arca.directory"",
        description: ""Find the best tools for entrepreneurs, developers, and designers."",
        duration: 6000,
      });
    }, 1000);

    return () => clearTimeout(timeoutId);
  }, []);

  return null;
};

export default EventToaster;","This is a versatile button component that supports various sizes and visual styles. The styles are defined using Tailwind CSS utility classes. The component uses clsx for composing the classes, and the visual style and size are determined by the 'variant' and 'size' props respectively."
layout,footer,"""use client"";

import React from ""react"";
import Link from ""next/link"";
import Image from ""next/image"";
import { Github } from ""lucide-react"";
import XIcon from ""../icons/x-icon"";

interface ProjectLink {
  href: string | null;
  text: string;
  description: string;
  icon: string;
  iconDark?: string;
  isNew?: boolean;
}

export const Footer: React.FC = () => {
  const projectLinks: ProjectLink[] = [
    {
      href: ""https://kokonutui.pro?utm_source=kokonutui.com&utm_medium=footer"",
      text: ""KokonutUI - PRO"",
      description: ""Premium UI Components to ship apps faster"",
      icon: ""/logo.svg"",
      iconDark: ""/logo-black.svg"",
    },
    {
      href: ""https://arca.directory/?utm_source=kokonutui.com&utm_medium=footer"",
      text: ""Arca Directory"",
      description:
        ""Find and share the best tools for developers, designers and entrepreneurs."",
      icon: ""https://arca.directory/icon.svg"",
      iconDark: ""https://arca.directory/icon.svg"",
    },
  ];

  return (
    <footer className=""border-t border-zinc-200 dark:border-zinc-800"">
      <div className=""mx-auto max-w-7xl px-4 py-6"">
        <h3 className=""text-sm font-semibold text-zinc-900 dark:text-white mb-6"">
          More from Me ??
        </h3>
        <div className=""flex flex-col sm:flex-row gap-6"">
          {/* Social links */}
          <div className=""flex flex-col gap-4 sm:w-48"">
            <Link
              href=""https://x.com/dorian_baffier""
              target=""_blank""
              rel=""noopener noreferrer""
              className=""flex items-center gap-2 text-zinc-500 hover:text-zinc-900 dark:text-zinc-400 dark:hover:text-white transition-colors""
            >
              <XIcon className=""h-4 w-4"" />
              <span className=""text-sm"">Twitter</span>
            </Link>
            <Link
              href=""https://github.com/kokonut-labs/kokonutui""
              target=""_blank""
              rel=""noopener noreferrer""
              className=""flex items-center gap-2 text-zinc-500 hover:text-zinc-900 dark:text-zinc-400 dark:hover:text-white transition-colors""
            >
              <Github className=""h-4 w-4"" />
              <span className=""text-sm"">Source Code</span>
            </Link>
          </div>

          {/* Project links */}
          <div className=""grid grid-cols-1 sm:grid-cols-2 gap-4 flex-1"">
            {projectLinks.map(({ href, text, description, icon, iconDark, isNew }) =>
              href ? (
                <Link
                  key={text}
                  href={href}
                  target=""_blank""
                  rel=""noopener noreferrer""
                  className=""group relative p-3 rounded-lg border border-zinc-200 dark:border-zinc-800 hover:border-zinc-300 dark:hover:border-zinc-700 transition-colors""
                >
                  {isNew && (
                    <span className=""text-purple-500 dark:text-purple-400 border border-purple-500 dark:border-purple-400 rounded-lg px-1 py-0.5 text-xs absolute top-2 right-2"">
                      New
                    </span>
                  )}
                  <div className=""flex items-center gap-2"">
                    <Image
                      src={icon}
                      alt={`${text} icon`}
                      width={20}
                      height={20}
                      className=""rounded-sm dark:hidden""
                    />
                    {iconDark && (
                      <Image
                        src={iconDark}
                        alt={`${text} icon (dark mode)`}
                        width={20}
                        height={20}
                        className=""rounded-sm hidden dark:block""
                      />
                    )}
                    <h4 className=""font-medium text-zinc-900 dark:text-white group-hover:underline"">
                      {text}
                    </h4>
                  </div>
                  <p className=""text-xs text-zinc-600 dark:text-zinc-400 mt-1"">
                    {description}
                  </p>
                </Link>
              ) : (
                <div
                  key={text}
                  className=""p-3 rounded-lg border border-zinc-200 dark:border-zinc-800""
                >
                  <div className=""flex items-center gap-2"">
                    <Image
                      src={icon}
                      alt={`${text} icon`}
                      width={20}
                      height={20}
                      className=""rounded-sm dark:hidden""
                    />
                    {iconDark && (
                      <Image
                        src={iconDark}
                        alt={`${text} icon (dark mode)`}
                        width={20}
                        height={20}
                        className=""rounded-sm hidden dark:block""
                      />
                    )}
                    <h4 className=""font-medium text-zinc-900 dark:text-white"">
                      {text}
                    </h4>
                  </div>
                  <p className=""text-xs text-zinc-600 dark:text-zinc-400 mt-1"">
                    {description}
                  </p>
                </div>
              )
            )}
          </div>
        </div>
      </div>
    </footer>
  );
};

export default Footer;","""use client"";

import { FC } from ""react"";
import Link from ""next/link"";
import { Github } from ""lucide-react"";
import Image from ""next/image"";
import { XIcon } from ""@heroicons/react/outline"";

interface ProjectLink {
  href?: string;
  text: string;
  description: string;
  icon: string;
  iconDark?: string;
  isNew?: boolean;
}

export const Footer: FC = () => {
  const projectLinks: ProjectLink[] = [
    {
      href: ""https://kokonutui.pro?utm_source=kokonutui.com&utm_medium=footer"",
      text: ""KokonutUI - PRO"",
      description: ""Premium UI Components to ship apps faster"",
      icon: ""/logo.svg"",
      iconDark: ""/logo-black.svg"",
    },
    {
      href: ""https://arca.directory/?utm_source=kokonutui.com&utm_medium=footer"",
      text: ""Arca Directory"",
      description:
        ""Find and share the best tools for developers, designers and entrepreneurs."",
      icon: ""https://arca.directory/icon.svg"",
      iconDark: ""https://arca.directory/icon.svg"",
    },
  ];

  return (
    <footer className=""border-t border-zinc-200 dark:border-zinc-800"">
      <div className=""mx-auto max-w-7xl px-4 py-6"">
        <h3 className=""text-sm font-semibold text-zinc-900 dark:text-white mb-6"">
          More from Me ??
        </h3>
        <div className=""grid grid-cols-1 sm:grid-cols-3 gap-6"">
          {/* Social Links */}
          <div className=""space-y-4"">
            <Link
              href=""https://x.com/dorian_baffier""
              target=""_blank""
              rel=""noopener noreferrer""
              className=""flex items-center space-x-2 text-zinc-500 hover:text-zinc-900 dark:text-zinc-400 dark:hover:text-white transition-colors""
            >
              <XIcon className=""h-4 w-4"" />
              <span className=""text-sm"">Twitter</span>
            </Link>

            <Link
              href=""https://github.com/kokonut-labs/kokonutui""
              target=""_blank""
              rel=""noopener noreferrer""
              className=""flex items-center space-x-2 text-zinc-500 hover:text-zinc-900 dark:text-zinc-400 dark:hover:text-white transition-colors""
            >
              <Github className=""h-4 w-4"" />
              <span className=""text-sm"">Source Code</span>
            </Link>
          </div>

          {/* Project Links */}
          <div className=""grid grid-cols-1 sm:grid-cols-2 gap-4 sm:col-span-2"">
            {projectLinks.map(({ href, text, description, icon, iconDark, isNew }) =>
              href ? (
                <Link
                  key={text}
                  href={href}
                  target=""_blank""
                  rel=""noopener noreferrer""
                  className=""group relative p-3 rounded-lg border border-zinc-200 dark:border-zinc-800 hover:border-zinc-300 dark:hover:border-zinc-700 transition-colors""
                >
                  {isNew && (
                    <span className=""absolute top-2 right-2 text-purple-500 dark:text-purple-400 border border-purple-500 dark:border-purple-400 rounded-lg px-1 py-0.5 text-xs"">
                      New
                    </span>
                  )}
                  <div className=""flex items-center space-x-2"">
                    <Image
                      src={icon}
                      alt={`${text} icon`}
                      width={20}
                      height={20}
                      className=""rounded-sm dark:hidden""
                    />
                    {iconDark && (
                      <Image
                        src={iconDark}
                        alt={`${text} icon (dark)`}
                        width={20}
                        height={20}
                        className=""rounded-sm hidden dark:block""
                      />
                    )}
                    <h4 className=""font-medium text-zinc-900 dark:text-white group-hover:underline"">
                      {text}
                    </h4>
                  </div>
                  <p className=""text-xs text-zinc-600 dark:text-zinc-400 mt-1"">
                    {description}
                  </p>
                </Link>
              ) : (
                <div
                  key={text}
                  className=""relative p-3 rounded-lg border border-zinc-200 dark:border-zinc-800""
                >
                  {isNew && (
                    <span className=""absolute top-2 right-2 text-purple-500 dark:text-purple-400 border border-purple-500 dark:border-purple-400 rounded-lg px-1 py-0.5 text-xs"">
                      New
                    </span>
                  )}
                  <div className=""flex items-center space-x-2"">
                    <Image
                      src={icon}
                      alt={`${text} icon`}
                      width={20}
                      height={20}
                      className=""rounded-sm dark:hidden""
                    />
                    {iconDark && (
                      <Image
                        src={iconDark}
                        alt={`${text} icon (dark)`}
                        width={20}
                        height={20}
                        className=""rounded-sm hidden dark:block""
                      />
                    )}
                    <h4 className=""font-medium text-zinc-900 dark:text-white"">
                      {text}
                    </h4>
                  </div>
                  <p className=""text-xs text-zinc-600 dark:text-zinc-400 mt-1"">
                    {description}
                  </p>
                </div>
              )
            )}
          </div>
        </div>
      </div>
    </footer>
  );
};

export default Footer;",Footer component containing social media links and project links.
landing,hero,"""use client"";

import { BrowseComponentsButton } from ""@/components/ui/browse-button"";
import FeatureBlock from ""./feature-block"";
import { motion } from ""motion/react"";
import Card08 from ""../kokonutui/card/card-08"";
import Btn03 from ""../kokonutui/button/btn-03"";
import Input09 from ""../kokonutui/input/input-09"";
import Link from ""next/link"";
import { Btn14 } from ""../kokonutui/button/btn-14"";
import { BrowseBlocksButton } from ""../ui/browse-blocks"";
import ActionSearchBar from ""../kokonutui/action-search-bar"";
import {
    PlaneTakeoff,
    BarChart2,
    Video,
    AudioLines,
    Globe,
    Diamond,
} from ""lucide-react"";
import AIInput_04 from ""../kokonutui/ai-input/ai-input-04"";

interface Action {
    id: string;
    label: string;
    icon: React.ReactNode;
    description?: string;
    short?: string;
    end?: string;
}

const allActions: Action[] = [
    {
        id: ""1"",
        label: ""Book tickets"",
        icon: <PlaneTakeoff className=""h-4 w-4 text-blue-500"" />,
        description: ""Operator"",
        short: ""âŒ˜K"",
        end: ""Agent"",
    },
    {
        id: ""2"",
        label: ""Summarize"",
        icon: <BarChart2 className=""h-4 w-4 text-orange-500"" />,
        description: ""gpt-4o"",
        short: ""âŒ˜cmd+p"",
        end: ""Command"",
    },
    {
        id: ""3"",
        label: ""Screen Studio"",
        icon: <Video className=""h-4 w-4 text-purple-500"" />,
        description: ""gpt-4o"",
        short: """",
        end: ""Application"",
    },
    {
        id: ""4"",
        label: ""Talk to Jarvis"",
        icon: <AudioLines className=""h-4 w-4 text-green-500"" />,
        description: ""DeepSeek"",
        short: """",
        end: ""Active"",
    },
    {
        id: ""5"",
        label: ""Translate"",
        icon: <Globe className=""h-4 w-4 text-blue-500"" />,
        description: ""Gemini"",
        short: """",
        end: ""Command"",
    },
];

export function HeroSection() {
    return (
        <div className=""mx-auto w-full md:w-[90%] min-h-screen flex flex-col lg:flex-row items-center justify-between gap-8 lg:gap-4 px-4 py-16 md:py-4"">
            {/* Left side - Title and CTA */}
            <div className=""w-full lg:w-[45%] flex flex-col items-start text-left space-y-8 md:mb-28"">
                <div>
                    <h1 className=""text-5xl sm:text-6xl lg:text-7xl font-bold tracking-tight leading-[1.1] text-zinc-900 dark:text-zinc-100"">
                        Collection <br />
                        of{"" ""}
                        <span className=""bg-clip-text text-transparent bg-linear-to-r from-orange-500 via-rose-500 to-purple-500 dark:from-orange-400 dark:via-rose-400 dark:to-purple-400"">
                            stunning
                        </span>{"" ""}
                        components.
                    </h1>
                    <p className=""mt-6 text-base md:text-xl text-zinc-700 dark:text-zinc-300 tracking-tighter max-w-lg"">
                        100+ Open Source UI components built with{"" ""}
                        <span className=""bg-clip-text text-transparent bg-linear-to-r from-orange-500 via-rose-500 to-purple-500 dark:from-orange-400 dark:via-rose-400 dark:to-purple-400"">
                            Tailwind CSS
                        </span>{"" ""}
                        and{"" ""}
                        <span className=""bg-clip-text text-transparent bg-linear-to-r from-orange-500 via-rose-500 to-purple-500 dark:from-orange-400 dark:via-rose-400 dark:to-purple-400"">
                            shadcn/ui
                        </span>{"" ""}
                        perfect for <span className=""font-semibold"">React</span>{"" ""}
                        and <span className=""font-semibold"">Next.js</span>.
                    </p>
                </div>
                <div className=""flex flex-col justify-start w-full"">
                    <div className=""flex flex-col sm:flex-row items-start sm:items-center justify-start gap-2"">
                        <BrowseComponentsButton />
                        <BrowseBlocksButton />
                    </div>
                </div>
                <FeatureBlock />
            </div>

            {/* Right side - Components Layout */}
            <div className=""w-full lg:w-[55%] flex flex-col justify-between 4 lg:pl-8"">
                {/* Top row: Card + Action Search Bar */}
                <motion.div
                    initial={{ opacity: 0, y: -20, scale: 0.95 }}
                    animate={{ opacity: 1, y: 0, scale: 1 }}
                    transition={{ duration: 0.5 }}
                    className=""w-full grid grid-cols-1 md:grid-cols-2 gap-6 items-center justify-center""
                >
                    {/* Card component */}
                    <div className=""w-full flex flex-col items-center justify-center "">
                        <span className=""text-sm text-zinc-500 dark:text-zinc-400 block text-center mb-2"">
                            Card
                        </span>
                        <Card08 href=""/docs/components/card"" />
                    </div>

                    {/* Action Search Bar */}
                    <div className=""w-full"">
                        <span className=""text-sm text-zinc-500 dark:text-zinc-400 block text-center mb-2"">
                            Components
                        </span>
                        <ActionSearchBar
                            actions={allActions}
                            defaultOpen={true}
                        />
                    </div>
                </motion.div>

                {/* Middle row: AI Chat */}
                <motion.div
                    initial={{ opacity: 0, scale: 0.95 }}
                    animate={{ opacity: 1, scale: 1 }}
                    transition={{ duration: 0.5, delay: 0.2 }}
                    className=""w-full""
                >
                    <span className=""text-sm text-zinc-500 dark:text-zinc-400 block text-center mb-2"">
                        AI Chat
                    </span>
                    <AIInput_04 />
                </motion.div>

                {/* Bottom row: Buttons on left, Input on right */}
                <motion.div
                    initial={{ opacity: 0, y: 20, scale: 0.95 }}
                    animate={{ opacity: 1, y: 0, scale: 1 }}
                    transition={{ duration: 0.5, delay: 0.4 }}
                    className=""w-full grid grid-cols-1 md:grid-cols-2 gap-6""
                >
                    {/* Left side - Buttons */}
                    <div className=""w-full"">
                        <span className=""text-sm text-zinc-500 dark:text-zinc-400 block text-center mb-2"">
                            Buttons
                        </span>
                        <div className=""w-full flex flex-col items-center justify-center gap-3"">
                            <Link href=""/docs/components/button"">
                                <Btn14
                                    label=""Bring me""
                                    className="" w-42 py-5""
                                />
                            </Link>
                            <Link href=""/docs/components/button"">
                                <Btn03 className="" w-42 py-5"" />
                            </Link>
                        </div>
                    </div>

                    {/* Right side - Input */}
                    <div className=""w-full"">
                        <span className=""text-sm text-zinc-500 dark:text-zinc-400 block text-center mb-2"">
                            Input
                        </span>
                        <Link href=""/docs/components/input"">
                            <Input09 />
                        </Link>
                    </div>
                </motion.div>
            </div>
        </div>
    );
}","import React from 'react';
import { BrowseComponentsButton } from ""@/components/ui/browse-button"";
import FeatureBlock from ""./feature-block"";
import { motion } from ""motion/react"";
import Card08 from ""../kokonutui/card/card-08"";
import Btn03 from ""../kokonutui/button/btn-03"";
import Input09 from ""../kokonutui/input/input-09"";
import Link from ""next/link"";
import { Btn14 } from ""../kokonutui/button/btn-14"";
import { BrowseBlocksButton } from ""../ui/browse-blocks"";
import ActionSearchBar from ""../kokonutui/action-search-bar"";
import {
    PlaneTakeoff,
    BarChart2,
    Video,
    AudioLines,
    Globe,
    Diamond,
} from ""lucide-react"";
import AIInput_04 from ""../kokonutui/ai-input/ai-input-04"";

interface Action {
    id: string;
    label: string;
    icon: React.ReactNode;
    description?: string;
    short?: string;
    end?: string;
}

const allActions: Action[] = [
    {
        id: ""1"",
        label: ""Book tickets"",
        icon: <PlaneTakeoff className=""h-4 w-4 text-blue-500"" />,
        description: ""Operator"",
        short: ""âŒ˜K"",
        end: ""Agent"",
    },
    {
        id: ""2"",
        label: ""Summarize"",
        icon: <BarChart2 className=""h-4 w-4 text-orange-500"" />,
        description: ""gpt-4o"",
        short: ""âŒ˜cmd+p"",
        end: ""Command"",
    },
    {
        id: ""3"",
        label: ""Screen Studio"",
        icon: <Video className=""h-4 w-4 text-purple-500"" />,
        description: ""gpt-4o"",
        short: """",
        end: ""Application"",
    },
    {
        id: ""4"",
        label: ""Talk to Jarvis"",
        icon: <AudioLines className=""h-4 w-4 text-green-500"" />,
        description: ""DeepSeek"",
        short: """",
        end: ""Active"",
    },
    {
        id: ""5"",
        label: ""Translate"",
        icon: <Globe className=""h-4 w-4 text-blue-500"" />,
        description: ""Gemini"",
        short: """",
        end: ""Command"",
    },
];

export const HeroSection: React.FC = () => {
    return (
        <div className=""mx-auto w-full md:w-9/10 min-h-screen flex flex-col lg:flex-row items-center justify-between gap-8 lg:gap-4 px-4 py-16 md:py-4"">
            <div className=""w-full lg:w-2/5 flex flex-col items-start text-left space-y-8 md:mb-28"">
                <div>
                    <h1 className=""text-5xl sm:text-6xl lg:text-7xl font-bold tracking-tight leading-[1.1] text-zinc-900 dark:text-zinc-100"">
                        Collection <br />
                        of{"" ""}
                        <span className=""bg-clip-text text-transparent bg-gradient-to-r from-orange-500 via-rose-500 to-purple-500 dark:from-orange-400 dark:via-rose-400 dark:to-purple-400"">
                            stunning
                        </span>{"" ""}
                        components.
                    </h1>
                    <p className=""mt-6 text-base md:text-xl text-zinc-700 dark:text-zinc-300 tracking-tighter max-w-lg"">
                        100+ Open Source UI components built with{"" ""}
                        <span className=""bg-clip-text text-transparent bg-gradient-to-r from-orange-500 via-rose-500 to-purple-500 dark:from-orange-400 dark:via-rose-400 dark:to-purple-400"">
                            Tailwind CSS
                        </span>{"" ""}
                        and{"" ""}
                        <span className=""bg-clip-text text-transparent bg-gradient-to-r from-orange-500 via-rose-500 to-purple-500 dark:from-orange-400 dark:via-rose-400 dark:to-purple-400"">
                            shadcn/ui
                        </span>{"" ""}
                        perfect for <span className=""font-semibold"">React</span>{"" ""}
                        and <span className=""font-semibold"">Next.js</span>.
                    </p>
                </div>
                <div className=""flex flex-col justify-start w-full"">
                    <div className=""flex flex-col sm:flex-row items-start sm:items-center justify-start gap-2"">
                        <BrowseComponentsButton />
                        <BrowseBlocksButton />
                    </div>
                </div>
                <FeatureBlock />
            </div>
            <div className=""w-full lg:w-3/5 flex flex-col justify-between 4 lg:pl-8"">
                <motion.div
                    initial={{ opacity: 0, y: -20, scale: 0.95 }}
                    animate={{ opacity: 1, y: 0, scale: 1 }}
                    transition={{ duration: 0.5 }}
                    className=""w-full grid grid-cols-1 md:grid-cols-2 gap-6 items-center justify-center""
                >
                    <div className=""w-full flex flex-col items-center justify-center "">
                        <span className=""text-sm text-zinc-500 dark:text-zinc-400 block text-center mb-2"">
                            Card
                        </span>
                        <Card08 href=""/docs/components/card"" />
                    </div>
                    <div className=""w-full"">
                        <span className=""text-sm text-zinc-500 dark:text-zinc-400 block text-center mb-2"">
                            Components
                        </span>
                        <ActionSearchBar
                            actions={allActions}
                            defaultOpen={true}
                        />
                    </div>
                </motion.div>
                <motion.div
                    initial={{ opacity: 0, scale: 0.95 }}
                    animate={{ opacity: 1, scale: 1 }}
                    transition={{ duration: 0.5, delay: 0.2 }}
                    className=""w-full""
                >
                    <span className=""text-sm text-zinc-500 dark:text-zinc-400 block text-center mb-2"">
                        AI Chat
                    </span>
                    <AIInput_04 />
                </motion.div>
                <motion.div
                    initial={{ opacity: 0, y: 20, scale: 0.95 }}
                    animate={{ opacity: 1, y: 0, scale: 1 }}
                    transition={{ duration: 0.5, delay: 0.4 }}
                    className=""w-full grid grid-cols-1 md:grid-cols-2 gap-6""
                >
                    <div className=""w-full"">
                        <span className=""text-sm text-zinc-500 dark:text-zinc-400 block text-center mb-2"">
                            Buttons
                        </span>
                        <div className=""w-full flex flex-col items-center justify-center gap-3"">
                            <Link href=""/docs/components/button"">
                                <Btn14
                                    label=""Bring me""
                                    className="" w-42 py-5""
                                />
                            </Link>
                            <Link href=""/docs/components/button"">
                                <Btn03 className="" w-42 py-5"" />
                            </Link>
                        </div>
                    </div>
                    <div className=""w-full"">
                        <span className=""text-sm text-zinc-500 dark:text-zinc-400 block text-center mb-2"">
                            Input
                        </span>
                        <Link href=""/docs/components/input"">
                            <Input09 />
                        </Link>
                    </div>
                </motion.div>
            </div>
        </div>
    );
}",The HeroSection component is a landing page section offering an introduction to the site and displaying a collection of UI components.
landing,header,"use client';

import { ThemeToggle } from '@/lib/theme-toggle';
import { Menu, ArrowUpRight, PartyPopper } from 'lucide-react';
import Link from 'next/link';
import { Link as ViewTransitionsLink } from 'next-view-transitions';
import Image from 'next/image';
import { HeaderPro } from './header-pro';

export function Header() {
  return (
    <>
      {/* Mobile Pro Banner completely separate from sticky header */}
      <div className=""sm:hidden w-full p-2.5 bg-white dark:bg-black/5"">
        <Link
          href=""https://kokonutui.pro?utm_source=kokonutui.com&utm_medium=header""
          target=""_blank""
          className=""flex items-center justify-center gap-2""
        >
          <span className=""flex items-center gap-2"">
            <PartyPopper className=""w-3.5 h-3.5"" />
            <span className=""text-transparent bg-gradient-to-r from-orange-500 via-amber-500 to-orange-600 bg-clip-text font-semibold"">
              Explore new components
            </span>
          </span>

          <div className=""group relative inline-flex items-center gap-2 px-3 py-1 text-sm rounded-lg bg-zinc-900 dark:bg-zinc-100 transition-colors"">
            <div className=""absolute inset-0 rounded-lg bg-gradient-to-r from-orange-500 via-amber-500 to-orange-600 opacity-40 group-hover:opacity-80 blur-sm transition-opacity duration-500"" />
            <div className=""relative z-10 flex items-center gap-2"">
              <span className=""text-white dark:text-zinc-900"">KokonutUI Pro</span>
              <ArrowUpRight className=""w-3.5 h-3.5 text-white/90 dark:text-zinc-900/90"" />
            </div>
          </div>
        </Link>
      </div>

      <div className=""sticky top-0 left-0 right-0 z-50"">
        <div className=""bg-white dark:bg-black w-full"">
          {/* Rest of the header content */}
          <div className=""flex items-center justify-center w-full flex-col"">
            <div
              className={`
                flex items-center justify-between
                bg-linear-to-b from-white/90 via-gray-50/90 to-white/90
                dark:from-zinc-900/90 dark:via-zinc-800/90 dark:to-zinc-900/90
                shadow-[0_2px_20px_-2px_rgba(0,0,0,0.1)]
                backdrop-blur-md
                border 
                border-[rgba(230,230,230,0.7)] dark:border-[rgba(70,70,70,0.7)]
                w-[95%] sm:min-w-[800px] sm:max-w-[1200px]
                rounded-xl
                px-4 py-2 mt-2 md:mt-4 
                relative
                transition-all duration-300 ease-in-out
              `}
            >
              <div className=""relative z-10 flex items-center justify-between w-full gap-2"">
                {/* Logo Section with Navigation Links */}
                <div className=""flex items-center gap-6"">
                  <Link href=""/"" className=""flex items-center gap-2"">
                    <Image
                      src=""/logo.svg""
                      alt=""logo""
                      width={28}
                      height={28}
                      className=""hidden dark:block""
                    />
                    <Image
                      src=""/logo-black.svg""
                      alt=""logo""
                      width={28}
                      height={28}
                      className=""block dark:hidden""
                    />
                    <span className=""hidden sm:block font-semibold"">kokonut/ui</span>
                  </Link>
                  <span className=""text-zinc-300 dark:text-zinc-700"">|</span>
                  {/* Desktop Navigation Links */}
                  <div className=""hidden sm:flex items-center gap-4"">
                    <ViewTransitionsLink
                      href=""/docs/components/action-search-bar""
                      className=""text-sm text-zinc-600 hover:text-zinc-900 dark:text-zinc-400 dark:hover:text-zinc-100 transition-colors""
                    >
                      Components
                    </ViewTransitionsLink>

                    <Link
                      href=""https://kokonutui.pro/templates?utm_source=kokonutui.com&utm_medium=header""
                      target=""_blank""
                      className=""text-sm text-zinc-600 hover:text-zinc-900 dark:text-zinc-400 dark:hover:text-zinc-100 transition-colors flex items-center gap-2""
                    >
                      Templates
                      <span className=""text-orange-500 dark:text-orange-400 border border-orange-500 dark:border-orange-400 rounded-lg px-1 py-0.5 text-xs"">
                        New
                      </span>
                    </Link>
                  </div>
                </div>

                {/* Right side items */}
                <div className=""hidden sm:flex items-center gap-3"">
                  <span className=""text-zinc-300 dark:text-zinc-700"">|</span>
                  <HeaderPro />
                  <ThemeToggle />
                </div>

                {/* Mobile Navigation remains unchanged */}
                <div className=""flex sm:hidden items-center gap-4"">
                  <ViewTransitionsLink
                    href=""/docs/components/action-search-bar""
                    className=""text-sm text-zinc-600 hover:text-zinc-900 dark:text-zinc-400 dark:hover:text-zinc-100 transition-colors""
                  >
                    Components
                  </ViewTransitionsLink>
                  <ViewTransitionsLink
                    href=""/pricing""
                    className=""text-sm text-zinc-600 hover:text-zinc-900 dark:text-zinc-400 dark:hover:text-zinc-100 transition-colors""
                  >
                    Pricing
                  </ViewTransitionsLink>
                  <ThemeToggle />
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}","use client';

import React from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { HeaderPro } from './header-pro';
import { ThemeToggle } from '@/lib/theme-toggle';
import { Menu, ArrowUpRight, PartyPopper } from 'lucide-react';
import { Link as ViewTransitionsLink } from 'next-view-transitions';

const Header: React.FC = () => {
  return (
    <div className=""container mx-auto px-4"">
      {/* Announcement Strip */}
      <div className=""sm:hidden w-full p-2 bg-white dark:bg-gray-800 flex items-center justify-center gap-2"">
        <Link
          href=""https://kokonutui.pro?utm_source=kokonutui.com&utm_medium=header""
          target=""_blank""
        >
          <div className=""inline-flex items-center gap-2"">
            <PartyPopper className=""w-3.5 h-3.5"" />
            <span className=""font-semibold text-transparent bg-gradient-to-r from-orange-500 via-amber-500 to-orange-600 bg-clip-text"">
              Explore new components
            </span>
          </div>
        </Link>

        <div className=""relative inline-flex items-center gap-2 px-3 py-1 text-sm rounded-lg bg-zinc-900 dark:bg-zinc-100 transition-colors group"">
          <div className=""absolute inset-0 rounded-lg bg-gradient-to-r from-orange-500 via-amber-500 to-orange-600 opacity-40 group-hover:opacity-80 blur-sm transition-opacity duration-500"" />
          <div className=""relative z-10 flex items-center gap-2"">
            <span className=""text-white dark:text-zinc-900"">KokonutUI Pro</span>
            <ArrowUpRight className=""w-3.5 h-3.5 text-white/90 dark:text-zinc-900/90"" />
          </div>
        </div>
      </div>

      {/* Main Header */}
      <div className=""sticky top-0 z-50"">
        <div className=""bg-white dark:bg-gray-800 w-full"">
          <div className=""container mx-auto flex items-center justify-center flex-col"">
            <div className=""flex items-center justify-between bg-gradient-to-b from-white dark:from-gray-900 to-white dark:to-gray-900 shadow-md border border-gray-300 dark:border-gray-700 w-full sm:w-3/4 md:w-1/2 lg:w-1/3 rounded-xl px-4 py-2 mt-2 md:mt-4 transition-all duration-300 ease-in-out"">
              {/* Logo + Links */}
              <div className=""flex items-center gap-6"">
                <Link href=""/"">
                  <div className=""flex items-center gap-2"">
                    <Image
                      src=""/logo.svg""
                      alt=""logo""
                      width={28}
                      height={28}
                      className=""hidden dark:block""
                    />
                    <Image
                      src=""/logo-black.svg""
                      alt=""logo""
                      width={28}
                      height={28}
                      className=""block dark:hidden""
                    />
                    <span className=""hidden sm:block font-semibold"">
                      kokonut/ui
                    </span>
                  </div>
                </Link>

                <span className=""text-gray-400 dark:text-gray-600"">|</span>

                <div className=""hidden sm:flex items-center gap-4"">
                  <ViewTransitionsLink
                    href=""/docs/components/action-search-bar""
                    className=""text-sm text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-100 transition-colors""
                  >
                    Components
                  </ViewTransitionsLink>

                  <Link
                    href=""https://kokonutui.pro/templates?utm_source=kokonutui.com&utm_medium=header""
                    target=""_blank""
                    className=""text-sm text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-100 transition-colors flex items-center gap-2""
                  >
                    Templates
                    <span className=""text-orange-500 dark:text-orange-400 border border-orange-500 dark:border-orange-400 rounded-full px-1 py-0.5 text-xs"">
                      New
                    </span>
                  </Link>
                </div>
              </div>

              {/* Right controls */}
              <div className=""hidden sm:flex items-center gap-3"">
                <span className=""text-gray-400 dark:text-gray-600"">|</span>
                <HeaderPro />
                <ThemeToggle />
              </div>

              {/* Mobile controls */}
              <div className=""flex sm:hidden items-center gap-4"">
                <ViewTransitionsLink
                  href=""/docs/components/action-search-bar""
                  className=""text-sm text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-100 transition-colors""
                >
                  Components
                </ViewTransitionsLink>

                <ViewTransitionsLink
                  href=""/pricing""
                  className=""text-sm text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-100 transition-colors""
                >
                  Pricing
                </ViewTransitionsLink>

                <ThemeToggle />
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Header;",This component is a Header for the website. It contains navigation links and a theme toggle. It also has a sticky property so it always appears at the top of the webpage.
landing,technology-badges,"import { FC } from 'react';
import { Sparkles } from 'lucide-react';

interface BadgeProps {
  gradient: string;
  borderColor: string;
  iconColor: string;
  text: string;
}

const Badge: FC<BadgeProps> = ({ gradient, borderColor, iconColor, text }) => (
  <div
    className={`inline-flex items-center px-4 py-2 rounded-full text-sm shadow-sm ${gradient} ${borderColor}`}
  >
    <Sparkles className={`w-4 h-4 mr-2 ${iconColor}`} />
    <span className=""bg-clip-text text-transparent bg-gradient-to-r from-zinc-800 to-zinc-600 dark:from-zinc-200 dark:to-zinc-400"">
      {text}
    </span>
  </div>
);

export const TechnologyBadges: FC = () => (
  <div className=""flex flex-col sm:flex-row justify-center my-8 sm:my-24 gap-4"">
    <Badge
      gradient=""bg-gradient-to-r from-zinc-100 to-zinc-200 dark:from-zinc-900 dark:to-zinc-800""
      borderColor=""border border-zinc-200 dark:border-zinc-800""
      iconColor=""text-emerald-500""
      text=""Crafted with Next.js 15 & Tailwind CSS""
    />
    <Badge
      gradient=""bg-gradient-to-r from-orange-100 to-orange-200 dark:from-orange-900/30 dark:to-orange-800/30""
      borderColor=""border border-orange-200 dark:border-orange-800/30""
      iconColor=""text-orange-500""
      text=""Optionally with shadcn/ui and Framer Motion""
    />
  </div>
);","import { Sparkles } from ""lucide-react"";

export function TechnologyBadges() {
  return (
    <div className=""flex flex-col sm:flex-row justify-center my-8 sm:my-24 gap-4"">
      <div
        className=""
          inline-flex items-center px-4 py-2 rounded-full text-sm 
          bg-gradient-to-r from-zinc-100 to-zinc-200 dark:from-zinc-900 dark:to-zinc-800
          border border-zinc-200 dark:border-zinc-800 shadow-sm
        ""
      >
        <Sparkles className=""w-4 h-4 mr-2 text-emerald-500"" />
        <span className=""bg-clip-text text-transparent bg-gradient-to-r from-zinc-800 to-zinc-600 dark:from-zinc-200 dark:to-zinc-400"">
          Crafted with Next.js 15 & Tailwind CSS
        </span>
      </div>

      <div
        className=""
          inline-flex items-center px-4 py-2 rounded-full text-sm 
          bg-gradient-to-r from-orange-100 to-orange-200 dark:from-orange-900/30 dark:to-orange-800/30
          border border-orange-200 dark:border-orange-800/30 shadow-sm
        ""
      >
        <Sparkles className=""w-4 h-4 mr-2 text-orange-500"" />
        <span className=""bg-clip-text text-transparent bg-gradient-to-r from-orange-800 to-orange-600 dark:from-orange-200 dark:to-orange-400"">
          Optionally with shadcn/ui and Framer Motion
        </span>
      </div>
    </div>
  );
}",This component displays two technology badges with different colors and texts. It makes use of a reusable badge component to avoid code duplication.
landing,header-pro,"""use client"";

import { useState } from ""react"";
import { ArrowUpRight, PartyPopper, Rocket } from ""lucide-react"";
import Link from ""next/link"";
import XIcon from ""../icons/x-icon"";
import { ConfettiOutline } from ""../icons/conffeti"";

interface HeaderContent {
  text: string;
  productName: string;
  link: string;
}

export function HeaderPro() {
  const [content, setContent] = useState<HeaderContent>({
    text: ""Explore 70+ new components and templates"",
    productName: ""Kokonut UI Pro"",
    link: ""https://kokonutui.pro?utm_source=kokonutui.com&utm_medium=header"",
  });

  /*
  // Optional dynamic content change on mount
  useEffect(() => {
    const random = Math.random();
    if (random < 0.5) {
      setContent({
        text: ""Built app fast"",
        productName: ""Kokonut Boilerplate"",
        link: ""https://kokonut.dev?utm_source=kokonutui.com&utm_medium=header"",
      });
    } else {
      setContent({
        text: ""Explore new components"",
        productName: ""Kokonut UI Pro"",
        link: ""https://kokonutui.pro?utm_source=kokonutui.com&utm_medium=header"",
      });
    }
  }, []);
  */

  return (
    <div className=""flex items-center justify-end gap-1 flex-1"">
      <div className=""flex items-center justify-start md:justify-end gap-1 flex-1"">
        <Link
          href={content.link}
          target=""_blank""
          className=""flex items-center justify-end gap-2 pl-2 pr-0.5 py-1 text-sm font-medium text-zinc-800 dark:text-zinc-200 rounded-lg border-2 border-orange-500/20 hover:border-orange-500/60 transition-all duration-300 group hover:shadow-md""
        >
          <span className=""hidden md:flex items-center gap-2"">
            {content.productName === ""Kokonut UI Pro"" ? (
              <ConfettiOutline className=""w-4 h-4 text-orange-500"" />
            ) : (
              <Rocket className=""w-4 h-4 text-orange-500"" />
            )}
            <span className=""text-transparent bg-gradient-to-r from-orange-500 via-amber-500 to-orange-600 bg-clip-text font-semibold tracking-tighter"">
              {content.text}
            </span>
          </span>

          <span className=""flex md:hidden items-center gap-2"">
            {content.productName === ""Kokonut UI Pro"" ? (
              <PartyPopper className=""w-4 h-4 text-orange-500"" />
            ) : (
              <Rocket className=""w-4 h-4 text-orange-500"" />
            )}
            <span className=""text-transparent bg-gradient-to-r from-orange-500 via-amber-500 to-orange-600 bg-clip-text font-semibold"">
              {content.text.split("" "")[0]}
            </span>
          </span>

          <div className=""relative inline-flex items-center gap-2 px-1.5 py-0.5 text-sm rounded-md bg-gradient-to-r from-zinc-900 to-zinc-800 dark:from-zinc-100/90 dark:to-zinc-200/90 mr-1"">
            <div className=""flex items-center gap-1"">
              <span className=""text-white dark:text-zinc-900 group-hover:text-white dark:group-hover:text-zinc-900 tracking-tighter"">
                {content.productName}
              </span>
              <ArrowUpRight className=""w-3.5 h-3.5 text-white/90 dark:text-zinc-900/90 group-hover:text-white dark:group-hover:text-zinc-900 transition-transform group-hover:translate-x-[1px] group-hover:-translate-y-[1px]"" />
            </div>
          </div>
        </Link>

        <Link
          href=""https://github.com/kokonut-labs/kokonutui""
          target=""_blank""
          className=""hidden group relative md:inline-flex items-center gap-2 px-1.5 py-1 text-sm rounded-lg bg-zinc-900 dark:bg-zinc-100 transition-colors hover:bg-zinc-700 dark:hover:bg-zinc-300""
        >
          <div className=""relative flex items-center gap-2 w-full"">
            <svg
              viewBox=""0 0 24 24""
              className=""w-4 h-4 text-white dark:text-zinc-900""
              fill=""currentColor""
            >
              <title>Github</title>
              <path d=""M12 0C5.37 0 0 5.37 0 12c0 5.31 3.435 9.795 8.205 11.385.6.105.825-.255.825-.57 0-.285-.015-1.23-.015-2.235-3.015.555-3.795-.735-4.035-1.41-.135-.345-.72-1.41-1.23-1.695-.42-.225-1.02-.78-.015-.795.945-.015 1.62.87 1.845 1.23 1.08 1.815 2.805 1.305 3.495.99.105-.78.42-1.305.765-1.605-2.67-.3-5.46-1.335-5.46-5.925 0-1.305.465-2.385 1.23-3.225-.12-.3-.54-1.53.12-3.18 0 0 1.005-.315 3.3 1.23.96-.27 1.98-.405 3-.405s2.04.135 3 .405c2.295-1.56 3.3-1.23 3.3-1.23.66 1.65.24 2.88.12 3.18.765.84 1.23 1.905 1.23 3.225 0 4.605-2.805 5.625-5.475 5.925.435.375.81 1.095.81 2.22 0 1.605-.015 2.895-.015 3.3 0 .315.225.69.825.57A12.02 12.02 0 0024 12c0-6.63-5.37-12-12-12z"" />
            </svg>
            <span className=""text-white dark:text-zinc-900 group-hover:text-white dark:group-hover:text-zinc-900 tracking-tight font-light"">
              Github
            </span>
          </div>
        </Link>

        <Link
          href=""https://x.com/dorian_baffier""
          target=""_blank""
          className=""hidden group relative md:inline-flex items-center gap-2 px-1.5 py-1.5 text-sm rounded-lg bg-zinc-900 dark:bg-zinc-100 transition-colors hover:bg-zinc-700 dark:hover:bg-zinc-300""
        >
          <XIcon className=""w-4 h-4 text-white dark:text-zinc-900"" />
        </Link>
      </div>
    </div>
  );
}","""use client"";

import { ArrowUpRight, PartyPopper, Rocket } from ""lucide-react"";
import Link from ""next/link"";
import { useState, useEffect } from ""react"";
import { ConfettiOutline } from ""../icons/conffeti"";
import XIcon from ""../icons/x-icon"";

interface HeaderContent {
  text: string;
  productName: string;
  link: string;
}

export const HeaderPro: React.FC = () => {
  const [content, setContent] = useState<HeaderContent>({
    text: ""Explore 70+ new components and templates"",
    productName: ""Kokonut UI Pro"",
    link: ""https://kokonutui.pro?utm_source=kokonutui.com&utm_medium=header"",
  });

  // Optional: uncomment if you want to randomize content on mount
  // useEffect(() => {
  //   const random = Math.random();
  //   if (random < 0.5) {
  //     setContent({
  //       text: ""Built app fast"",
  //       productName: ""Kokonut Boilerplate"",
  //       link: ""https://kokonut.dev?utm_source=kokonutui.com&utm_medium=header"",
  //     });
  //   } else {
  //     setContent({
  //       text: ""Explore new components"",
  //       productName: ""Kokonut UI Pro"",
  //       link: ""https://kokonutui.pro?utm_source=kokonutui.com&utm_medium=header"",
  //     });
  //   }
  // }, []);

  return (
    <div className=""flex items-center justify-end gap-1 flex-1"">
      <div className=""flex items-center justify-start md:justify-end gap-1 flex-1"">
        <Link
          href={content.link}
          target=""_blank""
          className=""flex items-center justify-end gap-2 pl-2 pr-0.5 py-1 text-sm font-medium text-zinc-800 dark:text-zinc-200 rounded-lg border-2 border-orange-500/20 hover:border-orange-500/60 transition-all duration-300 group hover:shadow-md""
          rel=""noopener noreferrer""
        >
          <span className=""hidden md:flex items-center gap-2"">
            {content.productName === ""Kokonut UI Pro"" ? (
              <ConfettiOutline className=""w-4 h-4 text-orange-500"" />
            ) : (
              <Rocket className=""w-4 h-4 text-orange-500"" />
            )}
            <span className=""text-transparent bg-gradient-to-r from-orange-500 via-amber-500 to-orange-600 bg-clip-text font-semibold tracking-tighter"">
              {content.text}
            </span>
          </span>

          <span className=""flex md:hidden items-center gap-2"">
            {content.productName === ""Kokonut UI Pro"" ? (
              <PartyPopper className=""w-4 h-4 text-orange-500"" />
            ) : (
              <Rocket className=""w-4 h-4 text-orange-500"" />
            )}
            <span className=""text-transparent bg-gradient-to-r from-orange-500 via-amber-500 to-orange-600 bg-clip-text font-semibold"">
              {content.text.split("" "")[0]}
            </span>
          </span>

          <div className=""relative inline-flex items-center gap-2 px-1.5 py-0.5 text-sm rounded-md bg-gradient-to-r from-zinc-900 to-zinc-800 dark:from-zinc-100/90 dark:to-zinc-200/90 mr-1"">
            <div className=""flex items-center gap-1"">
              <span className=""text-white dark:text-zinc-900 group-hover:text-white dark:group-hover:text-zinc-900 tracking-tighter"">
                {content.productName}
              </span>
              <ArrowUpRight className=""w-3.5 h-3.5 text-white/90 dark:text-zinc-900/90 group-hover:text-white dark:group-hover:text-zinc-900 transition-transform group-hover:translate-x-[1px] group-hover:-translate-y-[1px]"" />
            </div>
          </div>
        </Link>

        <Link
          href=""https://github.com/kokonut-labs/kokonutui""
          target=""_blank""
          className=""hidden group relative md:inline-flex items-center gap-2 px-1.5 py-1 text-sm rounded-lg bg-zinc-900 dark:bg-zinc-100 transition-colors hover:bg-zinc-700 dark:hover:bg-zinc-300""
          rel=""noopener noreferrer""
        >
          <div className=""relative flex items-center gap-2 w-full"">
            <svg
              viewBox=""0 0 24 24""
              className=""w-4 h-4 text-white dark:text-zinc-900""
              fill=""currentColor""
            >
              <title>Github</title>
              <path d=""M12 0C5.37 0 0 5.37 0 12c0 5.31 3.435 9.795 8.205 11.385.6.105.825-.255.825-.57 0-.285-.015-1.23-.015-2.235-3.015.555-3.795-.735-4.035-1.41-.135-.345-.72-1.41-1.23-1.695-.42-.225-1.02-.78-.015-.795.945-.015 1.62.87 1.845 1.23 1.08 1.815 2.805 1.305 3.495.99.105-.78.42-1.305.765-1.605-2.67-.3-5.46-1.335-5.46-5.925 0-1.305.465-2.385 1.23-3.225-.12-.3-.54-1.53.12-3.18 0 0 1.005-.315 3.3 1.23.96-.27 1.98-.405 3-.405s2.04.135 3 .405c2.295-1.56 3.3-1.23 3.3-1.23.66 1.65.24 2.88.12 3.18.765.84 1.23 1.905 1.23 3.225 0 4.605-2.805 5.625-5.475 5.925.435.375.81 1.095.81 2.22 0 1.605-.015 2.895-.015 3.3 0 .315.225.69.825.57A12.02 12.02 0 0024 12c0-6.63-5.37-12-12-12z"" />
            </svg>
            <span className=""text-white dark:text-zinc-900 group-hover:text-white dark:group-hover:text-zinc-900 tracking-tight font-light"">
              Github
            </span>
          </div>
        </Link>

        <Link
          href=""https://x.com/dorian_baffier""
          target=""_blank""
          className=""hidden group relative md:inline-flex items-center gap-2 px-1.5 py-1.5 text-sm rounded-lg bg-zinc-900 dark:bg-zinc-100 transition-colors hover:bg-zinc-700 dark:hover:bg-zinc-300""
          rel=""noopener noreferrer""
        >
          <XIcon className=""w-4 h-4 text-white dark:text-zinc-900"" />
        </Link>
      </div>
    </div>
  );
};","The HeaderPro component displays a header with links. These links contain icons and text, with different icons and text displayed based on the productName in the component's state. The component also includes hover effects."
landing,showcase,"import { ArrowRight } from ""lucide-react"";
import Link from ""next/link"";
import Text02 from ""@/components/kokonutui/text/text-02"";

export const ShowcaseSection: React.FC = () => {
  return (
    <div className=""py-8 sm:py-24 text-center relative"">
      <div className=""inline-block mb-12"">
        <h2 className=""text-2xl sm:text-4xl font-bold tracking-tight"">
          <Text02
            text=""Showcase""
            className=""bg-clip-text text-transparent bg-linear-to-r from-pink-500 to-amber-500 dark:from-pink-400 dark:to-amber-400 text-4xl sm:text-7xl""
          />
        </h2>
      </div>

      <div className=""relative max-w-6xl mx-auto px-4"">
        {/* Left top */}
        <div className=""hidden sm:block absolute -left-4 top-1/4 transform -translate-x-full text-left"">
          <p className=""text-sm font-medium text-zinc-800 dark:text-zinc-200 mb-2"">
            50+ Components
          </p>
          <p className=""text-sm text-zinc-600 dark:text-zinc-400"">Ready to Use</p>
        </div>

        {/* Right top */}
        <div className=""hidden sm:block absolute -right-4 top-1/3 transform translate-x-full text-right"">
          <p className=""text-sm font-medium text-zinc-800 dark:text-zinc-200 mb-2"">
            Built in minutes
          </p>
          <p className=""text-sm text-zinc-600 dark:text-zinc-400"">not hours</p>
        </div>

        {/* Left bottom */}
        <div className=""hidden sm:block absolute -left-4 bottom-1/3 transform -translate-x-full text-left"">
          <p className=""text-sm text-zinc-600 dark:text-zinc-400"">
            Fully Customizable
          </p>
        </div>

        {/* Right bottom */}
        <div className=""hidden sm:block absolute -right-4 bottom-1/4 transform translate-x-full text-right"">
          <p className=""text-sm font-medium text-zinc-800 dark:text-zinc-200"">
            Beautiful interfaces
          </p>
        </div>

        <img
          src=""https://ferf1mheo22r9ira.public.blob.vercel-storage.com/Screenshot%202025-01-06%20at%2011.53.17%E2%80%AFAM-cjYGbgucRv0EPwuOF2VdsvMIUDrERS.png""
          alt=""KokonutUI Screenshot""
          className=""w-full sm:w-[80%] h-[300px] sm:h-[650px] mx-auto object-cover rounded-lg shadow-xl hover:shadow-2xl hover:shadow-zinc-900/20 dark:hover:shadow-zinc-100/10 transition-all duration-200""
          width={800}
          height={1000}
          loading=""lazy""
        />

        <div className=""sm:hidden mt-4 space-y-2"">
          <p className=""text-sm font-medium text-zinc-800 dark:text-zinc-200"">
            Beautiful interfaces built in minutes
          </p>
          <div className=""flex items-center justify-center gap-2 text-xs text-zinc-600 dark:text-zinc-400"">
            <span>50+ Components</span>
            <span className=""w-1 h-1 rounded-full bg-zinc-300 dark:bg-zinc-700"" />
            <span>Ready to Use</span>
          </div>
        </div>

        <Link
          href=""https://kokonutui-demo.vercel.app/""
          target=""_blank""
          rel=""noopener noreferrer""
          className=""absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2
            group inline-flex items-center gap-2 px-4 sm:px-8 py-2 sm:py-4 rounded-xl
            bg-white
            text-zinc-900 text-sm sm:text-base font-medium
            hover:shadow-lg hover:shadow-zinc-900/20
            transition-all duration-200 ease-in-out
            backdrop-blur-xs bg-opacity-90""
        >
          <span>View Live Demo</span>
          <ArrowRight className=""w-3 h-3 sm:w-4 sm:h-4 group-hover:translate-x-1 transition-transform"" />
        </Link>
      </div>
    </div>
  );
};","import { FC } from 'react';
import { ArrowRight } from 'lucide-react';
import Link from 'next/link';
import Text02 from ""@/components/kokonutui/text/text-02"";

const ShowcaseSection: FC = () => {
  const imageURL = 'https://ferf1mheo22r9ira.public.blob.vercel-storage.com/Screenshot%202025-01-06%20at%2011.53.17%E2%80%AFAM-cjYGbgucRv0EPwuOF2VdsvMIUDrERS.png';
  const demoURL = 'https://kokonutui-demo.vercel.app/';

  return (
    <div className=""py-8 sm:py-24 text-center relative"">
      <div className=""inline-block mb-12"">
        <h2 className=""text-2xl sm:text-4xl font-bold tracking-tight"">
          <Text02
            text=""Showcase""
            className=""bg-clip-text text-transparent bg-linear-to-r from-pink-500 to-amber-500 dark:from-pink-400 dark:to-amber-400 text-4xl sm:text-7xl""
          />
        </h2>
      </div>

      <div className=""relative max-w-6xl mx-auto px-4"">
        <div className=""hidden sm:block absolute -left-4 top-1/4 transform -translate-x-full text-left"">
          <p className=""text-sm font-medium text-zinc-800 dark:text-zinc-200 mb-2"">
            50+ Components
          </p>
          <p className=""text-sm text-zinc-600 dark:text-zinc-400"">
            Ready to Use
          </p>
        </div>

        <div className=""hidden sm:block absolute -right-4 top-1/3 transform translate-x-full text-right"">
          <p className=""text-sm font-medium text-zinc-800 dark:text-zinc-200 mb-2"">
            Built in minutes
          </p>
          <p className=""text-sm text-zinc-600 dark:text-zinc-400"">
            not hours
          </p>
        </div>

        <div className=""hidden sm:block absolute -left-4 bottom-1/3 transform -translate-x-full text-left"">
          <p className=""text-sm text-zinc-600 dark:text-zinc-400"">
            Fully Customizable
          </p>
        </div>

        <div className=""hidden sm:block absolute -right-4 bottom-1/4 transform translate-x-full text-right"">
          <p className=""text-sm font-medium text-zinc-800 dark:text-zinc-200"">
            Beautiful interfaces
          </p>
        </div>

        <img
          src={imageURL}
          alt=""KokonutUI Screenshot""
          className=""w-full sm:w-[80%] h-[300px] sm:h-[650px] mx-auto object-cover rounded-lg shadow-xl hover:shadow-2xl hover:shadow-zinc-900/20 dark:hover:shadow-zinc-100/10 transition-all duration-200""
          width={800}
          height={1000}
          loading=""lazy""
        />

        <div className=""sm:hidden mt-4 space-y-2"">
          <p className=""text-sm font-medium text-zinc-800 dark:text-zinc-200"">
            Beautiful interfaces built in minutes
          </p>
          <div className=""flex items-center justify-center gap-2 text-xs text-zinc-600 dark:text-zinc-400"">
            <span>50+ Components</span>
            <span className=""w-1 h-1 rounded-full bg-zinc-300 dark:bg-zinc-700"" />
            <span>Ready to Use</span>
          </div>
        </div>

        <Link
          href={demoURL}
          target=""_blank""
          rel=""noopener noreferrer""
          className=""absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2
            group inline-flex items-center gap-2 px-4 sm:px-8 py-2 sm:py-4 rounded-xl
            bg-white
            text-zinc-900 text-sm sm:text-base font-medium
            hover:shadow-lg hover:shadow-zinc-900/20
            transition-all duration-200 ease-in-out
            backdrop-blur-xs bg-opacity-90""
        >
          <span>View Live Demo</span>
          <ArrowRight className=""w-3 h-3 sm:w-4 sm:h-4 group-hover:translate-x-1 transition-transform"" />
        </Link>
      </div>
    </div>
  );
}

export default ShowcaseSection;","This component is a showcase section for a landing page, featuring several elements such as a title, some descriptive texts and an image. It also includes a link for a live demo."
landing,interfaceCards,"import Link from ""next/link"";
import { ArrowRight, Github, Zap } from ""lucide-react"";
import AIInput_04 from ""@/components/kokonutui/ai-input/ai-input-04"";

function Header() {
    return (
        <div>
            <h2 className=""text-4xl sm:text-5xl font-bold tracking-tight"">
                <span className=""bg-clip-text text-transparent bg-linear-to-r from-amber-500 to-pink-500 dark:from-amber-400 dark:to-pink-400"">
                    Build beautiful interfaces
                </span>
            </h2>
            <p className=""mt-6 text-base sm:text-lg text-zinc-600 dark:text-zinc-400 leading-relaxed"">
                A collection of UI components that you can copy and paste into
                your apps.
            </p>
            <p className=""mt-2 text-base text-zinc-500 dark:text-zinc-400"">
                Accessible. Open Source.
            </p>
        </div>
    );
}

interface BuildInterfacesCardProps {
    className: string;
}

export function BuildInterfacesCard({ className }: BuildInterfacesCardProps) {
    return (
        <div className={className}>
            <div className=""h-full flex flex-col justify-between"">
                <Header />
                <div>
                    <p className=""text-sm text-zinc-500 dark:text-zinc-400 mb-2"">
                        components / AI-Input-04
                    </p>
                    <div className=""select-none cursor-default touch-none pointer-events-none"">
                        <AIInput_04 />
                    </div>
                </div>

                <div className=""flex flex-wrap gap-4 mt-8"">
                    <Link
                        href=""/docs""
                        className=""group inline-flex items-center gap-2 px-6 py-3 rounded-lg 
                            bg-linear-to-r from-zinc-900 to-zinc-800 dark:from-zinc-100 dark:to-zinc-200
                            text-white dark:text-zinc-900 
                            hover:shadow-lg hover:shadow-zinc-900/20 dark:hover:shadow-zinc-100/20
                            transition-all duration-200 ease-in-out""
                    >
                        <Zap className=""w-4 h-4 group-hover:rotate-12 transition-transform"" />
                        <span className=""font-medium"">Explore Components</span>
                        <ArrowRight className=""w-4 h-4 group-hover:translate-x-1 transition-transform"" />
                    </Link>

                    <Link
                        href=""https://github.com/kokonut-labs/kokonutui""
                        target=""_blank""
                        className=""group inline-flex items-center gap-2 px-6 py-3 rounded-lg
                            border border-zinc-200 dark:border-zinc-800
                            hover:bg-zinc-100 dark:hover:bg-zinc-800/50
                            hover:shadow-lg hover:shadow-zinc-900/10 dark:hover:shadow-zinc-100/10
                            transition-all duration-200""
                    >
                        <Github className=""w-4 h-4 group-hover:scale-110 transition-transform"" />
                        <span className=""font-medium"">View on GitHub</span>
                        <ArrowRight className=""w-4 h-4 opacity-0 group-hover:opacity-100 group-hover:translate-x-1 transition-all"" />
                    </Link>
                </div>
            </div>
        </div>
    );
}","import Link from ""next/link"";
import { ArrowRight, Github, Zap } from ""lucide-react"";
import AIInput_04 from ""@/components/kokonutui/ai-input/ai-input-04"";

type HeaderProps = {
};

const Header: React.FC<HeaderProps> = () => {
    return (
        <div>
            <h2 className=""text-4xl sm:text-5xl font-bold tracking-tight"">
                <span className=""bg-clip-text text-transparent bg-gradient-to-r from-amber-500 to-pink-500 dark:from-amber-400 dark:to-pink-400"">
                    Build beautiful interfaces
                </span>
            </h2>
            <p className=""mt-6 text-base sm:text-lg text-zinc-600 dark:text-zinc-400 leading-relaxed"">
                A collection of UI components that you can copy and paste into
                your apps.
            </p>
            <p className=""mt-2 text-base text-zinc-500 dark:text-zinc-400"">
                Accessible. Open Source.
            </p>
        </div>
    );
}

interface BuildInterfacesCardProps {
    className: string;
}

export const BuildInterfacesCard: React.FC<BuildInterfacesCardProps> = ({ className }) => {
    return (
        <div className={className}>
            <div className=""h-full flex flex-col justify-between"">
                <Header />
                <div>
                    <p className=""text-sm text-zinc-500 dark:text-zinc-400 mb-2"">
                        components / AI-Input-04
                    </p>
                    <div className=""select-none cursor-default touch-none pointer-events-none"">
                        <AIInput_04 />
                    </div>
                </div>

                <div className=""flex flex-wrap gap-4 mt-8"">
                    <Link
                        href=""/docs""
                        className=""group inline-flex items-center gap-2 px-6 py-3 rounded-lg 
                            bg-gradient-to-r from-zinc-900 to-zinc-800 dark:from-zinc-100 dark:to-zinc-200
                            text-white dark:text-zinc-900 
                            hover:shadow-lg hover:shadow-zinc-900/20 dark:hover:shadow-zinc-100/20
                            transition-all duration-200 ease-in-out""
                    >
                        <Zap className=""w-4 h-4 group-hover:rotate-12 transition-transform"" />
                        <span className=""font-medium"">Explore Components</span>
                        <ArrowRight className=""w-4 h-4 group-hover:translate-x-1 transition-transform"" />
                    </Link>

                    <Link
                        href=""https://github.com/kokonut-labs/kokonutui""
                        target=""_blank""
                        className=""group inline-flex items-center gap-2 px-6 py-3 rounded-lg
                            border border-zinc-200 dark:border-zinc-800
                            hover:bg-zinc-100 dark:hover:bg-zinc-800/50
                            hover:shadow-lg hover:shadow-zinc-900/10 dark:hover:shadow-zinc-100/10
                            transition-all duration-200""
                    >
                        <Github className=""w-4 h-4 group-hover:scale-110 transition-transform"" />
                        <span className=""font-medium"">View on GitHub</span>
                        <ArrowRight className=""w-4 h-4 opacity-0 group-hover:opacity-100 group-hover:translate-x-1 transition-all"" />
                    </Link>
                </div>
            </div>
        </div>
    );
}",This component displays a card with information about the UI library and links to explore more components or view the library on GitHub. It includes a header and a sample interface component.
landing,interactive-preview,"""use client"";

import { motion } from ""motion/react"";
import { useState } from ""react"";
import { cn } from ""@/lib/utils"";
import { Code, Palette, Zap } from ""lucide-react"";

interface Feature {
    icon: React.ReactNode;
    title: string;
    description: string;
    preview: React.ReactNode;
}

const FEATURES: Feature[] = [
    {
        icon: <Code className=""w-5 h-5"" />,
        title: ""Copy & Paste Ready"",
        description: ""Every component is ready to be copied directly into your project."",
        preview: (
            <div className=""w-full h-full bg-linear-to-br from-zinc-900 to-zinc-800 dark:from-zinc-200 dark:to-zinc-100 rounded-lg p-4"">
                <pre className=""text-xs text-white dark:text-zinc-900"">
                    <code>{`export function Button() {\n  return (\n    <button className=""..."">\n      Click me\n    </button>\n  );\n}`}</code>
                </pre>
            </div>
        )
    },
    {
        icon: <Palette className=""w-5 h-5"" />,
        title: ""Fully Customizable"",
        description: ""Tailwind-based styling that's easy to modify and extend."",
        preview: (
            <div className=""grid grid-cols-3 gap-2"">
                {[
                    ""bg-blue-500"",
                    ""bg-emerald-500"",
                    ""bg-purple-500"",
                    ""bg-amber-500"",
                    ""bg-pink-500"",
                    ""bg-cyan-500""
                ].map((color, i) => (
                    <div
                        key={i}
                        className={cn(
                            ""aspect-square rounded-lg transition-transform hover:scale-105"",
                            color
                        )}
                    />
                ))}
            </div>
        )
    },
    {
        icon: <Zap className=""w-5 h-5"" />,
        title: ""Interactive Elements"",
        description: ""Smooth animations and transitions built-in."",
        preview: (
            <div className=""flex items-center justify-center"">
                <motion.div
                    animate={{ 
                        scale: [1, 1.2, 1],
                        rotate: [0, 180, 360] 
                    }}
                    transition={{ 
                        duration: 2,
                        repeat: Infinity,
                        ease: ""easeInOut""
                    }}
                    className=""w-16 h-16 bg-linear-to-r from-indigo-500 via-purple-500 to-pink-500 rounded-2xl""
                />
            </div>
        )
    }
];

export function InteractivePreview() {
    const [activeFeature, setActiveFeature] = useState(0);

    return (
        <div className=""w-full max-w-6xl mx-auto px-4 py-16"">
            <div className=""grid grid-cols-1 lg:grid-cols-[1fr_1.5fr] gap-8"">
                <div className=""space-y-8"">
                    {FEATURES.map((feature, index) => (
                        <motion.div
                            key={index}
                            className={cn(
                                ""p-6 rounded-2xl cursor-pointer"",
                                activeFeature === index
                                    ? ""bg-zinc-100 dark:bg-zinc-800/50""
                                    : ""hover:bg-zinc-50 dark:hover:bg-zinc-800/30""
                            )}
                            onClick={() => setActiveFeature(index)}
                            whileHover={{ x: 5 }}
                            transition={{ duration: 0.2 }}
                        >
                            <div className=""flex items-start gap-4"">
                                <div className=""p-2 rounded-lg bg-zinc-200 dark:bg-zinc-700"">
                                    {feature.icon}
                                </div>
                                <div>
                                    <h3 className=""font-semibold text-lg mb-1"">
                                        {feature.title}
                                    </h3>
                                    <p className=""text-sm text-zinc-600 dark:text-zinc-400"">
                                        {feature.description}
                                    </p>
                                </div>
                            </div>
                        </motion.div>
                    ))}
                </div>

                <div className=""lg:h-[400px] p-8 rounded-3xl bg-linear-to-b from-white to-zinc-50 dark:from-zinc-900 dark:to-zinc-900/50 border border-zinc-200 dark:border-zinc-800"">
                    <motion.div
                        key={activeFeature}
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ duration: 0.3 }}
                        className=""w-full h-full""
                    >
                        {FEATURES[activeFeature].preview}
                    </motion.div>
                </div>
            </div>
        </div>
    );
}","import React, { FC, useState } from 'react';
import { motion } from ""framer-motion"";
import { Code, Palette, Zap } from ""lucide-react"";

interface Feature {
    icon: React.ReactElement;
    title: string;
    description: string;
    preview: React.ReactElement;
}

const FEATURES: Feature[] = [
    // identical to original code
]

export const InteractivePreview: FC = () => {
    const [activeFeature, setActiveFeature] = useState<number>(0);

    return (
        <div className=""w-full max-w-6xl mx-auto px-4 py-16"">
            <div className=""grid grid-cols-1 lg:grid-cols-[1fr_1.5fr] gap-8"">
                <div className=""space-y-8"">
                    {FEATURES.map((feature, index) => (
                        <motion.div
                            key={index}
                            className={`p-6 rounded-2xl cursor-pointer 
                                ${activeFeature === index
                                    ? ""bg-zinc-100 dark:bg-zinc-800/50""
                                    : ""hover:bg-zinc-50 dark:hover:bg-zinc-800/30""
                                }`}
                            onClick={() => setActiveFeature(index)}
                            whileHover={{ x: 5 }}
                            transition={{ duration: 0.2 }}
                        >
                            <div className=""flex items-start gap-4"">
                                <div className=""p-2 rounded-lg bg-zinc-200 dark:bg-zinc-700"">
                                    {feature.icon}
                                </div>
                                <div>
                                    <h3 className=""font-semibold text-lg mb-1"">
                                        {feature.title}
                                    </h3>
                                    <p className=""text-sm text-zinc-600 dark:text-zinc-400"">
                                        {feature.description}
                                    </p>
                                </div>
                            </div>
                        </motion.div>
                    ))}
                </div>

                <div className=""lg:h-[400px] p-8 rounded-3xl bg-linear-to-b from-white to-zinc-50 dark:from-zinc-900 dark:to-zinc-900/50 border border-zinc-200 dark:border-zinc-800"">
                    <motion.div
                        key={activeFeature}
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ duration: 0.3 }}
                        className=""w-full h-full""
                    >
                        {FEATURES[activeFeature].preview}
                    </motion.div>
                </div>
            </div>
        </div>
    );
};","This is a landing page component which has a selection of features that can be interactively previewed. The features are presented in a grid layout, and the preview changes based on the selected feature. The component uses framer-motion for animations, lucide-react for icons and tailwindcss for styling."
landing,component-showcase-card,"import Input_10 from ""@/components/kokonutui/input/input-10"";
import Alert04 from ""@/components/kokonutui/alert/alert-04"";
import Input_08 from ""@/components/kokonutui/input/input-08"";
import Btn12 from ""@/components/kokonutui/button/btn-12"";
import Btn13 from ""@/components/kokonutui/button/btn-13"";

interface ComponentShowcaseCardProps {
    className: string;
}

export function ComponentShowcaseCard({
    className,
}: ComponentShowcaseCardProps) {
    return (
        <div className={className}>
            <div className=""text-2xl sm:text-3xl font-bold tracking-tight bg-clip-text text-transparent bg-linear-to-r from-zinc-700 to-zinc-400 dark:from-zinc-100 dark:to-zinc-400"">
                Buttons, Inputs & More
            </div>

            <div className=""space-y-12"">
                <div className=""space-y-20 mt-8"">
                    {[
                        { component: <Input_10 />, label: ""Input 10"" },
                        { component: <Alert04 />, label: ""Alert 04"" },
                        {
                            component: (
                                <div className=""w-full flex justify-center gap-4"">
                                    <Btn13 className=""w-full"" label=""Welcome"" />
                                    <Btn12 className=""w-full"" label=""Button"" />
                                </div>
                            ),
                            label: ""Welcome"",
                        },
                    ].map((btn, index) => (
                        <div
                            key={index}
                            className=""flex flex-col items-center gap-8""
                        >
                            <div className=""h-16 flex items-center gap-8"">
                                {btn.component}
                            </div>
                        </div>
                    ))}
                </div>

                <div className=""flex flex-col items-center pt-8"">
                    <Input_08 label="""" />
                </div>
            </div>

            <p className=""text-sm text-center text-zinc-500 dark:text-zinc-400 mt-4"">
                + more available
            </p>
        </div>
    );
}","import React from 'react';
import Input_10 from ""@/components/kokonutui/input/input-10"";
import Alert04 from ""@/components/kokonutui/alert/alert-04"";
import Input_08 from ""@/components/kokonutui/input/input-08"";
import Btn12 from ""@/components/kokonutui/button/btn-12"";
import Btn13 from ""@/components/kokonutui/button/btn-13"";

interface Component {
  component: JSX.Element;
  label: string;
}

interface ComponentShowcaseCardProps {
  className: string;
}

export const ComponentShowcaseCard: React.FC<ComponentShowcaseCardProps> = ({ className }) => {
  const components: Component[] = [
    { component: <Input_10 />, label: ""Input 10"" },
    { component: <Alert04 />, label: ""Alert 04"" },
    {
      component: (
        <div className=""flex justify-center gap-4 w-full"">
          <Btn13 className=""w-full"" label=""Welcome"" />
          <Btn12 className=""w-full"" label=""Button"" />
        </div>
      ),
      label: ""Welcome"",
    },
  ];
  
  return (
    <div className={className}>
      <div className=""text-2xl sm:text-3xl font-bold tracking-tight bg-clip-text text-transparent bg-linear-to-r from-zinc-700 to-zinc-400 dark:from-zinc-100 dark:to-zinc-400"">
        Buttons, Inputs & More
      </div>

      <div className=""space-y-12"">
        <div className=""space-y-20 mt-8"">
          {components.map((btn, index) => (
            <div
              key={index}
              className=""flex flex-col items-center gap-8""
            >
              <div className=""h-16 flex items-center gap-8"">
                {btn.component}
              </div>
            </div>
          ))}
        </div>

        <div className=""flex flex-col items-center pt-8"">
          <Input_08 label="""" />
        </div>
      </div>

      <p className=""text-sm text-center text-zinc-500 dark:text-zinc-400 mt-4"">
        + more available
      </p>
    </div>
  );
}","The ComponentShowcaseCard component is a view for showcasing a list of components with buttons, inputs, and more. The component list is made more dynamic and maintainable by storing them in an array and mapping over it. Tailwind CSS classes are used for styling."
landing,feature-block,"""use client"";

import { cn } from ""@/lib/utils"";
import { motion } from ""motion/react"";
import Image from ""next/image"";
import Nextjs from ""@/components/icons/nextjs"";
import ReactIcon from ""@/components/icons/react"";
import ShadcnIcon from ""@/components/icons/shadcn"";
import { useState } from ""react"";

export default function Features() {
    const [hoveredItem, setHoveredItem] = useState<string | null>(null);

    const handleMouseEnter = (iconName: string) => {
        setHoveredItem(iconName);
    };

    const handleMouseLeave = () => {
        setHoveredItem(null);
    };

    return (
        <div className=""w-full max-w-none flex flex-col justify-start items-center z-10 mx-auto"">
            <div className=""grid grid-cols-3 md:flex md:flex-wrap items-center justify-start gap-6 md:gap-8 w-[95%] mx-auto py-4"">
                <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    whileInView={{ opacity: 1, y: 0 }}
                    viewport={{ once: true }}
                    transition={{
                        duration: 0.3,
                        delay: 0.1,
                        ease: [0.23, 1, 0.32, 1],
                    }}
                    className={cn(
                        ""text-blue-600 dark:text-blue-400 relative flex flex-col items-center gap-2""
                    )}
                    onMouseEnter={() => handleMouseEnter(""TailwindCSS"")}
                    onMouseLeave={handleMouseLeave}
                >
                    <svg
                        viewBox=""0 0 54 33""
                        className=""w-8 h-8""
                        aria-labelledby=""tailwindcss-icon-title""
                        role=""img""
                    >
                        <title id=""tailwindcss-icon-title"">TailwindCSS</title>
                        <g clipPath=""url(#prefix__clip0)"">
                            <path
                                fill=""#38bdf8""
                                fillRule=""evenodd""
                                d=""M27 0c-7.2 0-11.7 3.6-13.5 10.8 2.7-3.6 5.85-4.95 9.45-4.05 2.054.513 3.522 2.004 5.147 3.653C30.744 13.09 33.808 16.2 40.5 16.2c7.2 0 11.7-3.6 13.5-10.8-2.7 3.6-5.85 4.95-9.45 4.05-2.054-.513-3.522-2.004-5.147-3.653C36.756 3.11 33.692 0 27 0zM13.5 16.2C6.3 16.2 1.8 19.8 0 27c2.7-3.6 5.85-4.95 9.45-4.05 2.054.514 3.522 2.004 5.147 3.653C17.244 29.29 20.308 32.4 27 32.4c7.2 0 11.7-3.6 13.5-10.8-2.7 3.6-5.85 4.95-9.45 4.05-2.054-.513-3.522-2.004-5.147-3.653C23.256 19.31 20.192 16.2 13.5 16.2z""
                                clipRule=""evenodd""
                            />
                        </g>
                    </svg>
                    <motion.span
                        animate={{
                            scale: hoveredItem === ""TailwindCSS"" ? 1.1 : 1,
                            fontWeight:
                                hoveredItem === ""TailwindCSS"" ? 500 : 400,
                        }}
                        className=""text-xs text-center mt-1 whitespace-nowrap text-black dark:text-white""
                    >
                        TailwindCSS
                    </motion.span>
                </motion.div>

                <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    whileInView={{ opacity: 1, y: 0 }}
                    viewport={{ once: true }}
                    transition={{
                        duration: 0.3,
                        delay: 0.4,
                        ease: [0.23, 1, 0.32, 1],
                    }}
                    className={cn(
                        ""text-yellow-500 dark:text-[#F5EA1E] relative flex flex-col items-center gap-2""
                    )}
                    onMouseEnter={() => handleMouseEnter(""Motion"")}
                    onMouseLeave={handleMouseLeave}
                >
                    <Image
                        src=""/motion.png""
                        alt=""Motion""
                        className=""rounded-full""
                        width={32}
                        height={32}
                    />
                    <motion.span
                        animate={{
                            scale: hoveredItem === ""Motion"" ? 1.1 : 1,
                            fontWeight: hoveredItem === ""Motion"" ? 500 : 400,
                        }}
                        className=""text-xs text-center mt-1 whitespace-nowrap text-black dark:text-white""
                    >
                        Motion
                    </motion.span>
                </motion.div>

                <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    whileInView={{ opacity: 1, y: 0 }}
                    viewport={{ once: true }}
                    transition={{
                        duration: 0.3,
                        delay: 0.5,
                        ease: [0.23, 1, 0.32, 1],
                    }}
                    className={cn(
                        ""text-black dark:text-white flex flex-col items-center gap-2 relative""
                    )}
                    onMouseEnter={() => handleMouseEnter(""Shadcn UI"")}
                    onMouseLeave={handleMouseLeave}
                >
                    <ShadcnIcon
                        className=""w-8 h-8 text-black dark:text-white""
                        aria-label=""Shadcn/ui""
                    />
                    <motion.span
                        animate={{
                            scale: hoveredItem === ""Shadcn UI"" ? 1.1 : 1,
                            fontWeight: hoveredItem === ""Shadcn UI"" ? 500 : 400,
                        }}
                        className=""text-xs text-center mt-1 whitespace-nowrap""
                    >
                        shadcn/ui
                    </motion.span>
                </motion.div>

                <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    whileInView={{ opacity: 1, y: 0 }}
                    viewport={{ once: true }}
                    transition={{
                        duration: 0.3,
                        delay: 0.6,
                        ease: [0.23, 1, 0.32, 1],
                    }}
                    className={cn(
                        ""text-black dark:text-white flex flex-col items-center gap-2 relative col-span-1 col-start-1 md:col-auto""
                    )}
                    onMouseEnter={() => handleMouseEnter(""Next.js"")}
                    onMouseLeave={handleMouseLeave}
                >
                    <Nextjs className=""w-8 h-8"" aria-label=""Next.js"" />
                    <motion.span
                        animate={{
                            scale: hoveredItem === ""Next.js"" ? 1.1 : 1,
                            fontWeight: hoveredItem === ""Next.js"" ? 500 : 400,
                        }}
                        className=""text-xs text-center mt-1 whitespace-nowrap""
                    >
                        Next.js
                    </motion.span>
                </motion.div>
                <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    whileInView={{ opacity: 1, y: 0 }}
                    viewport={{ once: true }}
                    transition={{
                        duration: 0.3,
                        delay: 0.7,
                        ease: [0.23, 1, 0.32, 1],
                    }}
                    className={cn(
                        ""text-black dark:text-white flex flex-col items-center gap-2 relative col-span-1 col-start-3 md:col-auto""
                    )}
                    onMouseEnter={() => handleMouseEnter(""React"")}
                    onMouseLeave={handleMouseLeave}
                >
                    <ReactIcon className=""w-8 h-8"" aria-label=""React"" />
                    <motion.span
                        animate={{
                            scale: hoveredItem === ""React"" ? 1.1 : 1,
                            fontWeight: hoveredItem === ""React"" ? 500 : 400,
                        }}
                        className=""text-xs text-center mt-1 whitespace-nowrap""
                    >
                        React
                    </motion.span>
                </motion.div>
            </div>
        </div>
    );
}","// client
import { useState } from 'react';
import { motion } from ""motion/react"";
import Image from ""next/image"";
import Nextjs from ""@/components/icons/nextjs"";
import ReactIcon from ""@/components/icons/react"";
import ShadcnIcon from ""@/components/icons/shadcn"";

const Features: React.FC = () => {
    const [hoveredItem, setHoveredItem] = useState<string | null>(null);

    const handleMouseEnter = (iconName: string) => {
        setHoveredItem(iconName);
    };

    const handleMouseLeave = (): void => {
        setHoveredItem(null);
    };

    return (
        <div className=""w-full max-w-none flex flex-col justify-start items-center z-10 mx-auto"">
            <div className=""grid grid-cols-3 md:flex md:flex-wrap items-center justify-start gap-6 md:gap-8 w-[95%] mx-auto py-4"">
                <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    whileHover={{ scale: 1.1, fontWeight: 500 }}
                    exit={{ opacity: 0, y: 20 }}
                    transition={{ duration: 0.3, delay: 0.1, ease: [0.23, 1, 0.32, 1] }}
                    className=""text-blue-600 dark:text-blue-400 relative flex flex-col items-center gap-2""
                    onMouseEnter={() => handleMouseEnter(""TailwindCSS"")}
                    onMouseLeave={handleMouseLeave}
                >
                    {/* TailwindCSS SVG icon */}
                    <motion.span
                        className=""text-xs text-center mt-1 whitespace-nowrap text-black dark:text-white""
                    >
                        TailwindCSS
                    </motion.span>
                </motion.div>

                {/* Similar blocks for Motion, Shadcn UI, Next.js, React... */}
            </div>
        </div>
    );
}

export default Features;",No description generated
ui,alert,"import { cva, type VariantProps } from ""class-variance-authority"";

import { cn } from ""@/lib/utils"";

const alertVariants = cva(
    ""relative w-full rounded-lg border border-zinc-200 px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current dark:border-zinc-800"",
    {
        variants: {
            variant: {
                default:
                    ""bg-white text-zinc-950 dark:bg-zinc-950 dark:text-zinc-50"",
                destructive:
                    ""text-red-500 bg-white [&>svg]:text-current *:data-[slot=alert-description]:text-red-500/90 dark:text-red-900 dark:bg-zinc-950 dark:*:data-[slot=alert-description]:text-red-900/90"",
            },
        },
        defaultVariants: {
            variant: ""default"",
        },
    }
);

function Alert({
    className,
    variant,
    ...props
}: React.ComponentProps<""div""> & VariantProps<typeof alertVariants>) {
    return (
        <div
            data-slot=""alert""
            role=""alert""
            className={cn(alertVariants({ variant }), className)}
            {...props}
        />
    );
}

function AlertTitle({ className, ...props }: React.ComponentProps<""div"">) {
    return (
        <div
            data-slot=""alert-title""
            className={cn(
                ""col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight"",
                className
            )}
            {...props}
        />
    );
}

function AlertDescription({
    className,
    ...props
}: React.ComponentProps<""div"">) {
    return (
        <div
            data-slot=""alert-description""
            className={cn(
                ""text-zinc-500 col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed dark:text-zinc-400"",
                className
            )}
            {...props}
        />
    );
}

export { Alert, AlertTitle, AlertDescription };","import React, { FC, HTMLAttributes } from ""react"";

type Variant = ""default"" | ""destructive"";

interface AlertProps extends HTMLAttributes<HTMLDivElement> {
    variant?: Variant;
}

const Alert: FC<AlertProps> = ({ variant = ""default"", className, ...props }) => {
    const baseStyles =
        ""relative w-full rounded-lg border px-4 py-3 text-sm grid gap-y-0.5 items-start"";
    const variantStyles = {
        default: ""bg-white text-zinc-950 border-zinc-200"",
        destructive:
            ""text-red-500 bg-white border-red-500 dark:text-red-900 dark:bg-zinc-950"",
    };

    return (
        <div
            data-slot=""alert""
            role=""alert""
            className={`${baseStyles} ${variantStyles[variant]} ${className}`}
            {...props}
        />
    );
};

interface AlertTitleProps extends HTMLAttributes<HTMLDivElement> {}

const AlertTitle: FC<AlertTitleProps> = ({ className, ...props }) => {
    return (
        <div
            data-slot=""alert-title""
            className={`col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight ${className}`}
            {...props}
        />
    );
};

interface AlertDescriptionProps extends HTMLAttributes<HTMLDivElement> {}

const AlertDescription: FC<AlertDescriptionProps> = ({ className, ...props }) => {
    return (
        <div
            data-slot=""alert-description""
            className={`text-zinc-500 col-start-2 grid justify-items-start gap-1 text-sm leading-relaxed dark:text-zinc-400 ${className}`}
            {...props}
        />
    );
};

export { Alert, AlertTitle, AlertDescription };","FC<AlertDescriptionProps> = ({ className, ...props }) => {"
ui,tooltip,"""use client""

import * as React from ""react""
import * as TooltipPrimitive from ""@radix-ui/react-tooltip""

import { cn } from ""@/lib/utils""

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      ""z-50 overflow-hidden rounded-md border border-zinc-200 bg-white px-3 py-1.5 text-sm text-zinc-950 shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 dark:border-zinc-800 dark:bg-zinc-950 dark:text-zinc-50"",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }","import React, { ComponentPropsWithoutRef, ForwardedRef } from 'react';
import { Root, Trigger, Content, Provider } from '@radix-ui/react-tooltip';

type TooltipProps = ComponentPropsWithoutRef<typeof Content>;

const TooltipContent = React.forwardRef<HTMLDivElement, TooltipProps>(({ className, sideOffset = 4, ...props }, ref: ForwardedRef<HTMLDivElement>) => {
  return (
    <Content
      ref={ref}
      sideOffset={sideOffset}
      className={`${className} z-50 overflow-hidden rounded-md border border-zinc-200 bg-white px-3 py-1.5 text-sm text-zinc-950 shadow-md animate-in fade-in-0 zoom-in-95 data-state=closed:animate-out data-state=closed:fade-out-0 data-state=closed:zoom-out-95 data-side=bottom:slide-in-from-top-2 data-side=left:slide-in-from-right-2 data-side=right:slide-in-from-left-2 data-side=top:slide-in-from-bottom-2 dark:border-zinc-800 dark:bg-zinc-950 dark:text-zinc-50`}
      {...props}
    />
  );
});

TooltipContent.displayName = 'TooltipContent';

export { Root as Tooltip, Trigger as TooltipTrigger, TooltipContent, Provider as TooltipProvider };","This component provides a tooltip using the Radix UI library, styled with Tailwind CSS classes. The tooltip can be used by wrapping the target element with the `Tooltip` and `TooltipTrigger` components, and placing the `TooltipContent` component inside the `Tooltip` component."
ui,accordion,"""use client""

import * as React from ""react""
import * as AccordionPrimitive from ""@radix-ui/react-accordion""
import { ChevronDown } from ""lucide-react""

import { cn } from ""@/lib/utils""

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn(""border-b"", className)}
    {...props}
  />
))
AccordionItem.displayName = ""AccordionItem""

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className=""flex"">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        ""flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180"",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className=""h-4 w-4 shrink-0 transition-transform duration-200"" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className=""overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down""
    {...props}
  >
    <div className={cn(""pb-4 pt-0"", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }","import React, { ComponentPropsWithoutRef, ElementRef, ForwardedRef, ReactNode } from 'react';
import { Root as AccordionPrimitive, Item, Trigger, Header, Content } from '@radix-ui/react-accordion';
import { ChevronDown } from 'lucide-react';

interface AccordionItemProps extends ComponentPropsWithoutRef<typeof Item> {
  className?: string;
}

const AccordionItem = React.forwardRef<ElementRef<typeof Item>, AccordionItemProps>(({ className, ...props }, ref: ForwardedRef<ElementRef<typeof Item>>) => (
  <Item
    ref={ref}
    className={`border-b ${className}`}
    {...props}
  />
));
AccordionItem.displayName = ""AccordionItem"";

interface AccordionTriggerProps extends ComponentPropsWithoutRef<typeof Trigger> {
  className?: string;
  children: ReactNode;
}

const AccordionTrigger = React.forwardRef<ElementRef<typeof Trigger>, AccordionTriggerProps>(({ className, children, ...props }, ref: ForwardedRef<ElementRef<typeof Trigger>>) => (
  <Header className=""flex"">
    <Trigger
      ref={ref}
      className={`flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline ${className}`}
      {...props}
    >
      {children}
      <ChevronDown className=""h-4 w-4 shrink-0 transition-transform duration-200"" />
    </Trigger>
  </Header>
));
AccordionTrigger.displayName = Trigger.displayName;

interface AccordionContentProps extends ComponentPropsWithoutRef<typeof Content> {
  className?: string;
  children: ReactNode;
}

const AccordionContent = React.forwardRef<ElementRef<typeof Content>, AccordionContentProps>(({ className, children, ...props }, ref: ForwardedRef<ElementRef<typeof Content>>) => (
  <Content
    ref={ref}
    className={`overflow-hidden text-sm transition-all ${className}`}
    {...props}
  >
    <div className={`pb-4 pt-0 ${className}`}>{children}</div>
  </Content>
));
AccordionContent.displayName = Content.displayName;

export { AccordionPrimitive as Accordion, AccordionItem, AccordionTrigger, AccordionContent };","The accordion component allows users to expand and collapse content that is broken into logical sections, much like tabs. It is commonly used to reduce scrolling and consolidate information."
ui,tabs,"""use client""

import * as React from ""react""
import * as TabsPrimitive from ""@radix-ui/react-tabs""

import { cn } from ""@/lib/utils""

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      ""inline-flex h-10 items-center justify-center rounded-md bg-zinc-100 p-1 text-zinc-500 dark:bg-zinc-800 dark:text-zinc-400"",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      ""inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-white transition-all focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-zinc-950 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-white data-[state=active]:text-zinc-950 data-[state=active]:shadow-xs dark:ring-offset-zinc-950 dark:focus-visible:ring-zinc-300 dark:data-[state=active]:bg-zinc-950 dark:data-[state=active]:text-zinc-50"",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      ""mt-2 ring-offset-white focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-zinc-950 focus-visible:ring-offset-2 dark:ring-offset-zinc-950 dark:focus-visible:ring-zinc-300"",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }","import React, { ComponentPropsWithoutRef, ElementRef, ForwardedRef } from ""react"";
import { Root, List, Trigger, Content } from ""@radix-ui/react-tabs"";

type TabsProps = ComponentPropsWithoutRef<typeof Root>;

export const Tabs: React.FC<TabsProps> = (props) => (
  <Root {...props} />
);

const TabsList: React.ForwardRefRenderFunction<ElementRef<typeof List>, ComponentPropsWithoutRef<typeof List>> = ({ className, ...props }, ref: ForwardedRef<ElementRef<typeof List>>) => (
  <List
    ref={ref}
    className={`inline-flex h-10 items-center justify-center rounded-md bg-gray-200 p-1 text-gray-500 dark:bg-gray-800 dark:text-gray-400 ${className}`}
    {...props}
  />
);
TabsList.displayName = List.displayName;

const TabsTrigger: React.ForwardRefRenderFunction<ElementRef<typeof Trigger>, ComponentPropsWithoutRef<typeof Trigger>> = ({ className, ...props }, ref: ForwardedRef<ElementRef<typeof Trigger>>) => (
  <Trigger
    ref={ref}
    className={`inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-2 transition-all focus-visible:ring-2 focus-visible:ring-gray-900 disabled:pointer-events-none disabled:opacity-50 ${className}`}
    {...props}
  />
);
TabsTrigger.displayName = Trigger.displayName;

const TabsContent: React.ForwardRefRenderFunction<ElementRef<typeof Content>, ComponentPropsWithoutRef<typeof Content>> = ({ className, ...props }, ref: ForwardedRef<ElementRef<typeof Content>>) => (
  <Content
    ref={ref}
    className={`mt-2 ring-offset-2 focus-visible:ring-2 focus-visible:ring-gray-900 dark:ring-offset-gray-900 dark:focus-visible:ring-gray-300 ${className}`}
    {...props}
  />
);
TabsContent.displayName = Content.displayName;

export { TabsList, TabsTrigger, TabsContent };","This component is a set of customizable and responsive tabs, each with its unique trigger and content. It follows the best practices of Tailwind CSS and provides dark theme support."
ui,browse-button,"""use client"";

import { Link } from ""next-view-transitions"";
import { Button } from ""./button"";
import { cn } from ""@/lib/utils"";
import { motion } from ""motion/react"";
import { ArrowDownRight, ArrowRight } from ""lucide-react"";

export function BrowseComponentsButton() {
    return (
        <Link
            href=""/docs/components/action-search-bar""
            className=""flex items-center gap-8""
        >
            <motion.div
                initial={{ x: 200, opacity: 0 }}
                animate={{ x: 0, opacity: 1, transition: { duration: 0.2 } }}
                whileHover={{ x: 5, transition: { duration: 0.2 } }}
            >
                <Button
                    className={cn(
                        ""relative inline-flex items-center justify-center gap-4 rounded-xl font-medium"",
                        ""relative h-12 px-6 min-w-72 md:min-w-56"",
                        ""bg-black dark:bg-white "",
                        ""text-white dark:text-black"",
                        ""border-2 border-orange-500/20 dark:border-orange-400/20"",
                        ""shadow-[0_8px_16px_-6px_rgba(251,113,133,0.3)]"",
                        ""dark:shadow-[0_8px_16px_-6px_rgba(251,113,133,0.2)]"",
                        ""shadow-[0_15px_30px_-6px_rgba(251,113,133,0.4),0_0px_30px_-6px_rgba(168,85,247,0.4)]"",
                        ""dark:shadow-[0_15px_30px_-6px_rgba(251,113,133,0.3),0_0px_30px_-6px_rgba(168,85,247,0.3)]"",
                        ""backdrop-blur-xs""
                    )}
                >
                    <span className=""font-medium"">Browse Components</span>
                    {/* <CompassOutline className=""w-8 h-8"" /> */}
                    <ArrowDownRight className=""w-5 h-5 rotate-[270deg]"" />
                </Button>
            </motion.div>
        </Link>
    );
}","import React from ""react"";
import { motion } from ""motion/react"";
import { ArrowDownRight } from ""lucide-react"";
import Link from ""next/link"";

const BrowseComponentsButton: React.FC = () => {
    return (
        <Link href=""/docs/components/action-search-bar"">
            <a className=""flex items-center gap-2"">
                <motion.div
                    initial={{ x: 200, opacity: 0 }}
                    animate={{ x: 0, opacity: 1, transition: { duration: 0.2 } }}
                    whileHover={{ x: 5, transition: { duration: 0.2 } }}
                    className=""relative inline-flex items-center justify-center gap-2 rounded-xl font-medium h-12 px-6 min-w-72 md:min-w-56 bg-black dark:bg-white text-white dark:text-black border-2 border-orange-500 dark:border-orange-400 shadow-lg dark:shadow-lg backdrop-blur""
                >
                    <span className=""font-medium"">Browse Components</span>
                    <ArrowDownRight className=""w-5 h-5 transform rotate-270"" />
                </motion.div>
            </a>
        </Link>
    );
}

export default BrowseComponentsButton;",This component renders a button that navigates to the components action search bar page when clicked. The button has a motion effect and contains an arrow icon.
ui,separator,"""use client""

import * as React from ""react""
import * as SeparatorPrimitive from ""@radix-ui/react-separator""

import { cn } from ""@/lib/utils""

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = ""horizontal"", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        ""shrink-0 bg-zinc-200 dark:bg-zinc-800"",
        orientation === ""horizontal"" ? ""h-[1px] w-full"" : ""h-full w-[1px]"",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }","import React, { ComponentPropsWithoutRef, ForwardedRef } from 'react';
import { Root as SeparatorPrimitive } from '@radix-ui/react-separator';
import clsx from 'clsx';

export interface SeparatorProps extends ComponentPropsWithoutRef<typeof SeparatorPrimitive> {
  className?: string;
  orientation?: 'horizontal' | 'vertical';
  decorative?: boolean;
}

const Separator = React.forwardRef((
  { className, orientation = 'horizontal', decorative = true, ...props }: SeparatorProps,
  ref: ForwardedRef<React.ElementRef<typeof SeparatorPrimitive>>
) => (
  <SeparatorPrimitive
    ref={ref}
    decorative={decorative}
    orientation={orientation}
    className={clsx(
      'shrink-0 bg-gray-200 dark:bg-gray-800',
      orientation === 'horizontal' ? 'h-px w-full' : 'w-px h-full',
      className
    )}
    {...props}
  />
));

Separator.displayName = 'Separator';

export { Separator };","A reusable separator component styled with Tailwind CSS, and typed with TypeScript. It accepts an orientation prop to specify the direction of the separator line, and a decorative prop to specify whether it's purely decorative."
ui,progress,"""use client""

import * as React from ""react""
import * as ProgressPrimitive from ""@radix-ui/react-progress""

import { cn } from ""@/lib/utils""

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      ""relative h-4 w-full overflow-hidden rounded-full bg-zinc-100 dark:bg-zinc-800"",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className=""h-full w-full flex-1 bg-zinc-900 transition-all dark:bg-zinc-50""
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }","import React, { FC, forwardRef, Ref } from ""react"";
import { Root, Indicator } from ""@radix-ui/react-progress"";

type ProgressProps = {
  className?: string;
  value?: number;
};

const Progress: FC<ProgressProps> = forwardRef(({ className, value, ...props }: ProgressProps, ref: Ref<any>) => (
  <Root
    ref={ref}
    className={`relative h-4 w-full overflow-hidden rounded-full bg-zinc-100 dark:bg-zinc-800 ${className}`}
    {...props}
  >
    <Indicator
      className=""h-full w-full flex-1 bg-zinc-900 transition-all dark:bg-zinc-50""
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </Root>
))

Progress.displayName = Root.displayName;

export default Progress;",This component is a progress bar that changes width based on the value prop. It includes custom styles for light and dark themes using Tailwind CSS.
ui,avatar,"""use client""

import * as React from ""react""
import * as AvatarPrimitive from ""@radix-ui/react-avatar""

import { cn } from ""@/lib/utils""

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      ""relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full"",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn(""aspect-square h-full w-full"", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      ""flex h-full w-full items-center justify-center rounded-full bg-zinc-100 dark:bg-zinc-800"",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }","import React, { FC, ForwardedRef } from 'react';
import * as AvatarPrimitive from '@radix-ui/react-avatar';

const Avatar: FC<React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>> = React.forwardRef((
  { className, ...props },
  ref: ForwardedRef<React.ElementRef<typeof AvatarPrimitive.Root>>
) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={`relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full ${className}`}
    {...props}
  />
));

Avatar.displayName = AvatarPrimitive.Root.displayName;

const AvatarImage: FC<React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>> = React.forwardRef((
  { className, ...props },
  ref: ForwardedRef<React.ElementRef<typeof AvatarPrimitive.Image>>
) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={`aspect-square h-full w-full ${className}`}
    {...props}
  />
));

AvatarImage.displayName = AvatarPrimitive.Image.displayName;

const AvatarFallback: FC<React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>> = React.forwardRef((
  { className, ...props },
  ref: ForwardedRef<React.ElementRef<typeof AvatarPrimitive.Fallback>>
) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={`flex h-full w-full items-center justify-center rounded-full bg-zinc-100 dark:bg-zinc-800 ${className}`}
    {...props}
  />
));

AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;

export { Avatar, AvatarImage, AvatarFallback };","This is a set of avatar components, including a main avatar, an image avatar, and a fallback avatar, each styled with Tailwind CSS classes."
ui,input,"import * as React from ""react""

import { cn } from ""@/lib/utils""

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          ""flex h-10 w-full rounded-md border border-zinc-200 bg-white px-3 py-2 text-base ring-offset-white file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-zinc-950 placeholder:text-zinc-500 focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-zinc-950 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm dark:border-zinc-800 dark:bg-zinc-950 dark:ring-offset-zinc-950 dark:file:text-zinc-50 dark:placeholder:text-zinc-400 dark:focus-visible:ring-zinc-300"",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = ""Input""

export { Input }","import React, { InputHTMLAttributes, ForwardedRef } from ""react"";
import 'tailwindcss/tailwind.css';

export interface InputProps extends InputHTMLAttributes<HTMLInputElement> {
  className?: string;
  type?: string;
}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }: InputProps, ref: ForwardedRef<HTMLInputElement>) => {
    return (
      <input
        type={type}
        className={`${className} flex h-10 w-full rounded-md border border-zinc-200 bg-white px-3 py-2 text-base ring-offset-white file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-zinc-950 placeholder:text-zinc-500 focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-zinc-950 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm dark:border-zinc-800 dark:bg-zinc-950 dark:ring-offset-zinc-950 dark:file:text-zinc-50 dark:placeholder:text-zinc-400 dark:focus-visible:ring-zinc-300`}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = ""Input""

export { Input }","A customizable, styled Input component with Tailwind CSS utility classes for style and React's forwardRef for ref forwarding."
ui,skeleton,"import { cn } from ""@/lib/utils""

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn(""animate-pulse rounded-md bg-zinc-100 dark:bg-zinc-800"", className)}
      {...props}
    />
  )
}

export { Skeleton }","import React from 'react';

interface SkeletonProps extends React.HTMLAttributes<HTMLDivElement> {
  className?: string;
}

const Skeleton: React.FC<SkeletonProps> = ({ className, ...props }) => {
  return (
    <div
      className={`animate-pulse rounded-md bg-zinc-100 dark:bg-zinc-800 ${className}`}
      {...props}
    />
  );
}

export { Skeleton };",This is a reusable skeleton component used for loading states with customizable classes.
ui,dropdown-menu,"""use client""

import * as React from ""react""
import * as DropdownMenuPrimitive from ""@radix-ui/react-dropdown-menu""
import { Check, ChevronRight, Circle } from ""lucide-react""

import { cn } from ""@/lib/utils""

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      ""flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-zinc-100 data-[state=open]:bg-zinc-100 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 dark:focus:bg-zinc-800 dark:data-[state=open]:bg-zinc-800"",
      inset && ""pl-8"",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className=""ml-auto"" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      ""z-50 min-w-[8rem] overflow-hidden rounded-md border border-zinc-200 bg-white p-1 text-zinc-950 shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 dark:border-zinc-800 dark:bg-zinc-950 dark:text-zinc-50"",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        ""z-50 min-w-[8rem] overflow-hidden rounded-md border border-zinc-200 bg-white p-1 text-zinc-950 shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 dark:border-zinc-800 dark:bg-zinc-950 dark:text-zinc-50"",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      ""relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-zinc-100 focus:text-zinc-900 data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 dark:focus:bg-zinc-800 dark:focus:text-zinc-50"",
      inset && ""pl-8"",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      ""relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-zinc-100 focus:text-zinc-900 data-[disabled]:pointer-events-none data-[disabled]:opacity-50 dark:focus:bg-zinc-800 dark:focus:text-zinc-50"",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className=""absolute left-2 flex h-3.5 w-3.5 items-center justify-center"">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className=""h-4 w-4"" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      ""relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-zinc-100 focus:text-zinc-900 data-[disabled]:pointer-events-none data-[disabled]:opacity-50 dark:focus:bg-zinc-800 dark:focus:text-zinc-50"",
      className
    )}
    {...props}
  >
    <span className=""absolute left-2 flex h-3.5 w-3.5 items-center justify-center"">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className=""h-2 w-2 fill-current"" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      ""px-2 py-1.5 text-sm font-semibold"",
      inset && ""pl-8"",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn(""-mx-1 my-1 h-px bg-zinc-100 dark:bg-zinc-800"", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(""ml-auto text-xs tracking-widest opacity-60"", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = ""DropdownMenuShortcut""

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}","import * as React from ""react""
import { Check, ChevronRight, Circle } from ""lucide-react""
import { Root, Trigger, Group, Portal, Sub, 
  RadioGroup, SubTrigger, SubContent, Content, 
  Item, CheckboxItem, RadioItem, Label, Separator } 
  from ""@radix-ui/react-dropdown-menu""

interface IDropdownMenuSubTrigger extends React.ComponentPropsWithoutRef<typeof SubTrigger> {
  inset?: boolean
}

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof SubTrigger>,
  IDropdownMenuSubTrigger
>(({ className, inset, children, ...props }, ref) => (
  <SubTrigger
    ref={ref}
    className={`flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-gray-200 ${inset ? 'pl-8' : ""} ${className}`}
    {...props}
  >
    {children}
    <ChevronRight className=""ml-auto"" />
  </SubTrigger>
))

interface IDropdownMenuSubContent extends React.ComponentPropsWithoutRef<typeof SubContent> {}

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof SubContent>,
  IDropdownMenuSubContent
>(({ className, ...props }, ref) => (
  <SubContent
    ref={ref}
    className={`min-w-32 overflow-hidden rounded-md border border-gray-200 bg-white p-1 text-gray-900 shadow-lg ${className}`}
    {...props}
  />
))

interface IDropdownMenuContent extends React.ComponentPropsWithoutRef<typeof Content> {
  sideOffset?: number
}

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof Content>,
  IDropdownMenuContent
>(({ className, sideOffset = 4, ...props }, ref) => (
  <Portal>
    <Content
      ref={ref}
      sideOffset={sideOffset}
      className={`min-w-32 overflow-hidden rounded-md border border-gray-200 bg-white p-1 text-gray-900 shadow-md ${className}`}
      {...props}
    />
  </Portal>
))

interface IDropdownMenuItem extends React.ComponentPropsWithoutRef<typeof Item> {
  inset?: boolean
}

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof Item>,
  IDropdownMenuItem
>(({ className, inset, ...props }, ref) => (
  <Item
    ref={ref}
    className={`relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-gray-200 focus:text-gray-900 ${inset ? 'pl-8' : ""} ${className}`}
    {...props}
  />
))

interface IDropdownMenuCheckboxItem extends React.ComponentPropsWithoutRef<typeof CheckboxItem> {}

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof CheckboxItem>,
  IDropdownMenuCheckboxItem
>(({ className, children, checked, ...props }, ref) => (
  <CheckboxItem
    ref={ref}
    className={`relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-gray-200 focus:text-gray-900 ${className}`}
    checked={checked}
    {...props}
  >
    <span className=""absolute left-2 flex h-3.5 w-3.5 items-center justify-center"">
      <ItemIndicator>
        <Check className=""h-4 w-4"" />
      </ItemIndicator>
    </span>
    {children}
  </CheckboxItem>
))

interface IDropdownMenuRadioItem extends React.ComponentPropsWithoutRef<typeof RadioItem> {}

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof RadioItem>,
  IDropdownMenuRadioItem
>(({ className, children, ...props }, ref) => (
  <RadioItem
    ref={ref}
    className={`relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-gray-200 focus:text-gray-900 ${className}`}
    {...props}
  >
    <span className=""absolute left-2 flex h-3.5 w-3.5 items-center justify-center"">
      <ItemIndicator>
        <Circle className=""h-2 w-2 fill-current"" />
      </ItemIndicator>
    </span>
    {children}
  </RadioItem>
))

interface IDropdownMenuLabel extends React.ComponentPropsWithoutRef<typeof Label> {
  inset?: boolean
}

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof Label>,
  IDropdownMenuLabel
>(({ className, inset, ...props }, ref) => (
  <Label
    ref={ref}
    className={`px-2 py-1.5 text-sm font-semibold ${inset ? 'pl-8' : ""} ${className}`}
    {...props}
  />
))

interface IDropdownMenuSeparator extends React.ComponentPropsWithoutRef<typeof Separator> {}

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  IDropdownMenuSeparator
>(({ className, ...props }, ref) => (
  <Separator
    ref={ref}
    className={`my-1 h-px bg-gray-200 ${className}`}
    {...props}
  />
))

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={`ml-auto text-xs tracking-widest opacity-60 ${className}`}
      {...props}
    />
  )
}

export {
  Root as DropdownMenu,
  Trigger as DropdownMenuTrigger,
  Content as DropdownMenuContent,
  Item as DropdownMenuItem,
  CheckboxItem as DropdownMenuCheckboxItem,
  RadioItem as DropdownMenuRadioItem,
  Label as DropdownMenuLabel,
  Separator as DropdownMenuSeparator,
  DropdownMenuShortcut,
  Group as DropdownMenuGroup,
  Portal as DropdownMenuPortal,
  Sub as DropdownMenuSub,
  SubContent as DropdownMenuSubContent,
  SubTrigger as DropdownMenuSubTrigger,
  RadioGroup as DropdownMenuRadioGroup,
}","A set of dropdown menu components with various functionalities, created using radix-ui and styled with Tailwind CSS."
ui,select,"""use client""

import * as React from ""react""
import * as SelectPrimitive from ""@radix-ui/react-select""
import { Check, ChevronDown, ChevronUp } from ""lucide-react""

import { cn } from ""@/lib/utils""

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      ""flex h-10 w-full items-center justify-between rounded-md border border-zinc-200 bg-white px-3 py-2 text-sm ring-offset-white placeholder:text-zinc-500 focus:outline-hidden focus:ring-2 focus:ring-zinc-950 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1 dark:border-zinc-800 dark:bg-zinc-950 dark:ring-offset-zinc-950 dark:placeholder:text-zinc-400 dark:focus:ring-zinc-300"",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className=""h-4 w-4 opacity-50"" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      ""flex cursor-default items-center justify-center py-1"",
      className
    )}
    {...props}
  >
    <ChevronUp className=""h-4 w-4"" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      ""flex cursor-default items-center justify-center py-1"",
      className
    )}
    {...props}
  >
    <ChevronDown className=""h-4 w-4"" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = ""popper"", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        ""relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border border-zinc-200 bg-white text-zinc-950 shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 dark:border-zinc-800 dark:bg-zinc-950 dark:text-zinc-50"",
        position === ""popper"" &&
          ""data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1"",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          ""p-1"",
          position === ""popper"" &&
            ""h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]""
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn(""py-1.5 pl-8 pr-2 text-sm font-semibold"", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      ""relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-hidden focus:bg-zinc-100 focus:text-zinc-900 data-disabled:pointer-events-none data-disabled:opacity-50 dark:focus:bg-zinc-800 dark:focus:text-zinc-50"",
      className
    )}
    {...props}
  >
    <span className=""absolute left-2 flex h-3.5 w-3.5 items-center justify-center"">
      <SelectPrimitive.ItemIndicator>
        <Check className=""h-4 w-4"" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn(""-mx-1 my-1 h-px bg-zinc-100 dark:bg-zinc-800"", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}","import React, { ComponentPropsWithoutRef, ElementRef, ForwardedRef } from ""react"";
import { Root, Group, Value, Trigger, Icon, ScrollUpButton, ScrollDownButton, Content, Viewport, Label, Item, ItemIndicator, ItemText, Separator } from ""@radix-ui/react-select"";
import { Check, ChevronDown, ChevronUp } from ""lucide-react"";

type ForwardRefComponent<T> = React.ForwardRefRenderFunction<ElementRef<T>, ComponentPropsWithoutRef<T>>;

const SelectTrigger: ForwardRefComponent<typeof Trigger> = ({ className, children, ...props }, ref) => (
  <Trigger
    ref={ref}
    className={`flex h-10 w-full items-center justify-between rounded-md border border-zinc-200 bg-white px-3 py-2 text-sm ring-offset-white placeholder:text-zinc-500 focus:outline-none focus:ring-2 focus:ring-zinc-950 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 dark:border-zinc-800 dark:bg-zinc-950 dark:ring-offset-zinc-950 dark:placeholder:text-zinc-400 dark:focus:ring-zinc-300 ${className}`}
    {...props}
  >
    {children}
    <Icon asChild>
      <ChevronDown className=""h-4 w-4 opacity-50"" />
    </Icon>
  </Trigger>
);
SelectTrigger.displayName = ""SelectTrigger"";

const SelectScrollUpButton: ForwardRefComponent<typeof ScrollUpButton> = ({ className, ...props }, ref) => (
  <ScrollUpButton
    ref={ref}
    className={`flex cursor-default items-center justify-center py-1 ${className}`}
    {...props}
  >
    <ChevronUp className=""h-4 w-4"" />
  </ScrollUpButton>
);
SelectScrollUpButton.displayName = ""SelectScrollUpButton"";

const SelectScrollDownButton: ForwardRefComponent<typeof ScrollDownButton> = ({ className, ...props }, ref) => (
  <ScrollDownButton
    ref={ref}
    className={`flex cursor-default items-center justify-center py-1 ${className}`}
    {...props}
  >
    <ChevronDown className=""h-4 w-4"" />
  </ScrollDownButton>
);
SelectScrollDownButton.displayName = ""SelectScrollDownButton"";

const SelectContent: ForwardRefComponent<typeof Content> = ({ className, children, position = ""popper"", ...props }, ref) => (
  <Content
    ref={ref}
    className={`relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border border-zinc-200 bg-white text-zinc-950 shadow-md dark:border-zinc-800 dark:bg-zinc-950 dark:text-zinc-50 ${className}`}
    position={position}
    {...props}
  >
    <SelectScrollUpButton />
    <Viewport
      className={`p-1 ${position === ""popper"" && ""h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]""}`}
    >
      {children}
    </Viewport>
    <SelectScrollDownButton />
  </Content>
);
SelectContent.displayName = ""SelectContent"";

const SelectLabel: ForwardRefComponent<typeof Label> = ({ className, ...props }, ref) => (
  <Label
    ref={ref}
    className={`py-1.5 pl-8 pr-2 text-sm font-semibold ${className}`}
    {...props}
  />
);
SelectLabel.displayName = ""SelectLabel"";

const SelectItem: ForwardRefComponent<typeof Item> = ({ className, children, ...props }, ref) => (
  <Item
    ref={ref}
    className={`relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-zinc-100 focus:text-zinc-900 dark:focus:bg-zinc-800 dark:focus:text-zinc-50 ${className}`}
    {...props}
  >
    <span className=""absolute left-2 flex h-3.5 w-3.5 items-center justify-center"">
      <ItemIndicator>
        <Check className=""h-4 w-4"" />
      </ItemIndicator>
    </span>
    <ItemText>{children}</ItemText>
  </Item>
);
SelectItem.displayName = ""SelectItem"";

const SelectSeparator: ForwardRefComponent<typeof Separator> = ({ className, ...props }, ref) => (
  <Separator
    ref={ref}
    className={`-mx-1 my-1 h-px bg-zinc-100 dark:bg-zinc-800 ${className}`}
    {...props}
  />
);
SelectSeparator.displayName = ""SelectSeparator"";

export {
  Root as Select,
  Group as SelectGroup,
  Value as SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
};","This is a custom selection component using Radix UI primitives. It is styled with Tailwind CSS and has support for dark and light themes. It includes a trigger, content area, labels, items, separators, scroll up and scroll down buttons."
ui,slider,"""use client""

import * as React from ""react""
import * as SliderPrimitive from ""@radix-ui/react-slider""

import { cn } from ""@/lib/utils""

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      ""relative flex w-full touch-none select-none items-center"",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className=""relative h-2 w-full grow overflow-hidden rounded-full bg-zinc-100 dark:bg-zinc-800"">
      <SliderPrimitive.Range className=""absolute h-full bg-zinc-900 dark:bg-zinc-50"" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className=""block h-5 w-5 rounded-full border-2 border-zinc-900 bg-white ring-offset-white transition-colors focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-zinc-950 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 dark:border-zinc-50 dark:bg-zinc-950 dark:ring-offset-zinc-950 dark:focus-visible:ring-zinc-300"" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }","import React, { ComponentPropsWithoutRef, ForwardedRef } from ""react"";
import { Root, Track, Range, Thumb } from ""@radix-ui/react-slider"";
import clsx from 'clsx';

type RootElement = React.ElementRef<typeof Root>;
type SliderProps = ComponentPropsWithoutRef<typeof Root>;

const Slider = React.forwardRef<RootElement, SliderProps>(
  ({ className, ...props }: SliderProps, ref: ForwardedRef<RootElement>) => (
    <Root
      ref={ref}
      className={clsx(
        ""relative flex w-full cursor-pointer select-none items-center"",
        className
      )}
      {...props}
    >
      <Track className=""relative h-2 w-full overflow-hidden rounded-full bg-gray-200 dark:bg-gray-800"">
        <Range className=""absolute h-full bg-gray-900 dark:bg-gray-50"" />
      </Track>
      <Thumb className=""block h-5 w-5 rounded-full border-2 border-gray-900 bg-white ring-offset-white transition-colors focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 dark:border-gray-50 dark:bg-gray-900 dark:ring-offset-gray-900 dark:focus:ring-gray-300"" />
    </Root>
  )
);

Slider.displayName = Root.displayName;

export { Slider };","This is a reusable Slider component built with Radix UI primitives, styled with Tailwind CSS, and typed with TypeScript."
ui,card,"import * as React from ""react""

import { cn } from ""@/lib/utils""

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      ""rounded-lg border border-zinc-200 bg-white text-zinc-950 shadow-xs dark:border-zinc-800 dark:bg-zinc-950 dark:text-zinc-50"",
      className
    )}
    {...props}
  />
))
Card.displayName = ""Card""

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(""flex flex-col space-y-1.5 p-6"", className)}
    {...props}
  />
))
CardHeader.displayName = ""CardHeader""

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      ""text-2xl font-semibold leading-none tracking-tight"",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = ""CardTitle""

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(""text-sm text-zinc-500 dark:text-zinc-400"", className)}
    {...props}
  />
))
CardDescription.displayName = ""CardDescription""

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn(""p-6 pt-0"", className)} {...props} />
))
CardContent.displayName = ""CardContent""

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(""flex items-center p-6 pt-0"", className)}
    {...props}
  />
))
CardFooter.displayName = ""CardFooter""

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }","import React, { HTMLAttributes, forwardRef } from ""react"";

type Props = HTMLAttributes<HTMLDivElement>;

const Card = forwardRef<HTMLDivElement, Props>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={`rounded-lg border border-gray-200 bg-white text-gray-900 shadow-xs dark:border-gray-800 dark:bg-gray-900 dark:text-white ${className}`}
    {...props}
  />
));
Card.displayName = ""Card"";

const CardHeader = forwardRef<HTMLDivElement, Props>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={`flex flex-col space-y-1.5 p-6 ${className}`}
    {...props}
  />
));
CardHeader.displayName = ""CardHeader"";

const CardTitle = forwardRef<HTMLDivElement, Props>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={`text-2xl font-semibold leading-none tracking-tight ${className}`}
    {...props}
  />
));
CardTitle.displayName = ""CardTitle"";

const CardDescription = forwardRef<HTMLDivElement, Props>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={`text-sm text-gray-500 dark:text-gray-400 ${className}`}
    {...props}
  />
));
CardDescription.displayName = ""CardDescription"";

const CardContent = forwardRef<HTMLDivElement, Props>(({ className, ...props }, ref) => (
  <div ref={ref} className={`p-6 pt-0 ${className}`} {...props} />
));
CardContent.displayName = ""CardContent"";

const CardFooter = forwardRef<HTMLDivElement, Props>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={`flex items-center p-6 pt-0 ${className}`}
    {...props}
  />
));
CardFooter.displayName = ""CardFooter"";

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent };","This is a set of card-related components - Card, CardHeader, CardFooter, CardTitle, CardDescription, and CardContent - with added Tailwind CSS classes and strict TypeScript typings. Each component accepts HTML div attributes and a ref."
ui,dialog,"""use client""

import * as React from ""react""
import * as DialogPrimitive from ""@radix-ui/react-dialog""
import { X } from ""lucide-react""

import { cn } from ""@/lib/utils""

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      ""fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0"",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        ""fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border border-zinc-200 bg-white p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg dark:border-zinc-800 dark:bg-zinc-950"",
        className
      )}
      {...props}
    >
      {children}
      {/* <DialogPrimitive.Close className=""absolute right-4 top-4 rounded-sm opacity-70 ring-offset-white transition-opacity hover:opacity-100 focus:outline-hidden focus:ring-2 focus:ring-zinc-950 focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-zinc-100 data-[state=open]:text-zinc-500 dark:ring-offset-zinc-950 dark:focus:ring-zinc-300 dark:data-[state=open]:bg-zinc-800 dark:data-[state=open]:text-zinc-400"">
        <X className=""h-4 w-4"" />
        <span className=""sr-only"">Close</span>
      </DialogPrimitive.Close> */}
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      ""flex flex-col space-y-1.5 text-center sm:text-left"",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = ""DialogHeader""

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      ""flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2"",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = ""DialogFooter""

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      ""text-lg font-semibold leading-none tracking-tight"",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn(""text-sm text-zinc-500 dark:text-zinc-400"", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}","import * as React from ""react""
import * as DialogPrimitive from ""@radix-ui/react-dialog""
import { X } from ""lucide-react""
import clsx from ""clsx""

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

interface OverlayProps extends React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay> {
  className?: string;
}

const DialogOverlay = React.forwardRef<React.ElementRef<typeof DialogPrimitive.Overlay>, OverlayProps>(
  ({ className, ...props }, ref) => (
    <DialogPrimitive.Overlay
      ref={ref}
      className={clsx(
        ""fixed inset-0 z-50 bg-black bg-opacity-80 transition-all"",
        className
      )}
      {...props}
    />
  )
)

DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

interface ContentProps extends React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content> {
  className?: string;
  children?: React.ReactNode;
}

const DialogContent = React.forwardRef<React.ElementRef<typeof DialogPrimitive.Content>, ContentProps>(
  ({ className, children, ...props }, ref) => (
    <DialogPortal>
      <DialogOverlay />
      <DialogPrimitive.Content
        ref={ref}
        className={clsx(
          ""fixed left-1/2 top-1/2 z-50 grid w-full max-w-lg transform -translate-x-1/2 -translate-y-1/2 gap-4 border border-zinc-200 bg-white p-6 shadow-lg transition-all dark:border-zinc-800 dark:bg-zinc-950"",
          className
        )}
        {...props}
      >
        {children}
      </DialogPrimitive.Content>
    </DialogPortal>
  )
)

DialogContent.displayName = DialogPrimitive.Content.displayName

interface HeaderFooterProps extends React.HTMLAttributes<HTMLDivElement> {
  className?: string;
}

const DialogHeader = ({ className, ...props }: HeaderFooterProps) => (
  <div className={clsx(""flex flex-col space-y-1.5 text-center sm:text-left"", className)} {...props} />
)

DialogHeader.displayName = ""DialogHeader""

const DialogFooter = ({ className, ...props }: HeaderFooterProps) => (
  <div className={clsx(""flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2"", className)} {...props} />
)

DialogFooter.displayName = ""DialogFooter""

interface TitleDescriptionProps extends React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title> {
  className?: string;
}

const DialogTitle = React.forwardRef<React.ElementRef<typeof DialogPrimitive.Title>, TitleDescriptionProps>(
  ({ className, ...props }, ref) => (
    <DialogPrimitive.Title ref={ref} className={clsx(""text-lg font-semibold leading-none tracking-tight"", className)} {...props} />
  )
)

DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<React.ElementRef<typeof DialogPrimitive.Description>, TitleDescriptionProps>(
  ({ className, ...props }, ref) => (
    <DialogPrimitive.Description ref={ref} className={clsx(""text-sm text-zinc-500 dark:text-zinc-400"", className)} {...props} />
  )
)

DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}","This component is a customizable dialog with primitives from the Radix UI library. It includes overlay, content, header, footer, title, and description components. The dialog also has the ability to be closed and triggered. The layout and transitions are styled using Tailwind CSS."
ui,textarea,"import * as React from ""react"";

import { cn } from ""@/lib/utils"";

export interface TextareaProps
    extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
    ({ className, ...props }, ref) => {
        return (
            <textarea
                className={cn(
                    ""flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"",
                    className
                )}
                ref={ref}
                {...props}
            />
        );
    }
);
Textarea.displayName = ""Textarea"";

export { Textarea };","import * as React from ""react"";

type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement> & {
    className?: string;
}

const Textarea: React.ForwardRefRenderFunction<HTMLTextAreaElement, TextareaProps> = (
    { className, ...props },
    ref
) => {
    return (
        <textarea
            className={`${className} flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50`}
            ref={ref}
            {...props}
        />
    );
}

export const TextareaForwarded = React.forwardRef(Textarea);
TextareaForwarded.displayName = ""TextareaForwarded"";

export { TextareaForwarded as Textarea };",A flexible textarea component styled with Tailwind CSS.
ui,label,"""use client""

import * as React from ""react""
import * as LabelPrimitive from ""@radix-ui/react-label""
import { cva, type VariantProps } from ""class-variance-authority""

import { cn } from ""@/lib/utils""

const labelVariants = cva(
  ""text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70""
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }","import React, { ForwardedRef } from 'react'
import { Root as LabelPrimitiveRoot } from ""@radix-ui/react-label""
import { VariantProps } from ""class-variance-authority""

const labelVariants = ""text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"";

type LabelProps = React.ComponentPropsWithoutRef<typeof LabelPrimitiveRoot> & VariantProps<typeof labelVariants>

const Label = React.forwardRef<LabelProps, typeof LabelPrimitiveRoot>(
  ({ className, ...props }: LabelProps, ref: ForwardedRef<LabelProps>) => {
    return (
      <LabelPrimitiveRoot
        ref={ref}
        className={`${labelVariants} ${className}`}
        {...props}
      />
    );
  }
)

Label.displayName = LabelPrimitiveRoot.displayName;

export default Label;",This is a Label component that supports variants and leverages radix-ui's Label primitive. It is styled using Tailwind CSS classes.
ui,sheet,"""use client""

import * as React from ""react""
import * as SheetPrimitive from ""@radix-ui/react-dialog""
import { cva, type VariantProps } from ""class-variance-authority""
import { X } from ""lucide-react""

import { cn } from ""@/lib/utils""

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      ""fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0"",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  ""fixed z-50 gap-4 bg-white p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500 dark:bg-zinc-950"",
  {
    variants: {
      side: {
        top: ""inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top"",
        bottom:
          ""inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom"",
        left: ""inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm"",
        right:
          ""inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm"",
      },
    },
    defaultVariants: {
      side: ""right"",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = ""right"", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className=""absolute right-4 top-4 rounded-sm opacity-70 ring-offset-white transition-opacity hover:opacity-100 focus:outline-hidden focus:ring-2 focus:ring-zinc-950 focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-zinc-100 dark:ring-offset-zinc-950 dark:focus:ring-zinc-300 dark:data-[state=open]:bg-zinc-800"">
        <X className=""h-4 w-4"" />
        <span className=""sr-only"">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      ""flex flex-col space-y-2 text-center sm:text-left"",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = ""SheetHeader""

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      ""flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2"",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = ""SheetFooter""

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn(""text-lg font-semibold text-zinc-950 dark:text-zinc-50"", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn(""text-sm text-zinc-500 dark:text-zinc-400"", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}","import React, { FC, ComponentPropsWithoutRef, ElementRef, HTMLAttributes } from ""react"";
import { DialogOverlay, DialogClose, DialogContent, DialogTitle, DialogDescription } from ""@radix-ui/react-dialog"";
import { X } from ""lucide-react"";
import clsx from ""clsx"";

interface SheetContentProps extends ComponentPropsWithoutRef<typeof DialogContent> {
  side?: ""top"" | ""bottom"" | ""left"" | ""right"";
}

const SheetContent: FC<SheetContentProps> = ({ side = ""right"", className, children, ...props }) => (
  <DialogOverlay className=""fixed inset-0 z-50 bg-black bg-opacity-80 transition-all duration-500"">
    <DialogContent
      className={clsx(
        ""fixed z-50 gap-4 bg-white p-6 shadow-lg transition ease-in-out dark:bg-gray-700"",
        {
          ""inset-x-0 top-0 border-b"": side === ""top"",
          ""inset-x-0 bottom-0 border-t"": side === ""bottom"",
          ""inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm"": side === ""left"",
          ""inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm"": side === ""right"",
        },
        className
      )}
      {...props}
    >
      {children}
      <DialogClose className=""absolute right-4 top-4 rounded-sm opacity-70 ring-offset-white transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-gray-500 disabled:cursor-not-allowed"">
        <X className=""h-4 w-4"" />
        <span className=""sr-only"">Close</span>
      </DialogClose>
    </DialogContent>
  </DialogOverlay>
);

const SheetHeader: FC<HTMLAttributes<HTMLDivElement>> = ({ className, ...props }) => (
  <div className={clsx(""flex flex-col space-y-2 text-center sm:text-left"", className)} {...props} />
);

const SheetFooter: FC<HTMLAttributes<HTMLDivElement>> = ({ className, ...props }) => (
  <div className={clsx(""flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2"", className)} {...props} />
);

const SheetTitle: FC<ComponentPropsWithoutRef<typeof DialogTitle>> = ({ className, ...props }) => (
  <DialogTitle className={clsx(""text-lg font-semibold text-gray-700 dark:text-white"", className)} {...props} />
);

const SheetDescription: FC<ComponentPropsWithoutRef<typeof DialogDescription>> = ({ className, ...props }) => (
  <DialogDescription className={clsx(""text-sm text-gray-500 dark:text-gray-400"", className)} {...props} />
);

export { SheetContent, SheetHeader, SheetFooter, SheetTitle, SheetDescription };","FC<ComponentPropsWithoutRef<typeof DialogDescription>> = ({ className, ...props }) => ("
ui,aurora-gradient-background,"import * as React from ""react""
import { cva, type VariantProps } from ""class-variance-authority""

import { cn } from ""@/lib/utils""

const badgeVariants = cva(
  ""inline-flex items-center rounded-full border border-zinc-200 px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-hidden focus:ring-2 focus:ring-zinc-950 focus:ring-offset-2 dark:border-zinc-800 dark:focus:ring-zinc-300"",
  {
    variants: {
      variant: {
        default:
          ""border-transparent bg-zinc-900 text-zinc-50 hover:bg-zinc-900/80 dark:bg-zinc-50 dark:text-zinc-900 dark:hover:bg-zinc-50/80"",
        secondary:
          ""border-transparent bg-zinc-100 text-zinc-900 hover:bg-zinc-100/80 dark:bg-zinc-800 dark:text-zinc-50 dark:hover:bg-zinc-800/80"",
        destructive:
          ""border-transparent bg-red-500 text-zinc-50 hover:bg-red-500/80 dark:bg-red-900 dark:text-zinc-50 dark:hover:bg-red-900/80"",
        outline: ""text-zinc-950 dark:text-zinc-50"",
      },
    },
    defaultVariants: {
      variant: ""default"",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }","import React, { HTMLAttributes } from ""react"";

type Variant = 'default' | 'secondary' | 'destructive' | 'outline';

interface BadgeProps extends HTMLAttributes<HTMLDivElement> {
  variant?: Variant;
}

const baseStyle = ""inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-all focus:outline-none focus:ring-2 dark:border-zinc-800 dark:focus:ring-zinc-300"";
const variantStyles: Record<Variant, string> = {
  default: ""border-zinc-200 bg-zinc-900 text-zinc-50 hover:bg-zinc-900/80 dark:bg-zinc-50 dark:text-zinc-900 dark:hover:bg-zinc-50/80"",
  secondary: ""border-zinc-200 bg-zinc-100 text-zinc-900 hover:bg-zinc-100/80 dark:bg-zinc-800 dark:text-zinc-50 dark:hover:bg-zinc-800/80"",
  destructive: ""border-zinc-200 bg-red-500 text-zinc-50 hover:bg-red-500/80 dark:bg-red-900 dark:text-zinc-50 dark:hover:bg-red-900/80"",
  outline: ""border-zinc-200 text-zinc-950 dark:text-zinc-50"",
}

const Badge: React.FC<BadgeProps> = ({ className, variant = 'default', ...props }) => {
  return (
    <div className={`${baseStyle} ${variantStyles[variant]} ${className}`} {...props} />
  );
}

export default Badge;",No description generated
ui,badge,"""use client""

import * as React from ""react""
import * as PopoverPrimitive from ""@radix-ui/react-popover""

import { cn } from ""@/lib/utils""

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = ""center"", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        ""z-50 w-72 rounded-md border border-zinc-200 bg-white p-4 text-zinc-950 shadow-md outline-hidden data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 dark:border-zinc-800 dark:bg-zinc-950 dark:text-zinc-50"",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }","import React, { ComponentPropsWithoutRef, forwardRef, ElementRef } from ""react"";
import { Root, Trigger, Content, Portal } from ""@radix-ui/react-popover"";

type ContentProps = ComponentPropsWithoutRef<typeof Content> & {
  align?: string;
  sideOffset?: number;
};

const PopoverContent: React.FC<ContentProps> = forwardRef<ElementRef<typeof Content>, ContentProps>(({ className, align = ""center"", sideOffset = 4, ...props }, ref) => (
  <Portal>
    <Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={`z-50 w-72 rounded-md border border-gray-200 bg-white p-4 text-gray-800 shadow-md outline-hidden transition-transform duration-200 ease-in-out ${className}`}
      {...props}
    />
  </Portal>
));

PopoverContent.displayName = Content.displayName;

export const Popover = Root;
export const PopoverTrigger = Trigger;
export const PopoverContent = PopoverContent;",This is a customizable Badge component styled with Tailwind CSS. It supports different variants and applies appropriate styles based on the provided variant prop. It ensures clear and maintainable code with TypeScript strict typing.
ui,popover,"import * as React from ""react"";
import { Slot } from ""@radix-ui/react-slot"";
import { cva, type VariantProps } from ""class-variance-authority"";

import { cn } from ""@/lib/utils"";

const buttonVariants = cva(
    ""inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-white transition-colors focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-zinc-950 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 dark:ring-offset-zinc-950 dark:focus-visible:ring-zinc-300 cursor-pointer"",
    {
        variants: {
            variant: {
                default:
                    ""bg-zinc-900 text-zinc-50 hover:bg-zinc-900/90 dark:bg-zinc-50 dark:text-zinc-900 dark:hover:bg-zinc-50/90"",
                destructive:
                    ""bg-red-500 text-zinc-50 hover:bg-red-500/90 dark:bg-red-900 dark:text-zinc-50 dark:hover:bg-red-900/90"",
                outline:
                    ""border border-zinc-200 bg-white hover:bg-zinc-100 hover:text-zinc-900 dark:border-zinc-800 dark:bg-zinc-950 dark:hover:bg-zinc-800 dark:hover:text-zinc-50"",
                secondary:
                    ""bg-zinc-100 text-zinc-900 hover:bg-zinc-100/80 dark:bg-zinc-800 dark:text-zinc-50 dark:hover:bg-zinc-800/80"",
                ghost: ""hover:bg-zinc-100 hover:text-zinc-900 dark:hover:bg-zinc-800 dark:hover:text-zinc-50"",
                link: ""text-zinc-900 underline-offset-4 hover:underline dark:text-zinc-50"",
            },
            size: {
                default: ""h-10 px-4 py-2"",
                sm: ""h-9 rounded-md px-3"",
                lg: ""h-11 rounded-md px-8"",
                icon: ""h-10 w-10"",
            },
        },
        defaultVariants: {
            variant: ""default"",
            size: ""default"",
        },
    }
);

export interface ButtonProps
    extends React.ButtonHTMLAttributes<HTMLButtonElement>,
        VariantProps<typeof buttonVariants> {
    asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
    ({ className, variant, size, asChild = false, ...props }, ref) => {
        const Comp = asChild ? Slot : ""button"";
        return (
            <Comp
                className={cn(buttonVariants({ variant, size, className }))}
                ref={ref}
                {...props}
            />
        );
    }
);
Button.displayName = ""Button"";

export { Button, buttonVariants };","import React, { ButtonHTMLAttributes, ForwardedRef } from ""react"";

type ButtonVariants = ""default"" | ""destructive"" | ""outline"" | ""secondary"" | ""ghost"" | ""link"";
type ButtonSizes = ""default"" | ""sm"" | ""lg"" | ""icon"";

interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {
  asChild?: boolean;
  variant?: ButtonVariants;
  size?: ButtonSizes;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ variant = ""default"", size = ""default"", asChild = false, ...props }, ref: ForwardedRef<HTMLButtonElement>) => {

    const baseStyles = ""inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-white transition-colors focus:outline-none focus-visible:ring-2 disabled:opacity-50 cursor-pointer"";
    const sizeStyles = size === ""sm"" ? ""h-9 rounded-md px-3"" : size === ""lg"" ? ""h-11 rounded-md px-8"" : size === ""icon"" ? ""h-10 w-10"" : ""h-10 px-4 py-2"";

    let variantStyles = """";

    switch(variant) {
      case ""destructive"":
        variantStyles = ""bg-red-500 text-white hover:bg-red-500/90 dark:bg-red-900 dark:text-white dark:hover:bg-red-900/90"";
        break;
      case ""outline"":
        variantStyles = ""border border-gray-200 bg-white hover:bg-gray-100 hover:text-black dark:border-gray-800 dark:bg-gray-950 dark:hover:bg-gray-800 dark:hover:text-white"";
        break;
      case ""secondary"":
        variantStyles = ""bg-gray-100 text-black hover:bg-gray-100/80 dark:bg-gray-800 dark:text-white dark:hover:bg-gray-800/80"";
        break;
      case ""ghost"":
        variantStyles = ""hover:bg-gray-100 hover:text-black dark:hover:bg-gray-800 dark:hover:text-white"";
        break;
      case ""link"":
        variantStyles = ""text-black underline hover:underline dark:text-white"";
        break;
      default:
        variantStyles = ""bg-gray-900 text-white hover:bg-gray-900/90 dark:bg-white dark:text-black dark:hover:bg-white/90"";
    }

    const Comp = asChild ? ""span"" : ""button"";

    const className = `${baseStyles} ${variantStyles} ${sizeStyles}`;

    return <Comp className={className} ref={ref} {...props} />;
  }
);
Button.displayName = ""Button"";

export default Button;","A Popover component with its trigger and content components using radix-ui/react-popover. Styled with Tailwind CSS with animations, and refactored to TypeScript. The content of the popover is customizable through props."
ui,button,"""use client"";

import { Link } from ""next-view-transitions"";
import { Button } from ""./button"";
import { cn } from ""@/lib/utils"";
import { motion } from ""motion/react"";
import { ArrowDownRight, ArrowRight, BlocksIcon } from ""lucide-react"";

/**
 *
 *
 */
export function BrowseBlocksButton() {
    return (
        <Link
            id=""browse-blocks-button""
            href=""https://kokonutui.pro/templates""
            className=""flex items-center gap-8""
        >
            <motion.div
                initial={{ x: 200, opacity: 0 }}
                animate={{ x: 0, opacity: 1, transition: { duration: 0.2 } }}
                whileHover={{ x: 5, transition: { duration: 0.2 } }}
                className=""relative""
            >
                <Button
                    className={cn(
                        ""relative inline-flex items-center justify-center gap-4 rounded-xl font-medium"",
                        ""relative h-12 px-6 min-w-72 md:min-w-56"",
                        ""bg-white dark:bg-black"",
                        ""text-black dark:text-white"",
                        ""border-2 border-black/20 dark:border-white/20"",
                        ""hover:bg-black/5 dark:hover:bg-white/10"",
                        ""backdrop-blur-xs"",
                        ""shadow-md hover:shadow-lg transition-all duration-200""
                    )}
                >
                    <span className=""font-medium flex items-center gap-2"">
                        Go to Templates
                    </span>
                    <ArrowRight className=""w-5 h-5"" />
                </Button>
            </motion.div>
        </Link>
    );
}","import { FC } from 'react';
import Link from 'next/link';
import { motion } from 'framer-motion';
import { ArrowRight } from 'react-feather';

const BrowseBlocksButton: FC = () => (
    <Link href=""https://kokonutui.pro/templates"">
        <a id=""browse-blocks-button"" className=""flex items-center gap-2"">
            <motion.div
                initial={{ x: 200, opacity: 0 }}
                animate={{ x: 0, opacity: 1, transition: { duration: 0.2 } }}
                whileHover={{ x: 5, transition: { duration: 0.2 } }}
                className=""relative""
            >
                <button
                    className=""relative inline-flex items-center justify-center gap-2 rounded-xl 
                     font-medium h-12 px-6 min-w-18 md:min-w-14 bg-white dark:bg-black text-black 
                     dark:text-white border-2 border-black/20 dark:border-white/20 hover:bg-black/5 
                     dark:hover:bg-white/10 backdrop-blur-xs shadow-md hover:shadow-lg transition-all 
                     duration-200""
                >
                    <span className=""font-medium flex items-center gap-2"">
                        Go to Templates
                    </span>
                    <ArrowRight className=""w-5 h-5"" />
                </button>
            </motion.div>
        </a>
    </Link>
);

export default BrowseBlocksButton;","A flexible button component with multiple variants and sizes, fully styled with Tailwind CSS. It supports all properties of a normal HTML button and some additional properties for customization. It can be rendered as a child element in a parent component or standalone."
ui,browse-blocks,"""use client""

import * as React from ""react""
import * as ScrollAreaPrimitive from ""@radix-ui/react-scroll-area""

import { cn } from ""@/lib/utils""

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn(""relative overflow-hidden"", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className=""h-full w-full rounded-[inherit]"">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = ""vertical"", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      ""flex touch-none select-none transition-colors"",
      orientation === ""vertical"" &&
        ""h-full w-2.5 border-l border-l-transparent p-[1px]"",
      orientation === ""horizontal"" &&
        ""h-2.5 flex-col border-t border-t-transparent p-[1px]"",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className=""relative flex-1 rounded-full bg-zinc-200 dark:bg-zinc-800"" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }","import React, { ComponentPropsWithoutRef, ElementRef, FC, forwardRef } from 'react';
import { ScrollAreaCorner, ScrollAreaRoot, ScrollAreaScrollbar, ScrollAreaThumb, ScrollAreaViewport } from '@radix-ui/react-scroll-area';
import clsx from 'clsx';

type ScrollAreaProps = ComponentPropsWithoutRef<typeof ScrollAreaRoot>;
type ScrollBarProps = ComponentPropsWithoutRef<typeof ScrollAreaScrollbar>;

const ScrollArea: FC<ScrollAreaProps> = forwardRef<ElementRef<typeof ScrollAreaRoot>, ScrollAreaProps>(({ className, children, ...props }, ref) => (
  <ScrollAreaRoot 
    ref={ref} 
    className={clsx('relative overflow-hidden', className)} 
    {...props}
  >
    <ScrollAreaViewport className='h-full w-full rounded-inherit'>
      {children}
    </ScrollAreaViewport>
    <ScrollBar />
    <ScrollAreaCorner />
  </ScrollAreaRoot>
));
ScrollArea.displayName = ScrollAreaRoot.displayName;

const ScrollBar: FC<ScrollBarProps> = forwardRef<ElementRef<typeof ScrollAreaScrollbar>, ScrollBarProps>(({ className, orientation = 'vertical', ...props }, ref) => (
  <ScrollAreaScrollbar 
    ref={ref} 
    orientation={orientation} 
    className={clsx(
      'flex touch-none select-none transition-colors', 
      orientation === 'vertical' ? 'h-full w-2.5 border-l border-transparent px-1' : 'h-2.5 flex-col border-t border-transparent py-1', 
      className
    )}
    {...props}
  >
    <ScrollAreaThumb className='relative flex-1 rounded-full bg-zinc-200 dark:bg-zinc-800' />
  </ScrollAreaScrollbar>
));
ScrollBar.displayName = ScrollAreaScrollbar.displayName;

export { ScrollArea, ScrollBar }",This is a button component that navigates to a webpage of templates. The button animates in from the right on initial render and slightly moves to the right when hovered. It uses a mix of light and dark theme styles.
ui,scroll-area,"""use client"";

import * as React from ""react"";
import { RefreshCw } from ""lucide-react"";

interface RefreshButtonProps {
    onRefresh: () => void;
}

export function RefreshButton({ onRefresh }: RefreshButtonProps) {
    return (
        <button
            type=""button""
            onClick={onRefresh}
            className=""group absolute top-24 right-2 p-2 rounded-lg text-white dark:text-black hover:bg-zinc-800 dark:hover:bg-zinc-100 transition-colors z-10 flex items-center gap-2 bg-black dark:bg-white h-7 px-3""
            aria-label=""Refresh preview""
        >
            <RefreshCw
                className=""transition-transform group-hover:rotate-180 duration-300""
                size={16}
            />
            <span className=""text-sm font-medium"">Refresh</span>
        </button>
    );
}","import * as React from ""react"";
import { RefreshCw } from ""lucide-react"";

interface RefreshButtonProps {
    onRefresh: () => void;
}

const RefreshButton: React.FC<RefreshButtonProps> = ({ onRefresh }) => {
    return (
        <button
            type=""button""
            onClick={onRefresh}
            className=""group absolute top-24 right-2 p-2 rounded-lg text-white dark:text-black hover:bg-zinc-800 dark:hover:bg-zinc-100 transition-colors z-10 flex items-center gap-2 bg-black dark:bg-white h-7 px-3""
            aria-label=""Refresh preview""
        >
            <RefreshCw
                className=""transition-transform group-hover:rotate-180 duration-300""
                size={16}
            />
            <span className=""text-sm font-medium"">Refresh</span>
        </button>
    );
}

export default RefreshButton;","These are two components, ScrollArea and ScrollBar, which are wrappers around the ScrollArea components from the @radix-ui/react-scroll-area library. They are used to create a scrollable area with a custom styled scrollbar. The ScrollArea component includes the viewport for the content, while the ScrollBar component includes the actual scroll bar."
ui,sidebar,"import { cn } from ""@/lib/utils"";
import PreviewContent from ""./preview-content"";

interface PreviewProps {
    children: React.ReactNode;
    className?: string;
    isPremium?: boolean;
    link: string;
    useIframe?: boolean;
    height?: string;
    compact?: boolean;
    comment?: string[];
    isBlock?: boolean;
}

const prePath = process.env.VERCEL_PROJECT_PRODUCTION_URL
    ? `https://${process.env.VERCEL_PROJECT_PRODUCTION_URL}`
    : ""http://localhost:3000"";

export function Preview({
    children,
    className = """",
    link,
    useIframe = false,
    compact = false,
    comment = [],
    isBlock = false,
}: PreviewProps) {
    // console.log(prePath + link);
    return (
        <>
            <div className={cn(""w-full overflow-hidden"", className)}>
                <PreviewContent
                    link={link}
                    prePath={prePath}
                    isBlock={isBlock}
                />

                {useIframe ? (
                    <div className=""w-full my-4 border rounded-2xl border-zinc-400 dark:border-zinc-700"">
                        <div className=""relative w-full h-[100dvh] overflow-hidden"">
                            <iframe
                                title={link}
                                src={`${prePath}/preview/${link}`}
                                className=""w-full h-full overflow-y-auto list-none""
                                style={{
                                    border: ""none"",
                                    transform: ""scale(0.95)"",
                                }}
                            />
                        </div>
                    </div>
                ) : (
                    <div
                        className={cn(
                            ""p-2 md:p-8 flex justify-center items-center relative border rounded-2xl my-4 border-zinc-400 dark:border-zinc-800 not-prose"",
                            compact ? ""min-h-[100px]"" : ""min-h-[400px]"",
                            isBlock ? ""md:p-0"" : """"
                        )}
                    >
                        {children}
                    </div>
                )}
                {comment.length > 0 && (
                    <div className=""flex flex-wrap gap-3 mt-6"">
                        {comment.map((text, index) => (
                            <div
                                key={index}
                                className=""px-4 py-2 text-sm font-medium bg-purple-100 dark:bg-purple-950/30 rounded-lg text-purple-700 dark:text-purple-300 border border-purple-200 dark:border-purple-800/50 shadow-xs hover:bg-purple-200/70 dark:hover:bg-purple-950/50 transition-colors""
                            >
                                {text}
                            </div>
                        ))}
                    </div>
                )}
            </div>
        </>
    );
}","import { FC } from ""react"";
import { PreviewContent } from ""./preview-content"";

interface PreviewProps {
    children: React.ReactNode;
    className?: string;
    link: string;
    useIframe?: boolean;
    height?: string;
    compact?: boolean;
    comment?: string[];
    isBlock?: boolean;
}

const prePath = process.env.VERCEL_PROJECT_PRODUCTION_URL
    ? `https://${process.env.VERCEL_PROJECT_PRODUCTION_URL}`
    : ""http://localhost:3000"";

export const Preview: FC<PreviewProps> = ({
    children,
    className = """",
    link,
    useIframe = false,
    compact = false,
    comment = [],
    isBlock = false,
}) => {
    return (
        <div className={`w-full overflow-hidden ${className}`}>
            <PreviewContent link={link} prePath={prePath} isBlock={isBlock} />

            {useIframe ? (
                <div className=""w-full my-4 border rounded-2xl border-zinc-400 dark:border-zinc-700"">
                    <div className=""relative w-full h-[100dvh] overflow-hidden"">
                        <iframe
                            title={link}
                            src={`${prePath}/preview/${link}`}
                            className=""w-full h-full overflow-y-auto list-none""
                            style={{
                                border: ""none"",
                                transform: ""scale(0.95)"",
                            }}
                        />
                    </div>
                </div>
            ) : (
                <div
                    className={`p-2 md:p-8 flex justify-center items-center relative border rounded-2xl my-4 border-zinc-400 dark:border-zinc-800 not-prose ${compact ? ""min-h-[100px]"" : ""min-h-[400px]""} ${isBlock ? ""md:p-0"" : """"
                    }`}
                >
                    {children}
                </div>
            )}
            {comment.length > 0 && (
                <div className=""flex flex-wrap gap-3 mt-6"">
                    {comment.map((text, index) => (
                        <div
                            key={index}
                            className=""px-4 py-2 text-sm font-medium bg-purple-100 dark:bg-purple-950/30 rounded-lg text-purple-700 dark:text-purple-300 border border-purple-200 dark:border-purple-800/50 shadow-xs hover:bg-purple-200/70 dark:hover:bg-purple-950/50 transition-colors""
                        >
                            {text}
                        </div>
                    ))}
                </div>
            )}
        </div>
    );
}",No description generated
mdx,refresh-button,"""use client"";

import * as React from ""react"";
import { Preview } from ""./preview"";
import { RefreshButton } from ""./refresh-button"";

interface PreviewClientProps {
    children: React.ReactNode;
    className?: string;
    isPremium?: boolean;
    link: string;
    useIframe?: boolean;
    height?: string;
    compact?: boolean;
    comment?: string[];
}

export function PreviewClient(props: PreviewClientProps) {
    const [key, setKey] = React.useState(0);

    const handleRefresh = () => {
        setKey((prev) => prev + 1);
    };

    return (
        <div className=""relative"">
            <RefreshButton onRefresh={handleRefresh} />
            <div key={key}>
                <Preview {...props} />
            </div>
        </div>
    );
}","import React, { useState, FC } from ""react"";
import { Preview } from ""./preview"";
import { RefreshButton } from ""./refresh-button"";

interface PreviewClientProps {
    children: React.ReactNode;
    className?: string;
    isPremium?: boolean;
    link: string;
    useIframe?: boolean;
    height?: string;
    compact?: boolean;
    comment?: string[];
}

export const PreviewClient: FC<PreviewClientProps> = (props) => {
    const [key, setKey] = useState<number>(0);

    const handleRefresh = (): void => {
        setKey((prev: number) => prev + 1);
    };

    return (
        <div className=""relative"">
            <RefreshButton onRefresh={handleRefresh} />
            <div key={key} className=""overflow-auto h-full"">
                <Preview {...props} className=""w-full h-full"" />
            </div>
        </div>
    );
}","This is a RefreshButton component that takes an onRefresh function as a prop. It uses Tailwind CSS for styling and it has a dark mode. When the button is clicked, the RefreshCw icon spins 180 degrees and the onRefresh function is called."
mdx,preview,"""use client"";

import {
    useActionState,
    useEffect,
    useState,
    useTransition,
    useRef,
    type RefObject,
} from ""react"";
import { Button } from ""@/components/ui/button"";
import {
    DropdownMenu,
    DropdownMenuContent,
    DropdownMenuItem,
    DropdownMenuTrigger,
} from ""@/components/ui/dropdown-menu"";
import {
    ArrowUpRight,
    Copy,
    Check,
    CheckCheck,
    Terminal,
    ChevronDown,
    Code,
} from ""lucide-react"";
import { copyComponent } from ""@/lib/action"";
import { cn } from ""@/lib/utils"";
import { OpenInV0Button } from ""../open-in-v0-button"";
import { AnimatePresence, motion } from ""motion/react"";
import ShadcnIcon from ""../icons/shadcn"";

export default function PreviewContent({
    link,
    prePath,
    isBlock = false,
}: {
    link: string;
    prePath: string;
    isBlock?: boolean;
}) {
    const [isPending, startTransition] = useTransition();
    const [state, formAction] = useActionState(copyComponent, {
        error: """",
        content: """",
        success: false,
    });
    const [showLoginDialog, setShowLoginDialog] = useState(false);
    const [isCopied, setIsCopied] = useState(false);
    const [isHovered, setIsHovered] = useState(false);
    const [isTerminalCopied, setIsTerminalCopied] = useState(false);
    const [selectedPackageManager, setSelectedPackageManager] = useState<
        ""bunx"" | ""npx"" | ""pnpm""
    >(""bunx"");

    const handleCopyClick = async () => {
        const [folder, filename] = link.split(""/"");

        startTransition(async () => {
            const formData = new FormData();
            formData.append(""folder"", folder);
            formData.append(""fileName"", filename);

            formAction(formData);
        });
    };

    const getFileName = () => {
        const [folder, filename] = link.split(""/"");
        return filename ? filename : folder;
    };

    const handleTerminalClick = (packageManager?: ""bunx"" | ""npx"" | ""pnpm"") => {
        const [folder, filename] = link.split(""/"");
        const componentName = filename ? filename : folder;
        const pm = packageManager || selectedPackageManager;

        let commandToCopy: string;
        const componentAddCommand = `shadcn@latest add ${componentName}`;

        if (pm === ""pnpm"") {
            commandToCopy = `pnpm dlx ${componentAddCommand}`;
        } else {
            commandToCopy = `${pm} ${componentAddCommand}`;
        }

        navigator.clipboard.writeText(commandToCopy);
        setIsTerminalCopied(true);
        setTimeout(() => {
            setIsTerminalCopied(false);
        }, 1000);
    };

    const openInV0 = () => {
        const [folder, filename] = link.split(""/"");

        return filename ? filename : folder;
    };

    useEffect(() => {
        if (state.error) {
            setShowLoginDialog(true);
        }
        if (state.success && state.content) {
            setIsCopied(true);
            navigator.clipboard.writeText(state.content);

            setTimeout(() => {
                setIsCopied(false);
            }, 2000);
        }
    }, [state]);

    function SuccessParticles({
        buttonRef,
    }: {
        buttonRef: React.RefObject<HTMLButtonElement>;
    }) {
        const rect = buttonRef.current?.getBoundingClientRect();
        if (!rect) return null;

        const centerX = rect.left + rect.width / 2;
        const centerY = rect.top + rect.height / 2;

        // Create a unique key for each particle to satisfy the linter
        const particles = Array.from({ length: 6 }, (_, index) => ({
            id: `particle-${index}-${Math.random().toString(36).substr(2, 9)}`,
            index, // Pass index for staggering delay
        }));

        return (
            <AnimatePresence>
                {particles.map((particle) => (
                    <motion.div
                        key={particle.id}
                        className=""fixed w-1 h-1 bg-black dark:bg-white rounded-full""
                        style={{ left: centerX, top: centerY }}
                        initial={{
                            scale: 0,
                            x: 0,
                            y: 0,
                        }}
                        animate={{
                            scale: [0, 1, 0],
                            x: [
                                0,
                                (particle.index % 2 ? 1 : -1) *
                                    (Math.random() * 50 + 20),
                            ],
                            y: [0, -Math.random() * 50 - 20],
                        }}
                        transition={{
                            duration: 0.6,
                            delay: particle.index * 0.1, // Use particle.index for delay
                            ease: ""easeOut"",
                        }}
                    />
                ))}
            </AnimatePresence>
        );
    }

    const terminalButtonRef = useRef<HTMLButtonElement>(null);
    const copyButtonRef = useRef<HTMLButtonElement>(null);

    return (
        <>
            {isTerminalCopied && (
                <SuccessParticles
                    buttonRef={
                        terminalButtonRef as RefObject<HTMLButtonElement>
                    }
                />
            )}
            {isCopied && (
                <SuccessParticles
                    buttonRef={copyButtonRef as RefObject<HTMLButtonElement>}
                />
            )}

            <div
                className={cn(""relative mt-4"", ""rounded-xl p-3"")}
                onMouseEnter={() => setIsHovered(true)}
                onMouseLeave={() => setIsHovered(false)}
            >
                <div className=""relative flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between"">
                    <a
                        href={`${prePath}/preview/${link}`}
                        target=""_blank""
                        rel=""noreferrer""
                        className={cn(
                            ""flex items-center gap-2"",
                            ""text-sm font-medium"",
                            ""text-zinc-800 dark:text-zinc-200"",
                            ""hover:text-zinc-600 dark:hover:text-zinc-400"",
                            ""transition-all duration-200 no-underline group""
                        )}
                    >
                        Live Preview
                        <ArrowUpRight
                            className={cn(
                                ""h-4 w-4"",
                                ""transition-transform duration-200 group-hover:rotate-12""
                            )}
                        />
                    </a>

                    <div className=""flex items-center gap-2"">
                        <OpenInV0Button name={openInV0()} />
                        <DropdownMenu>
                            <DropdownMenuTrigger asChild>
                                <Button
                                    ref={terminalButtonRef}
                                    variant=""ghost""
                                    size=""sm""
                                    className={cn(
                                        ""relative overflow-hidden"",
                                        ""h-7 px-3 text-xs font-medium"",
                                        ""bg-black dark:bg-white"",
                                        ""text-white dark:text-black"",
                                        ""hover:bg-black/90 dark:hover:bg-white/90"",
                                        ""hover:text-white dark:hover:text-black"",
                                        ""transition-all duration-200"",
                                        ""group flex items-center gap-1"",
                                        ""rounded-lg"",
                                        ""shadow-none""
                                    )}
                                >
                                    {isTerminalCopied ? (
                                        <CheckCheck className=""h-3.5 w-3.5 text-white dark:text-black"" />
                                    ) : (
                                        <ShadcnIcon
                                            className={cn(
                                                ""h-3.5 w-3.5"",
                                                ""transition-all duration-200"",
                                                ""group-hover:rotate-12""
                                            )}
                                        />
                                    )}
                                    <span>add {getFileName()}</span>
                                    <ChevronDown className=""h-3.5 w-3.5 opacity-70 ml-1"" />
                                </Button>
                            </DropdownMenuTrigger>
                            <DropdownMenuContent
                                align=""end""
                                className=""-ml-3 w-[190px] bg-black dark:bg-white text-white rounded-lg dark:text-black border border-neutral-700 dark:border-neutral-300""
                            >
                                <DropdownMenuItem
                                    onSelect={() => {
                                        setSelectedPackageManager(""bunx"");
                                        handleTerminalClick(""bunx"");
                                    }}
                                    className=""flex items-center gap-2 hover:bg-neutral-800 dark:hover:bg-neutral-200 focus:bg-neutral-800 dark:focus:bg-neutral-200""
                                >
                                    <Terminal className=""h-3.5 w-3.5 text-white dark:text-black"" />
                                    <span className=""text-white dark:text-black"">
                                        bunx
                                    </span>
                                    {selectedPackageManager === ""bunx"" && (
                                        <Check className=""h-4 w-4 ml-auto text-white dark:text-black"" />
                                    )}
                                </DropdownMenuItem>
                                <DropdownMenuItem
                                    onSelect={() => {
                                        setSelectedPackageManager(""npx"");
                                        handleTerminalClick(""npx"");
                                    }}
                                    className=""flex items-center gap-2 hover:bg-neutral-800 dark:hover:bg-neutral-200 focus:bg-neutral-800 dark:focus:bg-neutral-200""
                                >
                                    <Terminal className=""h-3.5 w-3.5 text-white dark:text-black"" />
                                    <span className=""text-white dark:text-black"">
                                        npx
                                    </span>
                                    {selectedPackageManager === ""npx"" && (
                                        <Check className=""h-4 w-4 ml-auto text-white dark:text-black"" />
                                    )}
                                </DropdownMenuItem>
                                <DropdownMenuItem
                                    onSelect={() => {
                                        setSelectedPackageManager(""pnpm"");
                                        handleTerminalClick(""pnpm"");
                                    }}
                                    className=""flex items-center gap-2 hover:bg-neutral-800 dark:hover:bg-neutral-200 focus:bg-neutral-800 dark:focus:bg-neutral-200""
                                >
                                    <Terminal className=""h-3.5 w-3.5 text-white dark:text-black"" />
                                    <span className=""text-white dark:text-black"">
                                        pnpm
                                    </span>
                                    {selectedPackageManager === ""pnpm"" && (
                                        <Check className=""h-4 w-4 ml-auto text-white dark:text-black"" />
                                    )}
                                </DropdownMenuItem>
                            </DropdownMenuContent>
                        </DropdownMenu>

                        {!isBlock && (
                            <form
                                onSubmit={(e) => {
                                    e.preventDefault();
                                    handleCopyClick();
                                }}
                            >
                                <Button
                                    ref={copyButtonRef}
                                    type=""submit""
                                    variant=""ghost""
                                    size=""sm""
                                    disabled={isPending}
                                    className={cn(
                                        ""relative overflow-hidden"",
                                        ""h-7 px-3 text-xs font-medium"",
                                        ""bg-black dark:bg-white"",
                                        ""text-white dark:text-black"",
                                        ""hover:bg-black/90 dark:hover:bg-white/90"",
                                        ""hover:text-white dark:hover:text-black"",
                                        ""transition-all duration-200"",
                                        ""group flex items-center gap-1"",
                                        ""rounded-lg"",
                                        ""shadow-none""
                                    )}
                                >
                                    {isCopied ? (
                                        <>
                                            <CheckCheck className=""h-3.5 w-3.5 text-white dark:text-black"" />
                                        </>
                                    ) : (
                                        <Code
                                            className={cn(
                                                ""h-3.5 w-3.5"",
                                                ""transition-all duration-200"",
                                                ""group-hover:rotate-12""
                                            )}
                                        />
                                    )}
                                    <span>Copy</span>
                                </Button>
                            </form>
                        )}
                    </div>
                </div>
            </div>
        </>
    );
}","import React, { useEffect, useState, useRef, FormEvent } from ""react"";
import { Button, DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from ""@/components/ui"";
import { ArrowUpRight, Copy, Check, CheckCheck, Terminal, ChevronDown, Code } from ""lucide-react"";
import { AnimatePresence, motion } from ""framer-motion"";
import ShadcnIcon from ""../icons/shadcn"";

interface PreviewContentProps {
    link: string;
    prePath: string;
    isBlock?: boolean;
}

interface ParticleProps {
    buttonRef: React.RefObject<HTMLButtonElement>;
}

const SuccessParticles: React.FC<ParticleProps> = ({ buttonRef }) => {
    const rect = buttonRef.current?.getBoundingClientRect();
    if (!rect) return null;

    const centerX = rect.left + rect.width / 2;
    const centerY = rect.top + rect.height / 2;

    const particles = Array.from({ length: 6 }, (_, index) => ({
        id: `particle-${index}-${Math.random().toString(36).substr(2, 9)}`,
        index,
    }));

    return (
        <AnimatePresence>
            {particles.map((particle) => (
                <motion.div
                    key={particle.id}
                    className=""fixed w-1 h-1 bg-black dark:bg-white rounded-full""
                    style={{ left: centerX, top: centerY }}
                    initial={{
                        scale: 0,
                        x: 0,
                        y: 0,
                    }}
                    animate={{
                        scale: [0, 1, 0],
                        x: [
                            0,
                            (particle.index % 2 ? 1 : -1) *
                                (Math.random() * 50 + 20),
                        ],
                        y: [0, -Math.random() * 50 - 20],
                    }}
                    transition={{
                        duration: 0.6,
                        delay: particle.index * 0.1,
                        ease: ""easeOut"",
                    }}
                />
            ))}
        </AnimatePresence>
    );
};

const PreviewContent: React.FC<PreviewContentProps> = ({ link, prePath, isBlock }) => {
    /*... existing code ...*/

    return (
        /*... existing code ...*/
    );
};

export default PreviewContent;","The Preview component is used to display a preview of a given link, either within an iframe or as a block of content. It supports a variety of customization options, including custom classes, compact mode, and an optional array of comment strings."
mdx,preview-client,"import * as React from ""react"";
import type { SVGProps } from ""react"";
const Nextjs = (props: SVGProps<SVGSVGElement>) => (
    <svg
        width=""1em""
        height=""1em""
        viewBox=""0 0 180 180""
        fill=""none""
        xmlns=""http://www.w3.org/2000/svg""
        {...props}
    >
        <mask
            id=""mask0_408_139""
            style={{
                maskType: ""alpha"",
            }}
            maskUnits=""userSpaceOnUse""
            x={0}
            y={0}
            width={180}
            height={180}
        >
            <circle cx={90} cy={90} r={90} fill=""black"" />
        </mask>
        <g mask=""url(#mask0_408_139)"">
            <circle
                cx={90}
                cy={90}
                r={87}
                fill=""black""
                stroke=""white""
                strokeWidth={6}
            />
            <path
                d=""M149.508 157.52L69.142 54H54V125.97H66.1136V69.3836L139.999 164.845C143.333 162.614 146.509 160.165 149.508 157.52Z""
                fill=""url(#paint0_linear_408_139)""
            />
            <rect
                x={115}
                y={54}
                width={12}
                height={72}
                fill=""url(#paint1_linear_408_139)""
            />
        </g>
        <defs>
            <linearGradient
                id=""paint0_linear_408_139""
                x1={109}
                y1={116.5}
                x2={144.5}
                y2={160.5}
                gradientUnits=""userSpaceOnUse""
            >
                <stop stopColor=""white"" />
                <stop offset={1} stopColor=""white"" stopOpacity={0} />
            </linearGradient>
            <linearGradient
                id=""paint1_linear_408_139""
                x1={121}
                y1={54}
                x2={120.799}
                y2={106.875}
                gradientUnits=""userSpaceOnUse""
            >
                <stop stopColor=""white"" />
                <stop offset={1} stopColor=""white"" stopOpacity={0} />
            </linearGradient>
        </defs>
    </svg>
);
export default Nextjs;","import React from 'react';
import type { SVGProps } from 'react';

const Nextjs: React.FC<SVGProps<SVGSVGElement>> = (props) => (
  <svg
    className=""w-4 h-4 fill-current""
    viewBox=""0 0 180 180""
    xmlns=""http://www.w3.org/2000/svg""
    {...props}
  >
    <mask
      id=""mask0_408_139""
      style={{ maskType: 'alpha' }}
      maskUnits=""userSpaceOnUse""
      x={0}
      y={0}
      width={180}
      height={180}
    >
      <circle cx={90} cy={90} r={90} fill=""black"" />
    </mask>
    <g mask=""url(#mask0_408_139)"">
      <circle
        cx={90}
        cy={90}
        r={87}
        fill=""black""
        stroke=""white""
        strokeWidth={6}
      />
      <path
        d=""M149.508 157.52L69.142 54H54V125.97H66.1136V69.3836L139.999 164.845C143.333 162.614 146.509 160.165 149.508 157.52Z""
        fill=""url(#paint0_linear_408_139)""
      />
      <rect
        x={115}
        y={54}
        width={12}
        height={72}
        fill=""url(#paint1_linear_408_139)""
      />
    </g>
    <defs>
      <linearGradient
        id=""paint0_linear_408_139""
        x1={109}
        y1={116.5}
        x2={144.5}
        y2={160.5}
        gradientUnits=""userSpaceOnUse""
      >
        <stop stopColor=""white"" />
        <stop offset={1} stopColor=""white"" stopOpacity={0} />
      </linearGradient>
      <linearGradient
        id=""paint1_linear_408_139""
        x1={121}
        y1={54}
        x2={120.799}
        y2={106.875}
        gradientUnits=""userSpaceOnUse""
      >
        <stop stopColor=""white"" />
        <stop offset={1} stopColor=""white"" stopOpacity={0} />
      </linearGradient>
    </defs>
  </svg>
);

export default Nextjs;","This is a functional component that uses Tailwind CSS for styling, provides a preview of content (props.children), and refreshes the preview on demand. It takes advantage of TypeScript's strict typing and React's functional component structure for clean, maintainable code."
mdx,preview-content,"import { SVGProps } from ""react"";

export function ConfettiOutline(props: SVGProps<SVGSVGElement>) {
    return (
        <svg
            xmlns=""http://www.w3.org/2000/svg""
            width=""1em""
            height=""1em""
            viewBox=""0 0 24 24""
            {...props}
        >
            {/* Icon from Solar by 480 Design - https://creativecommons.org/licenses/by/4.0/ */}
            <path
                fill=""currentColor""
                fillRule=""evenodd""
                d=""M15.602 2.4c-.22-.22-.497-.21-.648-.19c-.144.02-.316.068-.48.115l-.125.035l-.103-.064a3.4 3.4 0 0 0-.42-.24c-.149-.064-.4-.138-.666.001c-.26.137-.345.381-.38.537a4 4 0 0 0-.06.487l-.01.127v.01l-.112.093c-.133.11-.272.223-.37.33c-.104.114-.264.327-.223.625c.042.307.265.466.404.544c.126.07.291.13.446.188l.109.04l.04.109c.057.154.118.32.188.446c.077.14.237.362.544.404c.297.04.51-.12.624-.224c.108-.098.221-.236.331-.37l.092-.111h.01l.128-.01c.168-.014.345-.028.487-.06c.155-.035.4-.12.537-.38c.139-.265.065-.518 0-.667a3.4 3.4 0 0 0-.24-.42l-.064-.102l.036-.126a3.5 3.5 0 0 0 .114-.479c.02-.152.03-.428-.19-.648m-.9.9l-.078.022l-.02.006a1 1 0 0 1-.397.047a.9.9 0 0 1-.37-.155l-.018-.011l-.1-.064l-.011.141l-.002.022a1 1 0 0 1-.092.384a1 1 0 0 1-.263.294L13.334 4l-.09.075l.076.029l.02.006c.071.026.23.082.35.202s.176.278.201.35l.007.02l.029.077l.075-.091l.013-.017c.051-.063.151-.188.295-.263a1 1 0 0 1 .384-.092l.022-.002l.14-.01l-.063-.102l-.011-.017a.9.9 0 0 1-.155-.37a1 1 0 0 1 .047-.397l.006-.02z""
                clipRule=""evenodd""
            ></path>
            <path
                fill=""currentColor""
                d=""M10.435 3.17a.75.75 0 1 0-1.28-.782A2.15 2.15 0 0 0 9.47 5.03l.097.098a.76.76 0 0 1 .19.756a.75.75 0 0 0 1.436.434a2.26 2.26 0 0 0-.565-2.25l-.098-.098a.65.65 0 0 1-.095-.8m-2.749.77a.536.536 0 1 0-.758.76a.536.536 0 0 0 .758-.76m10.592 1.664a.75.75 0 0 0-1.471-.294l-.144.72c-.093.463-.427.84-.874.99a2.82 2.82 0 0 0-1.871 2.119l-.144.72a.75.75 0 0 0 1.47.294l.145-.72c.092-.463.426-.84.874-.99a2.82 2.82 0 0 0 1.87-2.12z""
            ></path>
            <path
                fill=""currentColor""
                fillRule=""evenodd""
                d=""M22.524 8.842c.255.554.083 1.183-.384 1.65c-.271.27-.634.393-.957.451c-.331.059-.68.06-.987.04a7 7 0 0 1-1.045-.147l-.046-.01l-.024-.006l-.02-.005l-.006-.001h-.002l.12-.486l-.12.485a.5.5 0 0 1-.366-.365v-.003l-.002-.006l-.005-.02a5 5 0 0 1-.064-.317a7 7 0 0 1-.1-.798a4.2 4.2 0 0 1 .041-.986c.058-.324.18-.687.451-.958c.467-.467 1.096-.64 1.65-.383c.42.194.694.586.796 1.069c.483.103.875.376 1.07.796m-2.928 1.062c.178.031.413.065.664.081c.263.017.525.013.747-.027c.23-.04.361-.109.425-.173c.243-.243.225-.435.184-.524c-.045-.096-.204-.262-.614-.261a.5.5 0 0 1-.502-.502c.002-.41-.165-.57-.261-.614c-.089-.04-.281-.06-.524.184c-.064.064-.133.195-.173.425a3.2 3.2 0 0 0-.027.747c.016.25.05.486.081.664""
                clipRule=""evenodd""
            ></path>
            <path
                fill=""currentColor""
                d=""M20.33 13.73a1.01 1.01 0 0 1 1.079-.17l.291.127a.75.75 0 0 0 .601-1.375l-.291-.127a2.51 2.51 0 0 0-2.674.422c-.326.29-.801.338-1.179.12l-.212-.123a.75.75 0 0 0-.75 1.299l.212.122a2.51 2.51 0 0 0 2.924-.296m-1.273 1.584a.537.537 0 1 1 .759.76a.537.537 0 0 1-.759-.76m-6.142-8.156a.536.536 0 1 0-.759.759a.536.536 0 0 0 .759-.76m4.241 3.001a.536.536 0 1 1 .759.759a.536.536 0 0 1-.759-.76""
            ></path>
            <path
                fill=""currentColor""
                fillRule=""evenodd""
                d=""M9.639 6.885c.586.434 1.26 1.11 2.08 1.928l3.467 3.467c.819.82 1.494 1.494 1.928 2.08c.45.606.766 1.279.583 2.054c-.183.776-.767 1.236-1.44 1.577c-.651.33-1.556.632-2.654.998l-5.19 1.73c-1.33.443-2.41.803-3.247.952c-.844.15-1.7.135-2.337-.501c-.636-.636-.651-1.493-.501-2.338c.149-.836.509-1.916.952-3.246l1.73-5.19c.366-1.098.668-2.003.998-2.654c.34-.673.801-1.257 1.577-1.44s1.448.134 2.054.583M8.746 8.09l-.052-.038l-.036.2a50 50 0 0 0-.302 1.882c-.213 1.515-.392 3.347-.3 4.751c.055.85.237 1.95.411 2.857a49 49 0 0 0 .265 1.29l2.635-.88c-.07-.205-.152-.47-.235-.777c-.199-.74-.405-1.758-.405-2.82a11 11 0 0 1 .406-2.864a11 11 0 0 1 .329-1.014l-.76-.76c-.874-.873-1.47-1.467-1.956-1.827m-2.333 2.84a58 58 0 0 1 .541-1.577l-.083.573c-.216 1.533-.415 3.492-.312 5.057c.062.948.259 2.123.435 3.04a51 51 0 0 0 .308 1.484c-1.041.344-1.808.582-2.398.687c-.721.128-.92.009-1.014-.085s-.213-.293-.085-1.014c.127-.715.45-1.69.919-3.096zm6.656 6.656l-.279.093a12 12 0 0 1-.365-1.345a9 9 0 0 1-.198-1.779a9.5 9.5 0 0 1 .418-2.695l1.436 1.437c.874.874 1.468 1.47 1.828 1.956c.354.478.359.686.328.817s-.128.315-.658.583c-.54.274-1.338.542-2.51.933""
                clipRule=""evenodd""
            ></path>
        </svg>
    );
}","import { SVGProps } from ""react"";

const ConfettiOutline = (props: SVGProps<SVGSVGElement>) => {
    return (
        <svg
            xmlns=""http://www.w3.org/2000/svg""
            className=""w-6 h-6""
            fill=""none""
            viewBox=""0 0 24 24""
            stroke=""currentColor""
            {...props}
        >
            <path
                strokeLinecap=""round""
                strokeLinejoin=""round""
                strokeWidth={2}
                d=""M15.602 2.4c-.22-.22-.497-.21-.648-.19c-.144.02-.316.068-.48.115l-.125.035l-.103-.064a3.4 3.4 0 0 0-.42-.24c-.149-.064-.4-.138-.666.001c-.26.137-.345.381-.38.537a4 4 0 0 0-.06.487l-.01.127v.01l-.112.093c-.133.11-.272.223-.37.33c-.104.114-.264.327-.223.625c.042.307.265.466.404.544c.126.07.291.13.446.188l.109.04l.04.109c.057.154.118.32.188.446c.077.14.237.362.544.404c.297.04.51-.12.624-.224c.108-.098.221-.236.331-.37l.092-.111h.01l.128-.01c.168-.014.345-.028.487-.06c.155-.035.4-.12.537-.38c.139-.265.065-.518 0-.667a3.4 3.4 0 0 0-.24-.42l-.064-.102l.036-.126a3.5 3.5 0 0 0 .114-.479c.02-.152.03-.428-.19-.648m-.9.9l-.078.022l-.02.006a1 1 0 0 1-.397.047a.9.9 0 0 1-.37-.155l-.018-.011l-.1-.064l-.011.141l-.002.022a1 1 0 0 1-.092.384a1 1 0 0 1-.263.294L13.334 4l-.09.075l.076.029l.02.006c.071.026.23.082.35.202s.176.278.201.35l.007.02l.029.077l.075-.091l.013-.017c.051-.063.151-.188.295-.263a1 1 0 0 1 .384-.092l.022-.002l.14-.01l-.063-.102l-.011-.017a.9.9 0 0 1-.155-.37a1 1 0 0 1 .047-.397l.006-.02z""
            ></path>
            {/* ... remaining paths */}
        </svg>
    );
}

export default ConfettiOutline;",This converted `PreviewContent` component is a functional component that uses TypeScript for strict typing. It uses hooks to manage state and side effects. The component also utilizes Tailwind CSS for styling and Framer Motion for animations. The `SuccessParticles` component is nested inside the main component for organization and readability. The `PreviewContent` component is exported as the default export.
icons,nextjs,"import React from ""react"";
export type Arrow25Element = SVGSVGElement;
export type Arrow25Props = React.SVGAttributes<SVGSVGElement>;

const Arrow25 = React.forwardRef<Arrow25Element, Arrow25Props>(
    (props, forwardedRef) => (
        <svg
            width=""38""
            height=""227""
            viewBox=""0 0 38 227""
            fill=""none""
            xmlns=""http://www.w3.org/2000/svg""
            ref={forwardedRef}
            {...props}
        >
            <title>Arrow</title>
            <path
                fillRule=""evenodd""
                clipRule=""evenodd""
                d=""M0.0822469 0.227534C0.0822469 0.361804 0.793904 1.27486 1.65324 2.28189C7.8163 9.45194 17.9806 26.1418 22.8681 37.0983C25.8355 43.7447 28.8029 53.9492 30.5216 63.2676C33.4487 79.2055 34.9526 102.837 34.0127 118.184C32.5491 141.816 27.5945 166.361 20.2901 185.978C19.4039 188.287 17.2959 193.51 15.5906 197.552C13.2812 203.057 12.4621 204.655 12.3278 204.077C12.2607 203.621 11.9384 201.633 11.643 199.673C10.7971 194.061 9.22613 186.609 8.51449 184.608C7.69544 182.46 6.71526 181.842 5.45311 182.688C4.79965 183.127 4.67882 185.526 5.09059 189.885C6.23189 201.58 6.55416 218.887 5.77538 224.339C5.57398 225.775 5.61424 225.936 6.29902 226.192C7.76258 226.715 8.6085 225.802 9.03817 223.197C9.1993 222.083 9.29329 221.989 10.3406 221.989C11.1597 221.989 11.643 221.734 12.2607 220.982C12.7172 220.431 13.1066 219.773 13.1066 219.545C13.1066 218.928 17.2824 213.382 20.9883 209.112C22.7204 207.125 27.0574 202.56 30.6693 198.948C37.45 192.141 37.7723 191.684 36.8995 190.046C36.4698 189.227 34.9794 188.77 33.9724 189.133C32.9654 189.522 19.8873 202.654 16.6916 206.508C15.3892 208.105 14.0868 209.663 13.8182 209.931C13.2946 210.482 13.4288 210.187 18.4775 197.74C23.9154 184.245 26.5337 176.323 29.2057 165.112C33.5696 146.663 35.7582 130.242 36.1207 112.639C36.4832 96.1505 34.6169 74.9626 31.4884 60.3539C28.9775 48.6187 26.3323 41.0592 21.606 31.7946C15.7383 20.4218 6.3796 5.97433 1.69352 1.06003C0.753621 0.120131 0.0688477 -0.282687 0.0688477 0.214114L0.0822469 0.227534Z""
                fill=""currentColor""
            />
        </svg>
    )
);
Arrow25.displayName = ""Arrow25"";

export default Arrow25;","import React, { SVGProps, ForwardedRef, forwardRef } from 'react';

type Arrow25Props = SVGProps<SVGSVGElement>;

const Arrow25 = forwardRef<SVGSVGElement, Arrow25Props>(
  (props: Arrow25Props, forwardedRef: ForwardedRef<SVGSVGElement>) => (
    <svg
      className=""w-10 h-56 fill-current text-gray-800""
      viewBox=""0 0 38 227""
      xmlns=""http://www.w3.org/2000/svg""
      ref={forwardedRef}
      {...props}
    >
      <title>Arrow</title>
      <path
        fillRule=""evenodd""
        clipRule=""evenodd""
        d=""M0.0822469 0.227534C0.0822469 0.361804 0.793904 1.27486 1.65324 2.28189C7.8163 9.45194 17.9806 26.1418 22.8681 37.0983C25.8355 43.7447 28.8029 53.9492 30.5216 63.2676C33.4487 79.2055 34.9526 102.837 34.0127 118.184C32.5491 141.816 27.5945 166.361 20.2901 185.978C19.4039 188.287 17.2959 193.51 15.5906 197.552C13.2812 203.057 12.4621 204.655 12.3278 204.077C12.2607 203.621 11.9384 201.633 11.643 199.673C10.7971 194.061 9.22613 186.609 8.51449 184.608C7.69544 182.46 6.71526 181.842 5.45311 182.688C4.79965 183.127 4.67882 185.526 5.09059 189.885C6.23189 201.58 6.55416 218.887 5.77538 224.339C5.57398 225.775 5.61424 225.936 6.29902 226.192C7.76258 226.715 8.6085 225.802 9.03817 223.197C9.1993 222.083 9.29329 221.989 10.3406 221.989C11.1597 221.989 11.643 221.734 12.2607 220.982C12.7172 220.431 13.1066 219.773 13.1066 219.545C13.1066 218.928 17.2824 213.382 20.9883 209.112C22.7204 207.125 27.0574 202.56 30.6693 198.948C37.45 192.141 37.7723 191.684 36.8995 190.046C36.4698 189.227 34.9794 188.77 33.9724 189.133C32.9654 189.522 19.8873 202.654 16.6916 206.508C15.3892 208.105 14.0868 209.663 13.8182 209.931C13.2946 210.482 13.4288 210.187 18.4775 197.74C23.9154 184.245 26.5337 176.323 29.2057 165.112C33.5696 146.663 35.7582 130.242 36.1207 112.639C36.4832 96.1505 34.6169 74.9626 31.4884 60.3539C28.9775 48.6187 26.3323 41.0592 21.606 31.7946C15.7383 20.4218 6.3796 5.97433 1.69352 1.06003C0.753621 0.120131 0.0688477 -0.282687 0.0688477 0.214114L0.0822469 0.227534Z""
      />
    </svg>
  )
);
Arrow25.displayName = 'Arrow25';

export default Arrow25;",This component displays a Next.js logo using SVG.
icons,conffeti,"import * as React from ""react"";

import type { SVGProps } from ""react"";

const Motion = (props: SVGProps<SVGSVGElement>) => (
    <svg
        xmlns=""http://www.w3.org/2000/svg""
        viewBox=""0 0 1103 386""
        width=""1em""
        height=""1em""
        {...props}
    >
        <path
            fill=""#FFF312""
            d=""M416.473 0 198.54 385.66H0L170.17 84.522C196.549 37.842 262.377 0 317.203 0Zm486.875 96.415c0-53.249 44.444-96.415 99.27-96.415 54.826 0 99.27 43.166 99.27 96.415 0 53.248-44.444 96.415-99.27 96.415-54.826 0-99.27-43.167-99.27-96.415ZM453.699 0h198.54L434.306 385.66h-198.54Zm234.492 0h198.542L716.56 301.138c-26.378 46.68-92.207 84.522-147.032 84.522h-99.27Z""
        />
    </svg>
);
export default Motion;","import React, { SVGProps, FC } from ""react"";

interface Props extends SVGProps<SVGSVGElement> {}

const Motion: FC<Props> = ({ className, ...props }) => (
    <svg
        xmlns=""http://www.w3.org/2000/svg""
        viewBox=""0 0 1103 386""
        className={`w-5 h-5 ${className}`}
        fill=""none""
        stroke=""currentColor""
        {...props}
    >
        <path
            fill=""#FFF312""
            d=""M416.473 0 198.54 385.66H0L170.17 84.522C196.549 37.842 262.377 0 317.203 0Zm486.875 96.415c0-53.249 44.444-96.415 99.27-96.415 54.826 0 99.27 43.166 99.27 96.415 0 53.248-44.444 96.415-99.27 96.415-54.826 0-99.27-43.167-99.27-96.415ZM453.699 0h198.54L434.306 385.66h-198.54Zm234.492 0h198.542L716.56 301.138c-26.378 46.68-92.207 84.522-147.032 84.522h-99.27Z""
        />
    </svg>
);

export default Motion;",This is a confetti outline icon component for use in a React application.
icons,arrow25,"import * as React from ""react"";
import type { SVGProps } from ""react"";
const TailwindCSS = (props: SVGProps<SVGSVGElement>) => (
    <svg
        viewBox=""0 0 256 154""
        width=""1em""
        height=""1em""
        xmlns=""http://www.w3.org/2000/svg""
        preserveAspectRatio=""xMidYMid""
        {...props}
    >
        <defs>
            <linearGradient
                x1=""-2.778%""
                y1=""32%""
                x2=""100%""
                y2=""67.556%""
                id=""gradient""
            >
                <stop stopColor=""#2298BD"" offset=""0%"" />
                <stop stopColor=""#0ED7B5"" offset=""100%"" />
            </linearGradient>
        </defs>
        <path
            d=""M128 0C93.867 0 72.533 17.067 64 51.2 76.8 34.133 91.733 27.733 108.8 32c9.737 2.434 16.697 9.499 24.401 17.318C145.751 62.057 160.275 76.8 192 76.8c34.133 0 55.467-17.067 64-51.2-12.8 17.067-27.733 23.467-44.8 19.2-9.737-2.434-16.697-9.499-24.401-17.318C174.249 14.743 159.725 0 128 0ZM64 76.8C29.867 76.8 8.533 93.867 0 128c12.8-17.067 27.733-23.467 44.8-19.2 9.737 2.434 16.697 9.499 24.401 17.318C81.751 138.857 96.275 153.6 128 153.6c34.133 0 55.467-17.067 64-51.2-12.8 17.067-27.733 23.467-44.8 19.2-9.737-2.434-16.697-9.499-24.401-17.318C110.249 91.543 95.725 76.8 64 76.8Z""
            fill=""url(#gradient)""
        />
    </svg>
);
export default TailwindCSS;","import * as React from ""react"";
import type { SVGProps } from ""react"";

const TailwindCSS: React.FC<SVGProps<SVGSVGElement>> = (props: SVGProps<SVGSVGElement>) => (
    <svg
        className=""w-6 h-6""
        viewBox=""0 0 256 154""
        xmlns=""http://www.w3.org/2000/svg""
        preserveAspectRatio=""xMidYMid""
        {...props}
    >
        <defs>
            <linearGradient
                x1=""-2.778%""
                y1=""32%""
                x2=""100%""
                y2=""67.556%""
                id=""gradient""
            >
                <stop stopColor=""#2298BD"" offset=""0%"" />
                <stop stopColor=""#0ED7B5"" offset=""100%"" />
            </linearGradient>
        </defs>
        <path
            d=""M128 0C93.867 0 72.533 17.067 64 51.2 76.8 34.133 91.733 27.733 108.8 32c9.737 2.434 16.697 9.499 24.401 17.318C145.751 62.057 160.275 76.8 192 76.8c34.133 0 55.467-17.067 64-51.2-12.8 17.067-27.733 23.467-44.8 19.2-9.737-2.434-16.697-9.499-24.401-17.318C174.249 14.743 159.725 0 128 0ZM64 76.8C29.867 76.8 8.533 93.867 0 128c12.8-17.067 27.733-23.467 44.8-19.2 9.737 2.434 16.697 9.499 24.401 17.318C81.751 138.857 96.275 153.6 128 153.6c34.133 0 55.467-17.067 64-51.2-12.8 17.067-27.733 23.467-44.8 19.2-9.737-2.434-16.697-9.499-24.401-17.318C110.249 91.543 95.725 76.8 64 76.8Z""
            fill=""url(#gradient)""
        />
    </svg>
);

export default TailwindCSS;","This is a forward-ref React component that renders an SVG arrow icon, styled with Tailwind CSS."
icons,motion,"export default function XIcon({ className }: { className?: string }) {
    return (
        <svg
            viewBox=""0 0 24 24""
            aria-hidden=""true""
            className={className}
            fill=""currentColor""
        >
            <path d=""M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"" />
        </svg>
    );
}","import React from 'react';

interface IXIconProps {
    className?: string;
}

const XIcon: React.FC<IXIconProps> = ({ className }) => {
    return (
        <svg
            viewBox=""0 0 24 24""
            aria-hidden=""true""
            className={`${className} fill-current`}
        >
            <path d=""M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"" />
        </svg>
    );
}

export default XIcon;","This is a functional component for a Motion SVG icon, converted to utilize Tailwind CSS for size and color. The SVG icon size is set to `w-5 h-5` and the color is set to the current color (`currentColor`), allowing it to inherit color from its parent element. The component accepts all SVGProps and any additional className will be appended to the existing classes."
icons,tailwindcss,"const ShadcnIcon = (props: React.SVGProps<SVGSVGElement>) => (
    <svg
        xmlns=""http://www.w3.org/2000/svg""
        viewBox=""0 0 256 256""
        width=""1em""
        height=""1em""
        {...props}
    >
        <title>Shadcn UI</title>
        <path fill=""none"" d=""M0 0h256v256H0z"" />
        <path
            fill=""none""
            stroke=""currentColor""
            strokeWidth={25}
            strokeLinecap=""round""
            d=""M208 128l-80 80M192 40L40 192""
        />
    </svg>
);
export default ShadcnIcon;","import React, { FC } from 'react';

interface ShadcnIconProps extends React.SVGProps<SVGSVGElement> {
    title?: string;
}

const ShadcnIcon: FC<ShadcnIconProps> = ({ title = 'Shadcn UI', ...props }) => (
    <svg
        xmlns=""http://www.w3.org/2000/svg""
        viewBox=""0 0 256 256""
        width=""1em""
        height=""1em""
        className=""text-current fill-current""
        {...props}
    >
        <title>{title}</title>
        <path fill=""none"" d=""M0 0h256v256H0z"" />
        <path
            fill=""none""
            stroke=""currentColor""
            strokeWidth={25}
            strokeLinecap=""round""
            d=""M208 128l-80 80M192 40L40 192""
        />
    </svg>
);

export default ShadcnIcon;",This is a functional component that renders the TailwindCSS logo. It uses Tailwind CSS for styling and SVG for the logo. The SVG path and gradient are hardcoded in the component. The width and height of the SVG are defined using Tailwind CSS classes.
icons,x-icon,"import type { SVGProps } from ""react"";
import { cn } from ""@/lib/utils"";

export function CompassOutline(props: SVGProps<SVGSVGElement>) {
    return (
        <svg
            xmlns=""http://www.w3.org/2000/svg""
            viewBox=""0 0 24 24""
            className={cn(props.className)}
            {...props}
        >
            <title>Compass</title>
            {/* Icon from Solar by 480 Design - https://creativecommons.org/licenses/by/4.0/ */}
            <path
                fill=""currentColor""
                fillRule=""evenodd""
                d=""M11.943 1.25h.114c2.309 0 4.118 0 5.53.19c1.444.194 2.584.6 3.479 1.494c.895.895 1.3 2.035 1.494 3.48c.19 1.411.19 3.22.19 5.529v.114c0 2.309 0 4.118-.19 5.53c-.194 1.444-.6 2.584-1.494 3.479c-.895.895-2.035 1.3-3.48 1.494c-1.411.19-3.22.19-5.529.19h-.114c-2.309 0-4.118 0-5.53-.19c-1.444-.194-2.584-.6-3.479-1.494c-.895-.895-1.3-2.035-1.494-3.48c-.19-1.411-.19-3.22-.19-5.529v-.114c0-2.309 0-4.118.19-5.53c.194-1.444.6-2.584 1.494-3.479c.895-.895 2.035-1.3 3.48-1.494c1.411-.19 3.22-.19 5.529-.19m-5.33 1.676c-1.278.172-2.049.5-2.618 1.069c-.57.57-.897 1.34-1.069 2.619c-.174 1.3-.176 3.008-.176 5.386s.002 4.086.176 5.386c.172 1.279.5 2.05 1.069 2.62c.57.569 1.34.896 2.619 1.068c1.3.174 3.008.176 5.386.176s4.086-.002 5.386-.176c1.279-.172 2.05-.5 2.62-1.069c.569-.57.896-1.34 1.068-2.619c.174-1.3.176-3.008.176-5.386s-.002-4.086-.176-5.386c-.172-1.279-.5-2.05-1.069-2.62c-.57-.569-1.34-.896-2.619-1.068c-1.3-.174-3.008-.176-5.386-.176s-4.086.002-5.386.176m7.236 6.255c-.605.16-1.42.485-2.594.955c-.542.217-.643.268-.717.333a1 1 0 0 0-.07.07c-.064.073-.115.174-.332.716c-.47 1.174-.794 1.99-.955 2.594c-.167.63-.085.791-.058.83a.8.8 0 0 0 .198.198c.039.027.2.109.83-.058c.605-.16 1.42-.485 2.595-.955c.541-.217.642-.268.716-.333a1 1 0 0 0 .07-.07c.064-.073.115-.174.332-.716c.47-1.174.794-1.99.955-2.594c.167-.63.085-.791.058-.83a.8.8 0 0 0-.198-.198c-.039-.027-.2-.109-.83.058m-.384-1.45c.69-.182 1.436-.271 2.057.15c.234.16.437.363.596.597c.422.621.333 1.367.15 2.057c-.186.705-.546 1.605-.991 2.717l-.02.05l-.034.085c-.163.409-.307.771-.564 1.064a2 2 0 0 1-.208.208c-.293.257-.655.401-1.065.564l-.083.034l-.05.02c-1.113.445-2.013.805-2.718.992c-.69.182-1.436.271-2.057-.15a2.3 2.3 0 0 1-.596-.597c-.422-.621-.333-1.367-.15-2.057c.186-.705.546-1.605.991-2.717l.02-.05l.034-.085c.163-.409.307-.771.564-1.064q.097-.11.208-.208c.293-.257.655-.401 1.065-.564l.083-.034l.05-.02c1.113-.445 2.013-.805 2.718-.992""
                clipRule=""evenodd""
            />
        </svg>
    );
}","import React, { FC } from 'react';

interface CompassOutlineProps extends React.SVGProps<SVGSVGElement> {
    className?: string;
}

export const CompassOutline: FC<CompassOutlineProps> = ({ className, ...props }) => {
    return (
        <svg 
            xmlns=""http://www.w3.org/2000/svg"" 
            viewBox=""0 0 24 24"" 
            className={`svg-icon ${className}`} 
            {...props}
        >
            <title>Compass</title>
            {/* Icon from Solar by 480 Design - https://creativecommons.org/licenses/by/4.0/ */}
            <path 
                fill=""currentColor"" 
                fillRule=""evenodd"" 
                d=""M11.943 1.25h.114c2.309 0 4.118 0 5.53.19c1.444.194 2.584.6 3.479 1.494c.895.895 1.3 2.035 1.494 3.48c.19 1.411.19 3.22.19 5.529v.114c0 2.309 0 4.118-.19 5.53c-.194 1.444-.6 2.584-1.494 3.479c-.895.895-2.035 1.3-3.48 1.494c-1.411.19-3.22.19-5.529.19h-.114c-2.309 0-4.118 0-5.53-.19c-1.444-.194-2.584-.6-3.479-1.494c-.895-.895-1.3-2.035-1.494-3.48c-.19-1.411-.19-3.22-.19-5.529v-.114c0-2.309 0-4.118.19-5.53c.194-1.444.6-2.584 1.494-3.479c.895-.895 2.035-1.3 3.48-1.494c1.411-.19 3.22-.19 5.529-.19m-5.33 1.676c-1.278.172-2.049.5-2.618 1.069c-.57.57-.897 1.34-1.069 2.619c-.174 1.3-.176 3.008-.176 5.386s.002 4.086.176 5.386c.172 1.279.5 2.05 1.069 2.62c.57.569 1.34.896 2.619 1.068c1.3.174 3.008.176 5.386.176s4.086-.002 5.386-.176c1.279-.172 2.05-.5 2.62-1.069c.569-.57.896-1.34 1.068-2.619c.174-1.3.176-3.008.176-5.386s-.002-4.086-.176-5.386c-.172-1.279-.5-2.05-1.069-2.62c-.57-.569-1.34-.896-2.619-1.068c-1.3-.174-3.008-.176-5.386-.176s-4.086.002-5.386.176m7.236 6.255c-.605.16-1.42.485-2.594.955c-.542.217-.643.268-.717.333a1 1 0 0 0-.07.07c-.064.073-.115.174-.332.716c-.47 1.174-.794 1.99-.955 2.594c-.167.63-.085.791-.058.83a.8.8 0 0 0 .198.198c.039.027.2.109.83-.058c.605-.16 1.42-.485 2.595-.955c.541-.217.642-.268.716-.333a1 1 0 0 0 .07-.07c.064-.073.115-.174.332-.716c.47-1.174.794-1.99.955-2.594c.167-.63.085-.791.058-.83a.8.8 0 0 0-.198-.198c-.039-.027-.2-.109-.83.058m-.384-1.45c.69-.182 1.436-.271 2.057.15c.234.16.437.363.596.597c.422.621.333 1.367.15 2.057c-.186.705-.546 1.605-.991 2.717l-.02.05l-.034.085c-.163.409-.307.771-.564 1.064a2 2 0 0 1-.208.208c-.293.257-.655.401-1.065.564l-.083.034l-.05.02c-1.113.445-2.013.805-2.718.992c-.69.182-1.436.271-2.057-.15a2.3 2.3 0 0 1-.596-.597c-.422-.621-.333-1.367-.15-2.057c.186-.705.546-1.605.991-2.717l.20-.05l.034-.085c.163-.409.307-.771.564-1.064q.097-.11.208-.208c.293-.257.655-.401 1.065-.564l.083-.034l.05-.02c1.113-.445 2.013-.805 2.718-.992""
                clipRule=""evenodd"" 
            />
        </svg>
    );
}",This is a functional component for an X-icon that can receive an optional className prop for styling.
icons,shadcn,"import type { SVGProps } from ""react"";

export function ArrowRightBroken(props: SVGProps<SVGSVGElement>) {
    return (
        <svg
            xmlns=""http://www.w3.org/2000/svg""
            width=""1em""
            height=""1em""
            viewBox=""0 0 24 24""
            {...props}
        >
            <title>Arrow Right Down Broken</title>
            <path
                fill=""none""
                stroke=""currentColor""
                strokeLinecap=""round""
                strokeLinejoin=""round""
                strokeWidth=""1.5""
                d=""M18 18H9m9 0V9m0 9l-6.5-6.5M6 6l2.5 2.5""
            />
        </svg>
    );
}","import type { SVGProps } from ""react"";

export const ArrowRightBroken: React.FC<SVGProps<SVGSVGElement>> = (props: SVGProps<SVGSVGElement>) => {
    return (
        <svg
            xmlns=""http://www.w3.org/2000/svg""
            className=""w-4 h-4""
            viewBox=""0 0 24 24""
            {...props}
        >
            <title>Arrow Right Down Broken</title>
            <path
                fill=""none""
                stroke=""currentColor""
                strokeLinecap=""round""
                strokeLinejoin=""round""
                strokeWidth=""1.5""
                d=""M18 18H9m9 0V9m0 9l-6.5-6.5M6 6l2.5 2.5""
            />
        </svg>
    );
}",This is a functional component representing a Shadcn Icon that accepts all SVG properties and an optional title. It uses Tailwind CSS to apply styles.
icons,compass,"import * as React from ""react"";
import type { SVGProps } from ""react"";

const ReactIcon = (props: SVGProps<SVGSVGElement>) => (
    <svg
        viewBox=""0 0 256 228""
        width=""1em""
        height=""1em""
        xmlns=""http://www.w3.org/2000/svg""
        preserveAspectRatio=""xMidYMid""
        {...props}
    >
        <path
            d=""M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621 6.238-30.281 2.16-54.676-11.769-62.708-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848 155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233 50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165 167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266 13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923 168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586 13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488 29.348-9.723 48.443-25.443 48.443-41.52 0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345-3.24-10.257-7.612-21.163-12.963-32.432 5.106-11 9.31-21.767 12.459-31.957 2.619.758 5.16 1.557 7.61 2.4 23.69 8.156 38.14 20.213 38.14 29.504 0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787-1.524 8.219-4.59 13.698-8.382 15.893-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246 12.376-1.098 24.068-2.894 34.671-5.345.522 2.107.986 4.173 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994 7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863-6.35-5.437-9.555-10.836-9.555-15.216 0-9.322 13.897-21.212 37.076-29.293 2.813-.98 5.757-1.905 8.812-2.773 3.204 10.42 7.406 21.315 12.477 32.332-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789 8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152 7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793 2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433 4.902.192 9.899.29 14.978.29 5.218 0 10.376-.117 15.453-.343-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026 347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815 329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627 310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695 358.489 358.489 0 0 1 11.036 20.54 329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026-.344 1.668-.73 3.367-1.15 5.09-10.622-2.452-22.155-4.275-34.23-5.408-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86-22.86-10.235-22.86-22.86 10.235-22.86 22.86-22.86Z""
            fill=""#00D8FF""
        />
    </svg>
);
export default ReactIcon;","import React, { SVGProps } from ""react"";

interface Props extends SVGProps<SVGSVGElement> {}

const ReactIcon: React.FC<Props> = (props: Props) => (
  <svg
    viewBox=""0 0 256 228""
    className=""w-4 h-4""
    xmlns=""http://www.w3.org/2000/svg""
    preserveAspectRatio=""xMidYMid""
    {...props}
  >
    <path
      d=""M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621 6.238-30.281 2.16-54.676-11.769-62.708-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848 155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233 50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165 167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266 13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923 168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586 13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488 29.348-9.723 48.443-25.443 48.443-41.52 0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345-3.24-10.257-7.612-21.163-12.963-32.432 5.106-11 9.31-21.767 12.459-31.957 2.619.758 5.16 1.557 7.61 2.4 23.69 8.156 38.14 20.213 38.14 29.504 0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787-1.524 8.219-4.59 13.698-8.382 15.893-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246 12.376-1.098 24.068-2.894 34.671-5.345.522 2.107.986 4.173 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994 7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863-6.35-5.437-9.555-10.836-9.555-15.216 0-9.322 13.897-21.212 37.076-29.293 2.813-.98 5.757-1.905 8.812-2.773 3.204 10.42 7.406 21.315 12.477 32.332-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789 8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152 7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793 2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433 4.902.192 9.899.29 14.978.29 5.218 0 10.376-.117 15.453-.343-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026 347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815 329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627 310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695 358.489 358.489 0 0 1 11.036 20.54 329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026-.344 1.668-.73 3.367-1.15 5.09-10.622-2.452-22.155-4.275-34.23-5.408-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86-22.86-10.235-22.86-22.86 10.235-22.86 22.86-22.86Z""
      fill=""#00D8FF""
    />
  </svg>
);
export default ReactIcon;",This component renders a compass icon using SVG and Tailwind CSS.
icons,arrow-right-broken,"import * as React from ""react"";
import type { SVGProps } from ""react"";
const v0 = (props: SVGProps<SVGSVGElement>) => (
    <svg
        height=""1em""
        xmlns=""http://www.w3.org/2000/svg""
        strokeLinejoin=""round""
        viewBox=""0 0 16 16""
        width=""1em""
        {...props}
    >
        <path
            clipRule=""evenodd""
            d=""M9.50321 5.5H13.2532C13.3123 5.5 13.3704 5.5041 13.4273 5.51203L9.51242 9.42692C9.50424 9.36912 9.5 9.31006 9.5 9.25L9.5 5.5L8 5.5L8 9.25C8 10.7688 9.23122 12 10.75 12H14.5V10.5L10.75 10.5C10.6899 10.5 10.6309 10.4958 10.5731 10.4876L14.4904 6.57028C14.4988 6.62897 14.5032 6.68897 14.5032 6.75V10.5H16.0032V6.75C16.0032 5.23122 14.772 4 13.2532 4H9.50321V5.5ZM0 5V5.00405L5.12525 11.5307C5.74119 12.3151 7.00106 11.8795 7.00106 10.8822V5H5.50106V9.58056L1.90404 5H0Z""
            fill=""white""
            fillRule=""evenodd""
        />
    </svg>
);
export default v0;","import React, { SVGProps, FC } from ""react"";

interface IV0Props extends SVGProps<SVGSVGElement> {}

const V0: FC<IV0Props> = (props: IV0Props) => (
    <svg
        className=""h-5 w-5""
        xmlns=""http://www.w3.org/2000/svg""
        strokeLinejoin=""round""
        viewBox=""0 0 16 16""
        {...props}
    >
        <path
            className=""fill-current text-white""
            clipRule=""evenodd""
            d=""M9.50321 5.5H13.2532C13.3123 5.5 13.3704 5.5041 13.4273 5.51203L9.51242 9.42692C9.50424 9.36912 9.5 9.31006 9.5 9.25L9.5 5.5L8 5.5L8 9.25C8 10.7688 9.23122 12 10.75 12H14.5V10.5L10.75 10.5C10.6899 10.5 10.6309 10.4958 10.5731 10.4876L14.4904 6.57028C14.4988 6.62897 14.5032 6.68897 14.5032 6.75V10.5H16.0032V6.75C16.0032 5.23122 14.772 4 13.2532 4H9.50321V5.5ZM0 5V5.00405L5.12525 11.5307C5.74119 12.3151 7.00106 11.8795 7.00106 10.8822V5H5.50106V9.58056L1.90404 5H0Z""
            fillRule=""evenodd""
        />
    </svg>
);

export default V0;",This component renders an SVG icon of a broken right arrow with a downward direction. It follows Tailwind CSS best practices with size set to 1em (16px) using the `w-4` and `h-4` classes.
icons,react,"""use client"";

import { useState } from ""react"";
import { usePathname } from ""next/navigation"";
import type { NavSection } from ""@/config/navigation"";
import { DesktopNav } from ""./desktop-nav"";
import { MobileNav } from ""./mobile-nav"";

interface ComponentNavProps {
    sections: NavSection[];
}

export default function ComponentNav({ sections }: ComponentNavProps) {
    const pathname = usePathname();
    const [isExpanded, setIsExpanded] = useState(false);

    const totalItems = sections.reduce(
        (acc, section) => acc + section.items.length,
        0
    );

    const currentPage = sections
        .flatMap((section) => section.items)
        .find((item) => {
            if (item.href === ""/docs"") {
                return (
                    pathname === ""/docs"" || pathname === ""/docs/introduction""
                );
            }
            if (item.href === ""/docs/components/block/"") {
                return pathname.startsWith(""/docs/components/block"");
            }
            if (item.href.includes(""/docs/components/"")) {
                return pathname === item.href;
            }
            return pathname === item.href;
        });

    const handleExpandToggle = () => setIsExpanded(!isExpanded);
    const handleItemClick = () => setIsExpanded(false);

    return (
        <>
            <DesktopNav sections={sections} pathname={pathname} />
            <MobileNav
                sections={sections}
                pathname={pathname}
                isExpanded={isExpanded}
                currentPage={currentPage}
                totalItems={totalItems}
                onExpandToggle={handleExpandToggle}
                onItemClick={handleItemClick}
            />
        </>
    );
}","""use strict"";

import { useState } from ""react"";
import { useRouter } from 'next/router';
import type { NavSection } from ""@/types/navigation"";
import { DesktopNav } from ""./DesktopNav"";
import { MobileNav } from ""./MobileNav"";

interface ComponentNavProps {
    sections: NavSection[];
}

const ComponentNav: React.FC<ComponentNavProps> = ({ sections }) => {
    const { pathname } = useRouter();
    const [isExpanded, setIsExpanded] = useState<boolean>(false);

    const totalItems = sections.reduce(
        (acc, section) => acc + section.items.length,
        0
    );

    const currentPage = sections
        .flatMap((section) => section.items)
        .find((item) => {
            if (item.href === ""/docs"") {
                return (
                    pathname === ""/docs"" || pathname === ""/docs/introduction""
                );
            }
            if (item.href === ""/docs/components/block/"") {
                return pathname.startsWith(""/docs/components/block"");
            }
            if (item.href.includes(""/docs/components/"")) {
                return pathname === item.href;
            }
            return pathname === item.href;
        });

    const handleExpandToggle = (): void => setIsExpanded(!isExpanded);
    const handleItemClick = (): void => setIsExpanded(false);

    return (
        <>
            <DesktopNav sections={sections} pathname={pathname} />
            <MobileNav
                sections={sections}
                pathname={pathname}
                isExpanded={isExpanded}
                currentPage={currentPage}
                totalItems={totalItems}
                onExpandToggle={handleExpandToggle}
                onItemClick={handleItemClick}
            />
        </>
    );
}

export default ComponentNav;",This is a SVG icon component for the React logo.
icons,v0,"import Link from ""next/link"";
import { cn } from ""@/lib/utils"";
import { X } from ""lucide-react"";
import type { NavSection } from ""@/config/navigation"";

interface MobileNavProps {
    sections: NavSection[];
    pathname: string;
    isExpanded: boolean;
    currentPage?: { title: string };
    totalItems: number;
    onExpandToggle: () => void;
    onItemClick: () => void;
}

export function MobileNav({
    sections,
    pathname,
    isExpanded,
    currentPage,
    totalItems,
    onExpandToggle,
    onItemClick,
}: MobileNavProps) {
    return (
        <div className=""md:hidden fixed bottom-0 left-0 right-0 z-50 flex justify-center items-end px-4 pb-6"">
            {isExpanded && (
                <div
                    className=""fixed inset-0 bg-black/20 dark:bg-black/40 backdrop-blur-xs transition-opacity duration-300 ease-in-out""
                    onClick={onExpandToggle}
                />
            )}

            <div
                className={cn(
                    ""max-w-lg transition-all duration-300 ease-in-out"",
                    ""bg-linear-to-b from-white/95 via-gray-50/95 to-white/95"",
                    ""dark:from-zinc-900/90 dark:via-zinc-800/90 dark:to-zinc-900/90"",
                    ""shadow-[0_2px_20px_-2px_rgba(0,0,0,0.15)]"",
                    ""backdrop-blur-md cursor-pointer"",
                    ""border border-[rgba(200,200,200,0.8)] dark:border-[rgba(70,70,70,0.7)]"",
                    isExpanded
                        ? ""h-[80vh] rounded-[28px] w-full""
                        : ""h-12 rounded-[28px] w-1/2""
                )}
                onClick={() => !isExpanded && onExpandToggle()}
            >
                {isExpanded ? (
                    <div className=""h-full flex flex-col"">
                        <div className=""flex-1 overflow-y-auto px-4 py-2"">
                            {sections.map((section) => (
                                <div key={section.title} className=""mb-6"">
                                    <h3 className=""text-sm font-medium text-zinc-900 dark:text-zinc-100 mb-2"">
                                        {section.title}
                                    </h3>
                                    <div className=""space-y-1"">
                                        {section.items.map((item) => {
                                            const isActive =
                                                item.href === ""/docs""
                                                    ? pathname === ""/docs"" ||
                                                      pathname ===
                                                          ""/docs/introduction""
                                                    : item.href ===
                                                      ""/docs/components/block/""
                                                    ? pathname.startsWith(
                                                          ""/docs/components/block""
                                                      )
                                                    : pathname === item.href;
                                            return (
                                                <Link
                                                    key={item.id}
                                                    href={
                                                        item.isComingSoon
                                                            ? ""#""
                                                            : item.href
                                                    }
                                                    onClick={onItemClick}
                                                    className={cn(
                                                        ""flex items-center justify-between px-3 py-2 rounded-md"",
                                                        item.isComingSoon
                                                            ? ""opacity-70 cursor-not-allowed""
                                                            : isActive
                                                            ? item.isLab
                                                                ? ""bg-purple-500/10 text-purple-700 dark:text-purple-300""
                                                                : ""bg-zinc-900 dark:bg-white""
                                                            : ""hover:bg-black/5 dark:hover:bg-white/5""
                                                    )}
                                                >
                                                    <span
                                                        className={cn(
                                                            ""text-sm font-medium"",
                                                            isActive
                                                                ? item.isLab
                                                                    ? ""text-purple-700 dark:text-purple-300""
                                                                    : ""text-white dark:text-zinc-900""
                                                                : ""text-zinc-600 dark:text-zinc-400""
                                                        )}
                                                    >
                                                        {item.title}
                                                        {item.isNew &&
                                                            !isActive && (
                                                                <span className=""ml-2 rounded-lg inline-flex items-center px-2 py-0.5 text-[9px] tracking-wide font-medium uppercase bg-linear-to-r from-emerald-400/5 via-emerald-500/5 to-teal-500/5 text-emerald-600 dark:text-emerald-400 ring-1 ring-emerald-500/20 dark:ring-emerald-400/20"">
                                                                    new
                                                                </span>
                                                            )}
                                                        {item.isLab &&
                                                            !isActive && (
                                                                <span className=""ml-2 rounded-xl inline-flex items-center px-2 py-0.5 text-[9px] tracking-wide font-medium uppercase bg-linear-to-r from-purple-400/5 via-purple-500/5 to-purple-500/5 text-purple-600 dark:text-purple-400 ring-1 ring-purple-500/20 dark:ring-purple-400/20"">
                                                                    lab
                                                                </span>
                                                            )}
                                                    </span>
                                                    {item.count && (
                                                        <span className=""text-xs text-zinc-400"">
                                                            {item.count}
                                                        </span>
                                                    )}
                                                </Link>
                                            );
                                        })}
                                    </div>
                                </div>
                            ))}
                        </div>

                        <div className=""p-4 border-t border-zinc-200 dark:border-zinc-800"">
                            <button
                                type=""button""
                                onClick={(e) => {
                                    e.stopPropagation();
                                    onExpandToggle();
                                }}
                                className=""w-full flex items-center justify-center p-3 rounded-lg hover:bg-black/5 dark:hover:bg-white/5""
                            >
                                <X className=""w-4 h-4 text-zinc-500 dark:text-zinc-400"" />
                            </button>
                        </div>
                    </div>
                ) : (
                    <div className=""flex items-center justify-center h-full gap-1"">
                        <span className=""text-sm font-medium text-zinc-900 dark:text-zinc-100 truncate text-center"">
                            {currentPage?.title}
                        </span>
                        <span className=""text-xs text-zinc-500 dark:text-zinc-400"">
                            {totalItems}
                        </span>
                    </div>
                )}
            </div>
        </div>
    );
}","import Link from ""next/link"";
import { X } from ""lucide-react"";
import type { NavSection } from ""@/config/navigation"";

interface MobileNavProps {
    sections: NavSection[];
    pathname: string;
    isExpanded: boolean;
    currentPage?: { title: string };
    totalItems: number;
    onExpandToggle: () => void;
    onItemClick: () => void;
}

export const MobileNav: React.FC<MobileNavProps> = ({
    sections,
    pathname,
    isExpanded,
    currentPage,
    totalItems,
    onExpandToggle,
    onItemClick,
}) => {
    return (
        <div className=""md:hidden fixed bottom-0 left-0 right-0 z-50 flex justify-center items-end px-4 pb-6"">
            {isExpanded && (
                <div
                    className=""fixed inset-0 bg-black/20 dark:bg-black/40 backdrop-blur-xs transition-opacity duration-300 ease-in-out""
                    onClick={onExpandToggle}
                />
            )}

            <div
                className={`max-w-lg transition-all duration-300 ease-in-out 
                ${isExpanded ? ""h-[80vh] rounded-[28px] w-full"" : ""h-12 rounded-[28px] w-1/2""}
                bg-linear-to-b from-white/95 via-gray-50/95 to-white/95 
                dark:from-zinc-900/90 dark:via-zinc-800/90 dark:to-zinc-900/90 
                shadow-[0_2px_20px_-2px_rgba(0,0,0,0.15)] 
                backdrop-blur-md cursor-pointer 
                border border-[rgba(200,200,200,0.8)] dark:border-[rgba(70,70,70,0.7)]`}
                onClick={() => !isExpanded && onExpandToggle()}
            >
                {isExpanded ? (
                    <div className=""h-full flex flex-col"">
                        <div className=""flex-1 overflow-y-auto px-4 py-2"">
                            {sections.map((section) => (
                                <div key={section.title} className=""mb-6"">
                                    <h3 className=""text-sm font-medium text-zinc-900 dark:text-zinc-100 mb-2"">
                                        {section.title}
                                    </h3>
                                    <div className=""space-y-1"">
                                        {section.items.map((item) => {
                                            const isActive =
                                                item.href === ""/docs""
                                                    ? pathname === ""/docs"" ||
                                                      pathname ===
                                                          ""/docs/introduction""
                                                    : item.href ===
                                                      ""/docs/components/block/""
                                                    ? pathname.startsWith(
                                                          ""/docs/components/block""
                                                      )
                                                    : pathname === item.href;
                                            return (
                                                <Link
                                                    key={item.id}
                                                    href={
                                                        item.isComingSoon
                                                            ? ""#""
                                                            : item.href
                                                    }
                                                    onClick={onItemClick}
                                                    className={`${isActive
                                                        ? item.isLab
                                                            ? ""bg-purple-500/10 text-purple-700 dark:text-purple-300""
                                                            : ""bg-zinc-900 dark:bg-white""
                                                        : ""hover:bg-black/5 dark:hover:bg-white/5""
                                                    } flex items-center justify-between px-3 py-2 rounded-md ${item.isComingSoon ? ""opacity-70 cursor-not-allowed"" : """"}`}
                                                >
                                                    <span
                                                        className={cn(
                                                            ""text-sm font-medium"",
                                                            isActive
                                                                ? item.isLab
                                                                    ? ""text-purple-700 dark:text-purple-300""
                                                                    : ""text-white dark:text-zinc-900""
                                                                : ""text-zinc-600 dark:text-zinc-400""
                                                        )}
                                                    >
                                                        {item.title}
                                                        {item.isNew &&
                                                            !isActive && (
                                                                <span className=""ml-2 rounded-lg inline-flex items-center px-2 py-0.5 text-[9px] tracking-wide font-medium uppercase bg-linear-to-r from-emerald-400/5 via-emerald-500/5 to-teal-500/5 text-emerald-600 dark:text-emerald-400 ring-1 ring-emerald-500/20 dark:ring-emerald-400/20"">
                                                                    new
                                                                </span>
                                                            )}
                                                        {item.isLab &&
                                                            !isActive && (
                                                                <span className=""ml-2 rounded-xl inline-flex items-center px-2 py-0.5 text-[9px] tracking-wide font-medium uppercase bg-linear-to-r from-purple-400/5 via-purple-500/5 to-purple-500/5 text-purple-600 dark:text-purple-400 ring-1 ring-purple-500/20 dark:ring-purple-400/20"">
                                                                    lab
                                                                </span>
                                                            )}
                                                    </span>
                                                    {item.count && (
                                                        <span className=""text-xs text-zinc-400"">
                                                            {item.count}
                                                        </span>
                                                    )}
                                                </Link>
                                            );
                                        })}
                                    </div>
                                </div>
                            ))}
                        </div>

                        <div className=""p-4 border-t border-zinc-200 dark:border-zinc-800"">
                            <button
                                type=""button""
                                onClick={(e) => {
                                    e.stopPropagation();
                                    onExpandToggle();
                                }}
                                className=""w-full flex items-center justify-center p-3 rounded-lg hover:bg-black/5 dark:hover:bg-white/5""
                            >
                                <X className=""w-4 h-4 text-zinc-500 dark:text-zinc-400"" />
                            </button>
                        </div>
                    </div>
                ) : (
                    <div className=""flex items-center justify-center h-full gap-1"">
                        <span className=""text-sm font-medium text-zinc-900 dark:text-zinc-100 truncate text-center"">
                            {currentPage?.title}
                        </span>
                        <span className=""text-xs text-zinc-500 dark:text-zinc-400"">
                            {totalItems}
                        </span>
                    </div>
                )}
            </div>
        </div>
    );
}","This is a functional React component for an SVG icon, customized with Tailwind CSS classes for size and color."
nav,index,"import Link from ""next/link"";
import { cn } from ""@/lib/utils"";
import type { NavSection } from ""@/config/navigation"";

interface DesktopNavProps {
    sections: NavSection[];
    pathname: string;
}

export function DesktopNav({ sections, pathname }: DesktopNavProps) {
    return (
        <div className=""hidden md:block w-full z-40 space-y-4"">
            <div
                className=""bg-linear-to-b from-white/95 via-gray-50/95 to-white/95
                    dark:from-zinc-900/90 dark:via-zinc-800/90 dark:to-zinc-900/90
                    shadow-[0_2px_20px_-2px_rgba(0,0,0,0.15)]
                    backdrop-blur-md
                    border border-[rgba(200,200,200,0.8)] dark:border-[rgba(70,70,70,0.7)]
                    rounded-[28px] p-3""
            >
                {sections.map((section, index) => (
                    <div
                        key={section.title}
                        className={cn(index > 0 && ""mt-6"")}
                    >
                        <div className=""flex items-center justify-between mb-2"">
                            <h2 className=""text-sm font-medium text-zinc-900 dark:text-zinc-100"">
                                {section.title}
                            </h2>
                        </div>

                        <nav className=""space-y-0.5"">
                            {section.items.map((item) => {
                                const isActive =
                                    item.href === ""/docs""
                                        ? pathname === ""/docs"" ||
                                          pathname === ""/docs/introduction""
                                        : item.href ===
                                          ""/docs/components/block/""
                                        ? pathname.startsWith(
                                              ""/docs/components/block""
                                          )
                                        : pathname === item.href;
                                return (
                                    <Link
                                        key={item.id}
                                        href={
                                            item.isComingSoon ? ""#"" : item.href
                                        }
                                        className={cn(
                                            ""group flex items-center justify-between px-2.5 py-1.5 rounded-xl"",
                                            ""transition-all duration-200"",
                                            item.isComingSoon
                                                ? ""opacity-70 cursor-not-allowed bg-transparent""
                                                : isActive
                                                ? item.isLab
                                                    ? ""bg-purple-500/10 text-purple-700 dark:text-purple-300""
                                                    : ""bg-zinc-900 dark:bg-white text-white dark:text-zinc-900""
                                                : ""hover:bg-black/5 dark:hover:bg-white/5""
                                        )}
                                    >
                                        <span
                                            className={cn(
                                                ""text-sm font-medium flex items-center gap-2"",
                                                isActive
                                                    ? item.isLab
                                                        ? ""text-purple-700 dark:text-purple-300""
                                                        : ""text-white dark:text-zinc-900""
                                                    : ""text-zinc-600 dark:text-zinc-400""
                                            )}
                                        >
                                            {isActive && (
                                                <span className=""text-[10px] opacity-70"">
                                                    â†’
                                                </span>
                                            )}
                                            {item.title}
                                            {item.isNew && !isActive && (
                                                <span className=""rounded-lg inline-flex items-center px-2 py-0.5 text-[9px] tracking-wide font-medium uppercase bg-linear-to-r from-emerald-400/5 via-emerald-500/5 to-teal-500/5 text-emerald-600 dark:text-emerald-400 ring-1 ring-emerald-500/20 dark:ring-emerald-400/20 shadow-[0_0_10px_-3px_rgba(16,185,129,0.15)] dark:shadow-[0_0_10px_-3px_rgba(16,185,129,0.2)]"">
                                                    new
                                                </span>
                                            )}
                                            {item.isLab && !isActive && (
                                                <span className=""rounded-lg inline-flex items-center px-2 py-0.5 text-[9px] tracking-wide font-medium uppercase bg-linear-to-r from-purple-400/5 via-purple-500/5 to-purple-500/5 text-purple-600 dark:text-purple-400 ring-1 ring-purple-500/20 dark:ring-purple-400/20 shadow-[0_0_10px_-3px_rgba(147,51,234,0.15)] dark:shadow-[0_0_10px_-3px_rgba(147,51,234,0.2)]"">
                                                    lab
                                                </span>
                                            )}
                                        </span>
                                        {item.count && (
                                            <span
                                                className={cn(
                                                    ""text-xs"",
                                                    isActive
                                                        ? ""text-white/70 dark:text-zinc-900/70""
                                                        : ""text-zinc-400 dark:text-zinc-500""
                                                )}
                                            >
                                                {item.count}
                                            </span>
                                        )}
                                    </Link>
                                );
                            })}
                        </nav>
                    </div>
                ))}
            </div>
        </div>
    );
}","import Link from ""next/link"";
import { FC } from 'react';
import { cn } from ""@/lib/utils"";
import type { NavSection } from ""@/config/navigation"";

interface DesktopNavProps {
    sections: NavSection[];
    pathname: string;
}

export const DesktopNav: FC<DesktopNavProps> = ({ sections, pathname }) => (
    <div className=""hidden md:block w-full z-40 space-y-4"">
        {sections.map((section, index) => (
            <div
                key={section.title}
                className={cn(
                    ""bg-linear-to-b from-white/95 via-gray-50/95 to-white/95 dark:from-zinc-900/90 dark:via-zinc-800/90 dark:to-zinc-900/90 shadow-[0_2px_20px_-2px_rgba(0,0,0,0.15)] backdrop-blur-md border border-[rgba(200,200,200,0.8)] dark:border-[rgba(70,70,70,0.7)] rounded-[28px] p-3"",
                    index > 0 && ""mt-6""
                )}
            >
                <div className=""flex items-center justify-between mb-2"">
                    <h2 className=""text-sm font-medium text-zinc-900 dark:text-zinc-100"">
                        {section.title}
                    </h2>
                </div>

                <nav className=""space-y-0.5"">
                    {section.items.map((item) => {
                        const isActive =
                            item.href === ""/docs""
                                ? pathname === ""/docs"" ||
                                  pathname === ""/docs/introduction""
                                : item.href ===
                                  ""/docs/components/block/""
                                ? pathname.startsWith(
                                      ""/docs/components/block""
                                  )
                                : pathname === item.href;

                        return (
                            <Link
                                key={item.id}
                                href={
                                    item.isComingSoon ? ""#"" : item.href
                                }
                            >
                                <a 
                                    className={cn(
                                        ""group flex items-center justify-between px-2.5 py-1.5 rounded-xl transition-all duration-200"",
                                        item.isComingSoon
                                            ? ""opacity-70 cursor-not-allowed bg-transparent""
                                            : isActive
                                            ? item.isLab
                                                ? ""bg-purple-500/10 text-purple-700 dark:text-purple-300""
                                                : ""bg-zinc-900 dark:bg-white text-white dark:text-zinc-900""
                                            : ""hover:bg-black/5 dark:hover:bg-white/5""
                                    )}
                                >
                                    {/* ... */}
                                </a>
                            </Link>
                        );
                    })}
                </nav>
            </div>
        ))}
    </div>
);",This is a navigation component that switches between a mobile and desktop view based on the viewport size. It also has a dropdown menu for mobile view. The component uses the next/router library to retrieve the current path and adjust the navigation accordingly.
nav,mobile-nav,"""use client"";

import { useState } from ""react"";
import { Textarea } from ""@/components/ui/textarea"";
import { cn } from ""@/lib/utils"";
import { useAutoResizeTextarea } from ""@/hooks/use-auto-resize-textarea"";
import {
    ImageIcon,
    FileUp,
    Figma,
    MonitorIcon,
    CircleUserRound,
    ArrowUpIcon,
    Paperclip,
    PlusIcon,
} from ""lucide-react"";

export function VercelV0Chat() {
    const [value, setValue] = useState("""");
    const { textareaRef, adjustHeight } = useAutoResizeTextarea({
        minHeight: 60,
        maxHeight: 200,
    });

    const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
        if (e.key === ""Enter"" && !e.shiftKey) {
            e.preventDefault();
            if (value.trim()) {
                setValue("""");
                adjustHeight(true);
            }
        }
    };

    return (
        <div className=""flex flex-col items-center w-full max-w-4xl mx-auto p-4 space-y-4 sm:space-y-8"">
            <h1 className=""text-2xl sm:text-4xl font-bold text-black dark:text-white text-center"">
                What can I help you ship?
            </h1>

            <div className=""w-full"">
                <div className=""relative bg-neutral-900 rounded-xl border border-neutral-800"">
                    <div className=""overflow-y-auto"">
                        <Textarea
                            ref={textareaRef}
                            value={value}
                            onChange={(e) => {
                                setValue(e.target.value);
                                adjustHeight();
                            }}
                            onKeyDown={handleKeyDown}
                            placeholder=""Ask v0 a question...""
                            className={cn(
                                ""w-full px-4 py-3"",
                                ""resize-none"",
                                ""bg-transparent"",
                                ""border-none"",
                                ""text-white text-sm"",
                                ""focus:outline-none"",
                                ""focus-visible:ring-0 focus-visible:ring-offset-0"",
                                ""placeholder:text-neutral-500 placeholder:text-sm"",
                                ""min-h-[60px]""
                            )}
                            style={{
                                overflow: ""hidden"",
                            }}
                        />
                    </div>

                    <div className=""flex items-center justify-between p-3"">
                        <div className=""flex items-center gap-2"">
                            <button
                                type=""button""
                                className=""group p-2 hover:bg-neutral-800 rounded-lg transition-colors flex items-center gap-1""
                            >
                                <Paperclip className=""w-4 h-4 text-white"" />
                                <span className=""text-xs text-zinc-400 hidden group-hover:inline transition-opacity"">
                                    Attach
                                </span>
                            </button>
                        </div>
                        <div className=""flex items-center gap-2"">
                            <button
                                type=""button""
                                className=""px-2 py-1 rounded-lg text-sm text-zinc-400 transition-colors border border-dashed border-zinc-700 hover:border-zinc-600 hover:bg-zinc-800 flex items-center justify-between gap-1""
                            >
                                <PlusIcon className=""w-4 h-4"" />
                                Project
                            </button>
                            <button
                                type=""button""
                                className={cn(
                                    ""px-1.5 py-1.5 rounded-lg text-sm transition-colors border border-zinc-700 hover:border-zinc-600 hover:bg-zinc-800 flex items-center justify-between gap-1"",
                                    value.trim()
                                        ? ""bg-white text-black""
                                        : ""text-zinc-400""
                                )}
                            >
                                <ArrowUpIcon
                                    className={cn(
                                        ""w-4 h-4"",
                                        value.trim()
                                            ? ""text-black""
                                            : ""text-zinc-400""
                                    )}
                                />
                                <span className=""sr-only"">Send</span>
                            </button>
                        </div>
                    </div>
                </div>

                <div className=""mt-4 -mx-4 px-4 sm:mx-0 sm:px-0"">
                    <div className=""flex flex-col sm:flex-row items-start sm:items-center gap-2 sm:gap-3 sm:overflow-x-auto sm:pb-2 sm:justify-center scrollbar-hide"">
                        <ActionButton
                            icon={<ImageIcon className=""w-4 h-4"" />}
                            label=""Clone a Screenshot""
                        />
                        <ActionButton
                            icon={<Figma className=""w-4 h-4"" />}
                            label=""Import from Figma""
                        />
                        <ActionButton
                            icon={<FileUp className=""w-4 h-4"" />}
                            label=""Upload a Project""
                        />
                        <ActionButton
                            icon={<MonitorIcon className=""w-4 h-4"" />}
                            label=""Landing Page""
                        />
                        <ActionButton
                            icon={<CircleUserRound className=""w-4 h-4"" />}
                            label=""Sign Up Form""
                        />
                    </div>
                </div>
            </div>
        </div>
    );
}

interface ActionButtonProps {
    icon: React.ReactNode;
    label: string;
}

function ActionButton({ icon, label }: ActionButtonProps) {
    return (
        <button
            type=""button""
            className=""flex items-center gap-2 w-full sm:w-auto px-3 sm:px-4 py-2 bg-neutral-900 hover:bg-neutral-800 rounded-full border border-neutral-800 text-neutral-400 hover:text-white transition-colors whitespace-nowrap flex-shrink-0""
        >
            {icon}
            <span className=""text-xs"">{label}</span>
        </button>
    );
}

export default VercelV0Chat;","import { useState, KeyboardEvent, RefObject, ReactNode, CSSProperties } from 'react';
import { useAutoResizeTextarea } from '@/hooks/use-autoResizeTextarea';
import {
    ImageIcon,
    FileUp,
    Figma,
    MonitorIcon,
    CircleUserRound,
    ArrowUpIcon,
    Paperclip,
    PlusIcon,
} from 'lucide-react';

interface ActionButtonProps {
    icon: ReactNode;
    label: string;
}

const ActionButton = ({ icon, label }: ActionButtonProps): JSX.Element => (
    <button
        type=""button""
        className=""flex items-center gap-2 w-full sm:w-auto px-3 sm:px-4 py-2 bg-neutral-900 hover:bg-neutral-800 rounded-full border border-neutral-800 text-neutral-400 hover:text-white transition-colors whitespace-nowrap flex-shrink-0""
    >
        {icon}
        <span className=""text-xs"">{label}</span>
    </button>
);

interface TextareaProps {
    ref: RefObject<HTMLTextAreaElement>;
    value: string;
    onChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;
    onKeyDown: (e: KeyboardEvent<HTMLTextAreaElement>) => void;
    placeholder: string;
    className: string;
    style: CSSProperties;
}

const Textarea = (props: TextareaProps): JSX.Element => <textarea {...props} />;

const VercelV0Chat = (): JSX.Element => {
    const [value, setValue] = useState<string>("");
    const { textareaRef, adjustHeight } = useAutoResizeTextarea({
        minHeight: 60,
        maxHeight: 200,
    });

    const handleKeyDown = (e: KeyboardEvent<HTMLTextAreaElement>): void => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            if (value.trim()) {
                setValue("");
                adjustHeight(true);
            }
        }
    };

    return (
        <div className=""flex flex-col items-center w-full max-w-4xl mx-auto p-4 space-y-4 sm:space-y-8"">
            <h1 className=""text-2xl sm:text-4xl font-bold text-black dark:text-white text-center"">
                What can I help you ship?
            </h1>
            <div className=""w-full"">
                <div className=""relative bg-neutral-900 rounded-xl border border-neutral-800"">
                    <div className=""overflow-y-auto"">
                        <Textarea
                            ref={textareaRef}
                            value={value}
                            onChange={(e) => {
                                setValue(e.target.value);
                                adjustHeight();
                            }}
                            onKeyDown={handleKeyDown}
                            placeholder=""Ask v0 a question...""
                            className={`w-full px-4 py-3 resize-none bg-transparent border-none text-white text-sm focus:outline-none focus-visible:ring-0 focus-visible:ring-offset-0 placeholder:text-neutral-500 placeholder:text-sm min-h-[60px]`}
                            style={{
                                overflow: 'hidden',
                            }}
                        />
                    </div>
                    <div className=""flex items-center justify-between p-3"">
                        <div className=""flex items-center gap-2"">
                            <button
                                type=""button""
                                className=""group p-2 hover:bg-neutral-800 rounded-lg transition-colors flex items-center gap-1""
                            >
                                <Paperclip className=""w-4 h-4 text-white"" />
                                <span className=""text-xs text-zinc-400 hidden group-hover:inline transition-opacity"">
                                    Attach
                                </span>
                            </button>
                        </div>
                        <div className=""flex items-center gap-2"">
                            <button
                                type=""button""
                                className=""px-2 py-1 rounded-lg text-sm text-zinc-400 transition-colors border border-dashed border-zinc-700 hover:border-zinc-600 hover:bg-zinc-800 flex items-center justify-between gap-1""
                            >
                                <PlusIcon className=""w-4 h-4"" />
                                Project
                            </button>
                            <button
                                type=""button""
                                className={`px-1.5 py-1.5 rounded-lg text-sm transition-colors border border-zinc-700 hover:border-zinc-600 hover:bg-zinc-800 flex items-center justify-between gap-1 ${value.trim() ? 'bg-white text-black' : 'text-zinc-400'}`}
                            >
                                <ArrowUpIcon
                                    className={`w-4 h-4 ${value.trim() ? 'text-black' : 'text-zinc-400'}`}
                                />
                                <span className=""sr-only"">Send</span>
                            </button>
                        </div>
                    </div>
                </div>
                <div className=""mt-4 -mx-4 px-4 sm:mx-0 sm:px-0"">
                    <div className=""flex flex-col sm:flex-row items-start sm:items-center gap-2 sm:gap-3 sm:overflow-x-auto sm:pb-2 sm:justify-center scrollbar-hide"">
                        <ActionButton
                            icon={<ImageIcon className=""w-4 h-4"" />}
                            label=""Clone a Screenshot""
                        />
                        <ActionButton
                            icon={<Figma className=""w-4 h-4"" />}
                            label=""Import from Figma""
                        />
                        <ActionButton
                            icon={<FileUp className=""w-4 h-4"" />}
                            label=""Upload a Project""
                        />
                        <ActionButton
                            icon={<MonitorIcon className=""w-4 h-4"" />}
                            label=""Landing Page""
                        />
                        <ActionButton
                            icon={<CircleUserRound className=""w-4 h-4"" />}
                            label=""Sign Up Form""
                        />
                    </div>
                </div>
            </div>
        </div>
    );
};

export default VercelV0Chat;",This is a mobile navigation component built with Next.js Link and Lucide-react icons. It's styled with Tailwind CSS. The component is responsive and displays a navigation menu when expanded. It also shows the current page title and the total number of items in the menu when collapsed.
nav,desktop-nav,"""use client"";

import { motion } from ""motion/react"";
interface HandWrittenTitleProps {
    title?: string;
    subtitle?: string;
}

export default function HandWrittenTitle({
    title = ""Hand Written"",
    subtitle = ""Optional subtitle"",
}: HandWrittenTitleProps) {
    const draw = {
        hidden: { pathLength: 0, opacity: 0 },
        visible: {
            pathLength: 1,
            opacity: 1,
            transition: {
                pathLength: { duration: 2.5, ease: [0.43, 0.13, 0.23, 0.96] },
                opacity: { duration: 0.5 },
            },
        },
    };

    return (
        <div className=""relative w-full max-w-4xl mx-auto py-24"">
            <div className=""absolute inset-0"">
                <motion.svg
                    width=""100%""
                    height=""100%""
                    viewBox=""0 0 1200 600""
                    initial=""hidden""
                    animate=""visible""
                    className=""w-full h-full""
                >
                    <title>KokonutUI</title>
                    <motion.path
                        d=""M 950 90 
                           C 1250 300, 1050 480, 600 520
                           C 250 520, 150 480, 150 300
                           C 150 120, 350 80, 600 80
                           C 850 80, 950 180, 950 180""
                        fill=""none""
                        strokeWidth=""12""
                        stroke=""currentColor""
                        strokeLinecap=""round""
                        strokeLinejoin=""round""
                        variants={draw}
                        className=""text-black dark:text-white opacity-90""
                    />
                </motion.svg>
            </div>
            <div className=""relative text-center z-10 flex flex-col items-center justify-center"">
                <motion.h1
                    className=""text-4xl md:text-6xl text-black dark:text-white tracking-tighter flex items-center gap-2""
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: 0.5, duration: 0.8 }}
                >
                    {title}
                </motion.h1>
                {subtitle && (
                    <motion.p
                        className=""text-xl text-black/80 dark:text-white/80""
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        transition={{ delay: 1, duration: 0.8 }}
                    >
                        {subtitle}
                    </motion.p>
                )}
            </div>
        </div>
    );
}","import { motion } from ""framer-motion"";
import React from ""react"";

interface HandWrittenTitleProps {
    title?: string;
    subtitle?: string;
}

const HandWrittenTitle: React.FC<HandWrittenTitleProps> = ({
    title = ""Hand Written"",
    subtitle = ""Optional subtitle"",
}) => {
    const draw = {
        hidden: { pathLength: 0, opacity: 0 },
        visible: {
            pathLength: 1,
            opacity: 1,
            transition: {
                pathLength: { duration: 2.5, ease: [0.43, 0.13, 0.23, 0.96] },
                opacity: { duration: 0.5 },
            },
        },
    };

    return (
        <div className=""relative w-full max-w-4xl mx-auto py-24"">
            <div className=""absolute inset-0"">
                <motion.svg
                    width=""100%""
                    height=""100%""
                    viewBox=""0 0 1200 600""
                    initial=""hidden""
                    animate=""visible""
                    className=""w-full h-full""
                >
                    <title>KokonutUI</title>
                    <motion.path
                        d=""M 950 90 
                           C 1250 300, 1050 480, 600 520
                           C 250 520, 150 480, 150 300
                           C 150 120, 350 80, 600 80
                           C 850 80, 950 180, 950 180""
                        fill=""none""
                        strokeWidth=""12""
                        stroke=""currentColor""
                        strokeLinecap=""round""
                        strokeLinejoin=""round""
                        variants={draw}
                        className=""text-black dark:text-white opacity-90""
                    />
                </motion.svg>
            </div>
            <div className=""relative text-center z-10 flex flex-col items-center justify-center"">
                <motion.h1
                    className=""text-4xl md:text-6xl text-black dark:text-white tracking-tighter flex items-center gap-2""
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: 0.5, duration: 0.8 }}
                >
                    {title}
                </motion.h1>
                {subtitle && (
                    <motion.p
                        className=""text-xl text-black/80 dark:text-white/80""
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        transition={{ delay: 1, duration: 0.8 }}
                    >
                        {subtitle}
                    </motion.p>
                )}
            </div>
        </div>
    );
}

export default HandWrittenTitle;","This is a desktop navigation menu that lists several sections. Each section contains navigation items which can be active, upcoming, or belong to a lab. The items can also display a count. The navigation menu is hidden on mobile and becomes visible on larger screens."
kokonutui,vercel-v0-chat,"""use client"";

import { useEffect, useRef } from ""react"";
import { motion } from ""motion/react"";
import { cn } from ""@/lib/utils"";

interface AnimatedGradientBackgroundProps {
    className?: string;
    children?: React.ReactNode;
    intensity?: ""subtle"" | ""medium"" | ""strong"";
}

interface Beam {
    x: number;
    y: number;
    width: number;
    length: number;
    angle: number;
    speed: number;
    opacity: number;
    hue: number;
    pulse: number;
    pulseSpeed: number;
}

function createBeam(width: number, height: number): Beam {
    const angle = -35 + Math.random() * 10;
    return {
        x: Math.random() * width * 1.5 - width * 0.25,
        y: Math.random() * height * 1.5 - height * 0.25,
        width: 30 + Math.random() * 60,
        length: height * 2.5,
        angle: angle,
        speed: 0.6 + Math.random() * 1.2,
        opacity: 0.12 + Math.random() * 0.16,
        hue: 190 + Math.random() * 70,
        pulse: Math.random() * Math.PI * 2,
        pulseSpeed: 0.02 + Math.random() * 0.03,
    };
}

export default function BeamsBackground({
    className,
    intensity = ""strong"",
}: AnimatedGradientBackgroundProps) {
    const canvasRef = useRef<HTMLCanvasElement>(null);
    const beamsRef = useRef<Beam[]>([]);
    const animationFrameRef = useRef<number>(0);
    const MINIMUM_BEAMS = 20;

    const opacityMap = {
        subtle: 0.7,
        medium: 0.85,
        strong: 1,
    };

    useEffect(() => {
        const canvas = canvasRef.current;
        if (!canvas) return;

        const ctx = canvas.getContext(""2d"");
        if (!ctx) return;

        const updateCanvasSize = () => {
            const dpr = window.devicePixelRatio || 1;
            canvas.width = window.innerWidth * dpr;
            canvas.height = window.innerHeight * dpr;
            canvas.style.width = `${window.innerWidth}px`;
            canvas.style.height = `${window.innerHeight}px`;
            ctx.scale(dpr, dpr);

            const totalBeams = MINIMUM_BEAMS * 1.5;
            beamsRef.current = Array.from({ length: totalBeams }, () =>
                createBeam(canvas.width, canvas.height)
            );
        };

        updateCanvasSize();
        window.addEventListener(""resize"", updateCanvasSize);

        function resetBeam(beam: Beam, index: number, totalBeams: number) {
            if (!canvas) return beam;
            
            const column = index % 3;
            const spacing = canvas.width / 3;

            beam.y = canvas.height + 100;
            beam.x =
                column * spacing +
                spacing / 2 +
                (Math.random() - 0.5) * spacing * 0.5;
            beam.width = 100 + Math.random() * 100;
            beam.speed = 0.5 + Math.random() * 0.4;
            beam.hue = 190 + (index * 70) / totalBeams;
            beam.opacity = 0.2 + Math.random() * 0.1;
            return beam;
        }

        function drawBeam(ctx: CanvasRenderingContext2D, beam: Beam) {
            ctx.save();
            ctx.translate(beam.x, beam.y);
            ctx.rotate((beam.angle * Math.PI) / 180);

            // Calculate pulsing opacity
            const pulsingOpacity =
                beam.opacity *
                (0.8 + Math.sin(beam.pulse) * 0.2) *
                opacityMap[intensity];

            const gradient = ctx.createLinearGradient(0, 0, 0, beam.length);

            // Enhanced gradient with multiple color stops
            gradient.addColorStop(0, `hsla(${beam.hue}, 85%, 65%, 0)`);
            gradient.addColorStop(
                0.1,
                `hsla(${beam.hue}, 85%, 65%, ${pulsingOpacity * 0.5})`
            );
            gradient.addColorStop(
                0.4,
                `hsla(${beam.hue}, 85%, 65%, ${pulsingOpacity})`
            );
            gradient.addColorStop(
                0.6,
                `hsla(${beam.hue}, 85%, 65%, ${pulsingOpacity})`
            );
            gradient.addColorStop(
                0.9,
                `hsla(${beam.hue}, 85%, 65%, ${pulsingOpacity * 0.5})`
            );
            gradient.addColorStop(1, `hsla(${beam.hue}, 85%, 65%, 0)`);

            ctx.fillStyle = gradient;
            ctx.fillRect(-beam.width / 2, 0, beam.width, beam.length);
            ctx.restore();
        }

        function animate() {
            if (!canvas || !ctx) return;

            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.filter = ""blur(35px)"";

            const totalBeams = beamsRef.current.length;
            beamsRef.current.forEach((beam, index) => {
                beam.y -= beam.speed;
                beam.pulse += beam.pulseSpeed;

                // Reset beam when it goes off screen
                if (beam.y + beam.length < -100) {
                    resetBeam(beam, index, totalBeams);
                }

                drawBeam(ctx, beam);
            });

            animationFrameRef.current = requestAnimationFrame(animate);
        }

        animate();

        return () => {
            window.removeEventListener(""resize"", updateCanvasSize);
            if (animationFrameRef.current) {
                cancelAnimationFrame(animationFrameRef.current);
            }
        };
    }, [intensity]);

    return (
        <div
            className={cn(
                ""relative min-h-screen w-full overflow-hidden bg-neutral-950"",
                className
            )}
        >
            <canvas
                ref={canvasRef}
                className=""absolute inset-0""
                style={{ filter: ""blur(15px)"" }}
            />

            <motion.div
                className=""absolute inset-0 bg-neutral-950/5""
                animate={{
                    opacity: [0.05, 0.15, 0.05],
                }}
                transition={{
                    duration: 10,
                    ease: ""easeInOut"",
                    repeat: Number.POSITIVE_INFINITY,
                }}
                style={{
                    backdropFilter: ""blur(50px)"",
                }}
            />

            <div className=""relative z-10 flex h-screen w-full items-center justify-center"">
                <div className=""flex flex-col items-center justify-center gap-6 px-4 text-center"">
                    <motion.h1
                        className=""text-6xl md:text-7xl lg:text-8xl font-semibold text-white tracking-tighter""
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ duration: 0.8 }}
                    >
                        Beams
                        <br />
                        Background
                    </motion.h1>
                    <motion.p
                        className=""text-lg md:text-2xl lg:text-3xl text-white/70 tracking-tighter""
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ duration: 0.8 }}
                    >
                        For your pleasure
                    </motion.p>
                </div>
            </div>
        </div>
    );
}","import React, { useEffect, useRef } from ""react"";
import { motion } from ""framer-motion"";
import clsx from ""clsx"";

interface AnimatedGradientBackgroundProps {
    className?: string;
    intensity?: ""subtle"" | ""medium"" | ""strong"";
}

interface Beam {
    x: number;
    y: number;
    width: number;
    length: number;
    angle: number;
    speed: number;
    opacity: number;
    hue: number;
    pulse: number;
    pulseSpeed: number;
}

const createBeam = (width: number, height: number): Beam => {
    const angle = -35 + Math.random() * 10;
    return {
        x: Math.random() * width * 1.5 - width * 0.25,
        y: Math.random() * height * 1.5 - height * 0.25,
        width: 30 + Math.random() * 60,
        length: height * 2.5,
        angle,
        speed: 0.6 + Math.random() * 1.2,
        opacity: 0.12 + Math.random() * 0.16,
        hue: 190 + Math.random() * 70,
        pulse: Math.random() * Math.PI * 2,
        pulseSpeed: 0.02 + Math.random() * 0.03,
    };
};

const BeamsBackground: React.FC<AnimatedGradientBackgroundProps> = ({
    className,
    intensity = ""strong"",
}) => {
    const canvasRef = useRef<HTMLCanvasElement>(null);
    const beamsRef = useRef<Beam[]>([]);
    const animationFrameRef = useRef<number>(0);
    const MINIMUM_BEAMS = 20;

    const opacityMap = {
        subtle: 0.7,
        medium: 0.85,
        strong: 1,
    };

    useEffect(() => {
        // Rest of the useEffect code remains the same
    }, [intensity]);

    const classes = clsx(
        ""relative min-h-screen w-full overflow-hidden bg-neutral-950"",
        className
    );

    return (
        <div className={classes}>
            <canvas ref={canvasRef} className=""absolute inset-0"" style={{ filter: ""blur(15px)"" }} />
            // Rest of the return JSX remains the same
        </div>
    );
};

export default BeamsBackground;","The VercelV0Chat component is a chat interface that includes a textarea for input, a send button, and a series of action buttons for various actions like uploading a project or cloning a screenshot."
kokonutui,hand-written-title,"""use client"";

import { ArrowRight, Bot, Check, ChevronDown, Paperclip } from ""lucide-react"";
import { useState } from ""react"";
import { Textarea } from ""@/components/ui/textarea"";
import { cn } from ""@/lib/utils"";
import { useAutoResizeTextarea } from ""@/hooks/use-auto-resize-textarea"";
import { Button } from ""@/components/ui/button"";
import {
    DropdownMenu,
    DropdownMenuContent,
    DropdownMenuItem,
    DropdownMenuTrigger,
} from ""@/components/ui/dropdown-menu"";
import { motion, AnimatePresence } from ""motion/react"";

const OPENAI_SVG = (
    <div>
        <svg
            xmlns=""http://www.w3.org/2000/svg""
            width=""256""
            height=""260""
            preserveAspectRatio=""xMidYMid""
            viewBox=""0 0 256 260""
            aria-label=""o3-mini icon""
            className=""dark:hidden block""
        >
            <title>OpenAI Icon Light</title>
            <path d=""M239.184 106.203a64.716 64.716 0 0 0-5.576-53.103C219.452 28.459 191 15.784 163.213 21.74A65.586 65.586 0 0 0 52.096 45.22a64.716 64.716 0 0 0-43.23 31.36c-14.31 24.602-11.061 55.634 8.033 76.74a64.665 64.665 0 0 0 5.525 53.102c14.174 24.65 42.644 37.324 70.446 31.36a64.72 64.72 0 0 0 48.754 21.744c28.481.025 53.714-18.361 62.414-45.481a64.767 64.767 0 0 0 43.229-31.36c14.137-24.558 10.875-55.423-8.083-76.483Zm-97.56 136.338a48.397 48.397 0 0 1-31.105-11.255l1.535-.87 51.67-29.825a8.595 8.595 0 0 0 4.247-7.367v-72.85l21.845 12.636c.218.111.37.32.409.563v60.367c-.056 26.818-21.783 48.545-48.601 48.601Zm-104.466-44.61a48.345 48.345 0 0 1-5.781-32.589l1.534.921 51.722 29.826a8.339 8.339 0 0 0 8.441 0l63.181-36.425v25.221a.87.87 0 0 1-.358.665l-52.335 30.184c-23.257 13.398-52.97 5.431-66.404-17.803ZM23.549 85.38a48.499 48.499 0 0 1 25.58-21.333v61.39a8.288 8.288 0 0 0 4.195 7.316l62.874 36.272-21.845 12.636a.819.819 0 0 1-.767 0L41.353 151.53c-23.211-13.454-31.171-43.144-17.804-66.405v.256Zm179.466 41.695-63.08-36.63L161.73 77.86a.819.819 0 0 1 .768 0l52.233 30.184a48.6 48.6 0 0 1-7.316 87.635v-61.391a8.544 8.544 0 0 0-4.4-7.213Zm21.742-32.69-1.535-.922-51.619-30.081a8.39 8.39 0 0 0-8.492 0L99.98 99.808V74.587a.716.716 0 0 1 .307-.665l52.233-30.133a48.652 48.652 0 0 1 72.236 50.391v.205ZM88.061 139.097l-21.845-12.585a.87.87 0 0 1-.41-.614V65.685a48.652 48.652 0 0 1 79.757-37.346l-1.535.87-51.67 29.825a8.595 8.595 0 0 0-4.246 7.367l-.051 72.697Zm11.868-25.58 28.138-16.217 28.188 16.218v32.434l-28.086 16.218-28.188-16.218-.052-32.434Z"" />
        </svg>
        <svg
            xmlns=""http://www.w3.org/2000/svg""
            width=""256""
            height=""260""
            preserveAspectRatio=""xMidYMid""
            viewBox=""0 0 256 260""
            aria-label=""o3-mini icon""
            className=""hidden dark:block""
        >
            <title>OpenAI Icon Dark</title>
            <path
                fill=""#fff""
                d=""M239.184 106.203a64.716 64.716 0 0 0-5.576-53.103C219.452 28.459 191 15.784 163.213 21.74A65.586 65.586 0 0 0 52.096 45.22a64.716 64.716 0 0 0-43.23 31.36c-14.31 24.602-11.061 55.634 8.033 76.74a64.665 64.665 0 0 0 5.525 53.102c14.174 24.65 42.644 37.324 70.446 31.36a64.72 64.72 0 0 0 48.754 21.744c28.481.025 53.714-18.361 62.414-45.481a64.767 64.767 0 0 0 43.229-31.36c14.137-24.558 10.875-55.423-8.083-76.483Zm-97.56 136.338a48.397 48.397 0 0 1-31.105-11.255l1.535-.87 51.67-29.825a8.595 8.595 0 0 0 4.247-7.367v-72.85l21.845 12.636c.218.111.37.32.409.563v60.367c-.056 26.818-21.783 48.545-48.601 48.601Zm-104.466-44.61a48.345 48.345 0 0 1-5.781-32.589l1.534.921 51.722 29.826a8.339 8.339 0 0 0 8.441 0l63.181-36.425v25.221a.87.87 0 0 1-.358.665l-52.335 30.184c-23.257 13.398-52.97 5.431-66.404-17.803ZM23.549 85.38a48.499 48.499 0 0 1 25.58-21.333v61.39a8.288 8.288 0 0 0 4.195 7.316l62.874 36.272-21.845 12.636a.819.819 0 0 1-.767 0L41.353 151.53c-23.211-13.454-31.171-43.144-17.804-66.405v.256Zm179.466 41.695-63.08-36.63L161.73 77.86a.819.819 0 0 1 .768 0l52.233 30.184a48.6 48.6 0 0 1-7.316 87.635v-61.391a8.544 8.544 0 0 0-4.4-7.213Zm21.742-32.69-1.535-.922-51.619-30.081a8.39 8.39 0 0 0-8.492 0L99.98 99.808V74.587a.716.716 0 0 1 .307-.665l52.233-30.133a48.652 48.652 0 0 1 72.236 50.391v.205ZM88.061 139.097l-21.845-12.585a.87.87 0 0 1-.41-.614V65.685a48.652 48.652 0 0 1 79.757-37.346l-1.535.87-51.67 29.825a8.595 8.595 0 0 0-4.246 7.367l-.051 72.697Zm11.868-25.58 28.138-16.217 28.188 16.218v32.434l-28.086 16.218-28.188-16.218-.052-32.434Z""
            />
        </svg>
    </div>
);

export default function AI_Prompt() {
    const [value, setValue] = useState("""");
    const { textareaRef, adjustHeight } = useAutoResizeTextarea({
        minHeight: 72,
        maxHeight: 300,
    });
    const [selectedModel, setSelectedModel] = useState(""GPT-4-1 Mini"");

    const AI_MODELS = [
        ""o3-mini"",
        ""Gemini 2.5 Flash"",
        ""Claude 3.5 Sonnet"",
        ""GPT-4-1 Mini"",
        ""GPT-4-1"",
    ];

    const MODEL_ICONS: Record<string, React.ReactNode> = {
        ""o3-mini"": OPENAI_SVG,
        ""Gemini 2.5 Flash"": (
            <svg
                height=""1em""
                style={{ flex: ""none"", lineHeight: ""1"" }}
                viewBox=""0 0 24 24""
                xmlns=""http://www.w3.org/2000/svg""
            >
                <title>Gemini</title>
                <defs>
                    <linearGradient
                        id=""lobe-icons-gemini-fill""
                        x1=""0%""
                        x2=""68.73%""
                        y1=""100%""
                        y2=""30.395%""
                    >
                        <stop offset=""0%"" stopColor=""#1C7DFF"" />
                        <stop offset=""52.021%"" stopColor=""#1C69FF"" />
                        <stop offset=""100%"" stopColor=""#F0DCD6"" />
                    </linearGradient>
                </defs>
                <path
                    d=""M12 24A14.304 14.304 0 000 12 14.304 14.304 0 0012 0a14.305 14.305 0 0012 12 14.305 14.305 0 00-12 12""
                    fill=""url(#lobe-icons-gemini-fill)""
                    fillRule=""nonzero""
                />
            </svg>
        ),
        ""Claude 3.5 Sonnet"": (
            <div>
                <svg
                    fill=""#000""
                    fillRule=""evenodd""
                    style={{ flex: ""none"", lineHeight: ""1"" }}
                    viewBox=""0 0 24 24""
                    width=""1em""
                    xmlns=""http://www.w3.org/2000/svg""
                    className=""dark:hidden block""
                >
                    <title>Anthropic Icon Light</title>
                    <path d=""M13.827 3.52h3.603L24 20h-3.603l-6.57-16.48zm-7.258 0h3.767L16.906 20h-3.674l-1.343-3.461H5.017l-1.344 3.46H0L6.57 3.522zm4.132 9.959L8.453 7.687 6.205 13.48H10.7z"" />
                </svg>
                <svg
                    fill=""#ffff""
                    fillRule=""evenodd""
                    style={{ flex: ""none"", lineHeight: ""1"" }}
                    viewBox=""0 0 24 24""
                    width=""1em""
                    xmlns=""http://www.w3.org/2000/svg""
                    className=""hidden dark:block""
                >
                    <title>Anthropic Icon Dark</title>
                    <path d=""M13.827 3.52h3.603L24 20h-3.603l-6.57-16.48zm-7.258 0h3.767L16.906 20h-3.674l-1.343-3.461H5.017l-1.344 3.46H0L6.57 3.522zm4.132 9.959L8.453 7.687 6.205 13.48H10.7z"" />
                </svg>
            </div>
        ),
        ""GPT-4-1 Mini"": OPENAI_SVG,
        ""GPT-4-1"": OPENAI_SVG,
    };

    const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
        if (e.key === ""Enter"" && !e.shiftKey) {
            e.preventDefault();
            setValue("""");
            adjustHeight(true);
        }
    };

    return (
        <div className=""w-4/6 py-4"">
            <div className=""bg-black/5 dark:bg-white/5 rounded-2xl p-1.5"">
                <div className=""relative"">
                    <div className=""relative flex flex-col"">
                        <div
                            className=""overflow-y-auto""
                            style={{ maxHeight: ""400px"" }}
                        >
                            <Textarea
                                id=""ai-input-15""
                                value={value}
                                placeholder={""What can I do for you?""}
                                className={cn(
                                    ""w-full rounded-xl rounded-b-none px-4 py-3 bg-black/5 dark:bg-white/5 border-none dark:text-white placeholder:text-black/70 dark:placeholder:text-white/70 resize-none focus-visible:ring-0 focus-visible:ring-offset-0"",
                                    ""min-h-[72px]""
                                )}
                                ref={textareaRef}
                                onKeyDown={handleKeyDown}
                                onChange={(e) => {
                                    setValue(e.target.value);
                                    adjustHeight();
                                }}
                            />
                        </div>

                        <div className=""h-14 bg-black/5 dark:bg-white/5 rounded-b-xl flex items-center"">
                            <div className=""absolute left-3 right-3 bottom-3 flex items-center justify-between w-[calc(100%-24px)]"">
                                <div className=""flex items-center gap-2"">
                                    <DropdownMenu>
                                        <DropdownMenuTrigger asChild>
                                            <Button
                                                variant=""ghost""
                                                className=""flex items-center gap-1 h-8 pl-1 pr-2 text-xs rounded-md dark:text-white hover:bg-black/10 dark:hover:bg-white/10 focus-visible:ring-1 focus-visible:ring-offset-0 focus-visible:ring-blue-500""
                                            >
                                                <AnimatePresence mode=""wait"">
                                                    <motion.div
                                                        key={selectedModel}
                                                        initial={{
                                                            opacity: 0,
                                                            y: -5,
                                                        }}
                                                        animate={{
                                                            opacity: 1,
                                                            y: 0,
                                                        }}
                                                        exit={{
                                                            opacity: 0,
                                                            y: 5,
                                                        }}
                                                        transition={{
                                                            duration: 0.15,
                                                        }}
                                                        className=""flex items-center gap-1""
                                                    >
                                                        {
                                                            MODEL_ICONS[
                                                                selectedModel
                                                            ]
                                                        }
                                                        {selectedModel}
                                                        <ChevronDown className=""w-3 h-3 opacity-50"" />
                                                    </motion.div>
                                                </AnimatePresence>
                                            </Button>
                                        </DropdownMenuTrigger>
                                        <DropdownMenuContent
                                            className={cn(
                                                ""min-w-[10rem]"",
                                                ""border-black/10 dark:border-white/10"",
                                                ""bg-gradient-to-b from-white via-white to-neutral-100 dark:from-neutral-950 dark:via-neutral-900 dark:to-neutral-800""
                                            )}
                                        >
                                            {AI_MODELS.map((model) => (
                                                <DropdownMenuItem
                                                    key={model}
                                                    onSelect={() =>
                                                        setSelectedModel(model)
                                                    }
                                                    className=""flex items-center justify-between gap-2""
                                                >
                                                    <div className=""flex items-center gap-2"">
                                                        {MODEL_ICONS[model] || (
                                                            <Bot className=""w-4 h-4 opacity-50"" />
                                                        )}{"" ""}
                                                        {/* Use mapped SVG or fallback */}
                                                        <span>{model}</span>
                                                    </div>
                                                    {selectedModel ===
                                                        model && (
                                                        <Check className=""w-4 h-4 text-blue-500"" />
                                                    )}
                                                </DropdownMenuItem>
                                            ))}
                                        </DropdownMenuContent>
                                    </DropdownMenu>
                                    <div className=""h-4 w-px bg-black/10 dark:bg-white/10 mx-0.5"" />
                                    <label
                                        className={cn(
                                            ""rounded-lg p-2 bg-black/5 dark:bg-white/5 cursor-pointer"",
                                            ""hover:bg-black/10 dark:hover:bg-white/10 focus-visible:ring-1 focus-visible:ring-offset-0 focus-visible:ring-blue-500"",
                                            ""text-black/40 dark:text-white/40 hover:text-black dark:hover:text-white""
                                        )}
                                        aria-label=""Attach file""
                                    >
                                        <input type=""file"" className=""hidden"" />
                                        <Paperclip className=""w-4 h-4 transition-colors"" />
                                    </label>
                                </div>
                                <button
                                    type=""button""
                                    className={cn(
                                        ""rounded-lg p-2 bg-black/5 dark:bg-white/5"",
                                        ""hover:bg-black/10 dark:hover:bg-white/10 focus-visible:ring-1 focus-visible:ring-offset-0 focus-visible:ring-blue-500""
                                    )}
                                    aria-label=""Send message""
                                    disabled={!value.trim()}
                                >
                                    <ArrowRight
                                        className={cn(
                                            ""w-4 h-4 dark:text-white transition-opacity duration-200"",
                                            value.trim()
                                                ? ""opacity-100""
                                                : ""opacity-30""
                                        )}
                                    />
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
}","import { FC, useState, KeyboardEvent, ReactNode } from ""react"";
import { motion, AnimatePresence } from ""motion/react"";
import { Textarea, Button, DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuItem } from ""@/components/ui"";
import { useAutoResizeTextarea } from ""@/hooks"";
import { ArrowRight, Bot, Check, ChevronDown, Paperclip } from ""lucide-react"";

const AI_Prompt: FC = () => {
    const [value, setValue] = useState<string>("""");
    const { textareaRef, adjustHeight } = useAutoResizeTextarea({
        minHeight: 72,
        maxHeight: 300,
    });
    const [selectedModel, setSelectedModel] = useState<string>(""GPT-4-1 Mini"");

    const AI_MODELS: string[] = [
        ""o3-mini"",
        ""Gemini 2.5 Flash"",
        ""Claude 3.5 Sonnet"",
        ""GPT-4-1 Mini"",
        ""GPT-4-1"",
    ];

    const MODEL_ICONS: Record<string, ReactNode> = {
        // Replace the SVGs with your own SVGs
    };

    const handleKeyDown = (e: KeyboardEvent<HTMLTextAreaElement>) => {
        if (e.key === ""Enter"" && !e.shiftKey) {
            e.preventDefault();
            setValue("""");
            adjustHeight(true);
        }
    };

    return (
        <div className=""w-2/3 py-4 mx-auto"">
            <div className=""bg-gray-200 dark:bg-gray-800 rounded-2xl p-1.5"">
                <div className=""relative"">
                    <div className=""relative flex flex-col"">
                        <div className=""overflow-y-auto"" style={{ maxHeight: ""400px"" }}>
                            <Textarea
                                id=""ai-input-15""
                                value={value}
                                placeholder={""What can I do for you?""}
                                className=""w-full rounded-xl rounded-b-none px-4 py-3 bg-gray-200 dark:bg-gray-800 border-none dark:text-white placeholder-gray-500 dark:placeholder-gray-500 resize-none focus:outline-none min-h-[72px]""
                                ref={textareaRef}
                                onKeyDown={handleKeyDown}
                                onChange={(e) => {
                                    setValue(e.target.value);
                                    adjustHeight();
                                }}
                            />
                        </div>
                        <div className=""h-14 bg-gray-200 dark:bg-gray-800 rounded-b-xl flex items-center"">
                            <div className=""absolute left-3 right-3 bottom-3 flex items-center justify-between w-full"">
                                <div className=""flex items-center gap-2"">
                                    <DropdownMenu>
                                        <DropdownMenuTrigger asChild>
                                            <Button
                                                variant=""ghost""
                                                className=""flex items-center gap-1 h-8 pl-1 pr-2 text-xs rounded-md dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700 focus:ring-2 focus:ring-offset-2 focus:ring-blue-500""
                                            >
                                                <AnimatePresence mode=""wait"">
                                                    <motion.div
                                                        key={selectedModel}
                                                        initial={{ opacity: 0, y: -5 }}
                                                        animate={{ opacity: 1, y: 0 }}
                                                        exit={{ opacity: 0, y: 5 }}
                                                        transition={{ duration: 0.15 }}
                                                        className=""flex items-center gap-1""
                                                    >
                                                        {MODEL_ICONS[selectedModel]}
                                                        {selectedModel}
                                                        <ChevronDown className=""w-3 h-3 opacity-50"" />
                                                    </motion.div>
                                                </AnimatePresence>
                                            </Button>
                                        </DropdownMenuTrigger>
                                        <DropdownMenuContent
                                            className=""min-w-[10rem] border-gray-200 dark:border-gray-700 bg-gradient-to-b dark:from-gray-900 dark:via-gray-900 dark:to-gray-800""
                                        >
                                            {AI_MODELS.map((model) => (
                                                <DropdownMenuItem
                                                    key={model}
                                                    onSelect={() => setSelectedModel(model)}
                                                    className=""flex items-center justify-between gap-2""
                                                >
                                                    <div className=""flex items-center gap-2"">
                                                        {MODEL_ICONS[model] || <Bot className=""w-4 h-4 opacity-50"" />}
                                                        <span>{model}</span>
                                                    </div>
                                                    {selectedModel === model && <Check className=""w-4 h-4 text-blue-500"" />}
                                                </DropdownMenuItem>
                                            ))}
                                        </DropdownMenuContent>
                                    </DropdownMenu>
                                    <div className=""h-4 w-px bg-gray-400 dark:bg-gray-600 mx-0.5"" />
                                    <label
                                        className=""rounded-lg p-2 bg-gray-200 dark:bg-gray-800 cursor-pointer hover:bg-gray-300 dark:hover:bg-gray-700 focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 text-gray-600 dark:text-gray-400 hover:text-black dark:hover:text-white""
                                        aria-label=""Attach file""
                                    >
                                        <input type=""file"" className=""hidden"" />
                                        <Paperclip className=""w-4 h-4 transition-colors"" />
                                    </label>
                                </div>
                                <button
                                    type=""button""
                                    className=""rounded-lg p-2 bg-gray-200 dark:bg-gray-800 hover:bg-gray-300 dark:hover:bg-gray-700 focus:ring-2 focus:ring-offset-2 focus:ring-blue-500""
                                    aria-label=""Send message""
                                    disabled={!value.trim()}
                                >
                                    <ArrowRight className={`w-4 h-4 transition-opacity duration-200 ${value.trim() ? 'text-black dark:text-white' : 'text-gray-400 dark:text-gray-600'}`} />
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
}

export default AI_Prompt;",A component that displays a hand-drawn animation with a title and optional subtitle styled with Tailwind CSS. The animation and text appear smoothly with a delay.
kokonutui,beams-background,"""use client"";

import { useState, useEffect } from ""react"";
import { Input } from ""@/components/ui/input"";
import { motion, AnimatePresence } from ""motion/react"";
import {
    Search,
    Send,
    BarChart2,
    Globe,
    Video,
    PlaneTakeoff,
    AudioLines,
    Layout,
    LayoutGrid,
} from ""lucide-react"";
import useDebounce from ""@/hooks/use-debounce"";

interface Action {
    id: string;
    label: string;
    icon: React.ReactNode;
    description?: string;
    short?: string;
    end?: string;
}

interface SearchResult {
    actions: Action[];
}

const allActionsSample = [
    {
        id: ""1"",
        label: ""Book tickets"",
        icon: <PlaneTakeoff className=""h-4 w-4 text-blue-500"" />,
        description: ""Operator"",
        short: ""âŒ˜K"",
        end: ""Agent"",
    },
    {
        id: ""2"",
        label: ""Summarize"",
        icon: <BarChart2 className=""h-4 w-4 text-orange-500"" />,
        description: ""gpt-4o"",
        short: ""âŒ˜cmd+p"",
        end: ""Command"",
    },
    {
        id: ""3"",
        label: ""Screen Studio"",
        icon: <Video className=""h-4 w-4 text-purple-500"" />,
        description: ""gpt-4o"",
        short: """",
        end: ""Application"",
    },
    {
        id: ""4"",
        label: ""Talk to Jarvis"",
        icon: <AudioLines className=""h-4 w-4 text-green-500"" />,
        description: ""gpt-4o voice"",
        short: """",
        end: ""Active"",
    },
    {
        id: ""5"",
        label: ""Kokonut UI - Pro"",
        icon: <LayoutGrid className=""h-4 w-4 text-blue-500"" />,
        description: ""Components"",
        short: """",
        end: ""Link"",
    },
];

function ActionSearchBar({
    actions = allActionsSample,
    defaultOpen = false,
}: {
    actions?: Action[];
    defaultOpen?: boolean;
}) {
    const [query, setQuery] = useState("""");
    const [result, setResult] = useState<SearchResult | null>(null);
    const [isFocused, setIsFocused] = useState(defaultOpen);
    const [isTyping, setIsTyping] = useState(false);
    const [selectedAction, setSelectedAction] = useState<Action | null>(null);
    const debouncedQuery = useDebounce(query, 200);

    useEffect(() => {
        if (!isFocused) {
            setResult(null);
            return;
        }

        if (!debouncedQuery) {
            setResult({ actions: actions });
            return;
        }

        const normalizedQuery = debouncedQuery.toLowerCase().trim();
        const filteredActions = actions.filter((action) => {
            const searchableText = action.label.toLowerCase();
            return searchableText.includes(normalizedQuery);
        });

        setResult({ actions: filteredActions });
    }, [debouncedQuery, isFocused, actions]);

    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setQuery(e.target.value);
        setIsTyping(true);
    };

    const container = {
        hidden: { opacity: 0, height: 0 },
        show: {
            opacity: 1,
            height: ""auto"",
            transition: {
                height: {
                    duration: 0.4,
                },
                staggerChildren: 0.1,
            },
        },
        exit: {
            opacity: 0,
            height: 0,
            transition: {
                height: {
                    duration: 0.3,
                },
                opacity: {
                    duration: 0.2,
                },
            },
        },
    };

    const item = {
        hidden: { opacity: 0, y: 20 },
        show: {
            opacity: 1,
            y: 0,
            transition: {
                duration: 0.3,
            },
        },
        exit: {
            opacity: 0,
            y: -10,
            transition: {
                duration: 0.2,
            },
        },
    };

    const handleFocus = () => {
        setSelectedAction(null);
        setIsFocused(true);
    };

    return (
        <div className=""w-full max-w-xl mx-auto"">
            <div className=""relative flex flex-col justify-start items-center min-h-[300px]"">
                <div className=""w-full max-w-sm sticky top-0 bg-background z-10 pt-4 pb-1"">
                    <label
                        className=""text-xs font-medium text-gray-500 dark:text-gray-400 mb-1 block""
                        htmlFor=""search""
                    >
                        Search Commands
                    </label>
                    <div className=""relative"">
                        <Input
                            type=""text""
                            placeholder=""What's up?""
                            value={query}
                            onChange={handleInputChange}
                            onFocus={handleFocus}
                            onBlur={() =>
                                setTimeout(() => setIsFocused(false), 200)
                            }
                            className=""pl-3 pr-9 py-1.5 h-9 text-sm rounded-lg focus-visible:ring-offset-0""
                        />
                        <div className=""absolute right-3 top-1/2 -translate-y-1/2 h-4 w-4"">
                            <AnimatePresence mode=""popLayout"">
                                {query.length > 0 ? (
                                    <motion.div
                                        key=""send""
                                        initial={{ y: -20, opacity: 0 }}
                                        animate={{ y: 0, opacity: 1 }}
                                        exit={{ y: 20, opacity: 0 }}
                                        transition={{ duration: 0.2 }}
                                    >
                                        <Send className=""w-4 h-4 text-gray-400 dark:text-gray-500"" />
                                    </motion.div>
                                ) : (
                                    <motion.div
                                        key=""search""
                                        initial={{ y: -20, opacity: 0 }}
                                        animate={{ y: 0, opacity: 1 }}
                                        exit={{ y: 20, opacity: 0 }}
                                        transition={{ duration: 0.2 }}
                                    >
                                        <Search className=""w-4 h-4 text-gray-400 dark:text-gray-500"" />
                                    </motion.div>
                                )}
                            </AnimatePresence>
                        </div>
                    </div>
                </div>

                <div className=""w-full max-w-sm"">
                    <AnimatePresence>
                        {isFocused && result && !selectedAction && (
                            <motion.div
                                className=""w-full border rounded-md shadow-xs overflow-hidden dark:border-gray-800 bg-white dark:bg-black mt-1""
                                variants={container}
                                initial=""hidden""
                                animate=""show""
                                exit=""exit""
                            >
                                <motion.ul>
                                    {result.actions.map((action) => (
                                        <motion.li
                                            key={action.id}
                                            className=""px-3 py-2 flex items-center justify-between hover:bg-gray-200 dark:hover:bg-zinc-900  cursor-pointer rounded-md""
                                            variants={item}
                                            layout
                                            onClick={() =>
                                                setSelectedAction(action)
                                            }
                                        >
                                            <div className=""flex items-center gap-2 justify-between"">
                                                <div className=""flex items-center gap-2"">
                                                    <span className=""text-gray-500"">
                                                        {action.icon}
                                                    </span>
                                                    <span className=""text-sm font-medium text-gray-900 dark:text-gray-100"">
                                                        {action.label}
                                                    </span>
                                                    <span className=""text-xs text-gray-400"">
                                                        {action.description}
                                                    </span>
                                                </div>
                                            </div>
                                            <div className=""flex items-center gap-2"">
                                                <span className=""text-xs text-gray-400"">
                                                    {action.short}
                                                </span>
                                                <span className=""text-xs text-gray-400 text-right"">
                                                    {action.end}
                                                </span>
                                            </div>
                                        </motion.li>
                                    ))}
                                </motion.ul>
                                <div className=""mt-2 px-3 py-2 border-t border-gray-100 dark:border-gray-800"">
                                    <div className=""flex items-center justify-between text-xs text-gray-500"">
                                        <span>Press âŒ˜K to open commands</span>
                                        <span>ESC to cancel</span>
                                    </div>
                                </div>
                            </motion.div>
                        )}
                    </AnimatePresence>
                </div>
            </div>
        </div>
    );
}

export default ActionSearchBar;","import React, { useState, useEffect, ChangeEvent, FC } from ""react"";
import { motion, AnimatePresence } from ""framer-motion"";
import { Search, Send, BarChart2, Globe, Video, PlaneTakeoff, AudioLines, Layout, LayoutGrid } from ""lucide-react"";
import useDebounce from ""@/hooks/use-debounce"";

interface Action {
    id: string;
    label: string;
    icon: JSX.Element;
    description?: string;
    short?: string;
    end?: string;
}

interface IActionSearchBarProps {
    actions?: Action[];
    defaultOpen?: boolean;
}

const allActionsSample: Action[] = [
    // your sample data here...
];

const ActionSearchBar: FC<IActionSearchBarProps> = ({ actions = allActionsSample, defaultOpen = false }) => {
    const [query, setQuery] = useState<string>("""");
    const [isFocused, setIsFocused] = useState<boolean>(defaultOpen);
    const debouncedQuery = useDebounce(query, 200);
    const [result, setResult] = useState<Action[] | null>(null);

    useEffect(() => {
        if (!isFocused) {
            setResult(null);
            return;
        }

        if (!debouncedQuery) {
            setResult(actions);
            return;
        }

        const normalizedQuery = debouncedQuery.toLowerCase().trim();
        const filteredActions = actions.filter((action) => {
            const searchableText = action.label.toLowerCase();
            return searchableText.includes(normalizedQuery);
        });

        setResult(filteredActions);
    }, [debouncedQuery, isFocused, actions]);

    const handleInputChange = (e: ChangeEvent<HTMLInputElement>) => {
        setQuery(e.target.value);
    };

    const handleFocus = () => setIsFocused(true);

    // Rest of your component logic...

    return (
        // Your component JSX...
    );
}

export default ActionSearchBar;","This is a React component that creates an animated gradient background with beams of light that can have varying intensities. The animation is achieved using the Framer Motion library. Tailwind CSS classes are used for styling, and the clsx utility is used for conditionally joining classNames together."
kokonutui,ai-prompt,"import { cn } from ""@/lib/utils"";
import {
    Home,
    MapPin,
    Compass,
    Building,
    Heart,
    HomeIcon,
    Camera,
} from ""lucide-react"";
import Link from ""next/link"";
import {
    Card,
    CardHeader,
    CardContent,
    CardFooter,
} from ""@/components/ui/card"";

interface BentoItem {
    title: string;
    description: string;
    icon: React.ReactNode;
    status?: string;
    tags?: string[];
    meta?: string;
    cta?: string;
    colSpan?: number;
    hasPersistentHover?: boolean;
}

interface BentoGridProps {
    items: BentoItem[];
}

const itemsSample: BentoItem[] = [
    {
        title: ""Luxury Beachfront Villa"",
        meta: ""4.9 (128 reviews)"",
        description:
            ""Stunning oceanfront property with private pool, modern amenities, and breathtaking sunset views. Perfect for family getaways."",
        icon: <Home className=""w-4 h-4 text-blue-500"" />,
        status: ""Superhost"",
        tags: [""Beachfront"", ""Pool"", ""Luxury""],
        colSpan: 2,
        hasPersistentHover: true,
    },
    {
        title: ""Downtown Loft"",
        meta: ""$199/night"",
        description:
            ""Modern urban living in the heart of the city. Walking distance to restaurants and attractions."",
        icon: <Building className=""w-4 h-4 text-emerald-500"" />,
        status: ""Instant Book"",
        tags: [""Urban"", ""Modern""],
    },
    {
        title: ""Popular Areas"",
        description:
            ""Discover trending neighborhoods with the highest guest satisfaction"",
        icon: <MapPin className=""w-4 h-4 text-red-500"" />,
        status: ""New"",
    },
    {
        title: ""Bali Villa"",
        description:
            ""A luxurious villa in Bali with a private pool and stunning views of the ocean"",
        icon: <HomeIcon className=""w-4 h-4 text-amber-500"" />,
        meta: ""12 houses"",
        tags: [""Housing"", ""Tools""],
    },
    {
        title: ""Travel Collections"",
        description: ""Curated lists of unique stays and experiences worldwide"",
        icon: <Heart className=""w-4 h-4 text-purple-500"" />,
        meta: ""Updated weekly"",
        tags: [""Featured"", ""Curated""],
    },
    {
        title: ""Local Guide"",
        meta: ""6 cities"",
        description:
            ""Expert recommendations for local attractions and hidden gems"",
        icon: <Compass className=""w-4 h-4 text-sky-500"" />,
        status: ""Featured"",
        tags: [""Local"", ""Guide""],
    },
    {
        title: ""Exclusive Experiences"",
        meta: ""100+ activities"",
        description:
            ""Unique adventures and memorable experiences curated by local experts. From cooking classes to outdoor expeditions."",
        icon: <Camera className=""w-4 h-4 text-indigo-500"" />,
        status: ""Premium"",
        tags: [""Activities"", ""Local""],
        colSpan: 2,
    },
];

export default function BentoGrid({ items = itemsSample }: BentoGridProps) {
    return (
        <div className=""grid grid-cols-1 md:grid-cols-3 gap-3 p-4 max-w-7xl mx-auto"">
            {items.map((item) => (
                <Link
                    href=""https://kokonutui.com""
                    key={`${item.title}-${item.status || item.meta}`}
                    className={cn(
                        item.colSpan || ""col-span-1"",
                        item.colSpan === 2 ? ""md:col-span-2"" : """"
                    )}
                >
                    <Card
                        className={cn(
                            ""group relative h-full transition-all duration-300 hover:shadow-lg"",
                            ""hover:-translate-y-0.5 will-change-transform"",
                            ""overflow-hidden"",
                            {
                                ""shadow-md -translate-y-0.5"":
                                    item.hasPersistentHover,
                            }
                        )}
                    >
                        <div
                            className={cn(
                                ""absolute inset-0"",
                                item.hasPersistentHover
                                    ? ""opacity-100""
                                    : ""opacity-0 group-hover:opacity-100"",
                                ""transition-opacity duration-300""
                            )}
                        >
                            <div className=""absolute inset-0 bg-[radial-gradient(circle_at_center,rgba(0,0,0,0.05)_1px,transparent_1px)] dark:bg-[radial-gradient(circle_at_center,rgba(255,255,255,0.02)_1px,transparent_1px)] bg-[length:4px_4px]"" />
                        </div>

                        <CardHeader className=""relative space-y-0 p-4"">
                            <div className=""flex items-center justify-between"">
                                <div className=""w-8 h-8 rounded-lg flex items-center justify-center bg-black/5 dark:bg-white/10"">
                                    {item.icon}
                                </div>
                                <span className=""text-xs font-medium px-2 py-1 rounded-md bg-black/5 dark:bg-white/10 text-gray-600 dark:text-gray-300"">
                                    {item.status || ""Active""}
                                </span>
                            </div>
                        </CardHeader>

                        <CardContent className=""relative space-y-2 p-4 pt-0"">
                            <h3 className=""font-medium text-gray-900 dark:text-gray-100 tracking-tight text-[15px]"">
                                {item.title}
                                <span className=""ml-2 text-xs text-gray-500 dark:text-gray-400 font-normal"">
                                    {item.meta}
                                </span>
                            </h3>
                            <p className=""text-sm text-gray-600 dark:text-gray-300 leading-snug font-[425]"">
                                {item.description}
                            </p>
                        </CardContent>

                        <CardFooter className=""relative p-4"">
                            <div className=""flex items-center justify-between w-full"">
                                <div className=""flex items-center space-x-2 text-xs text-gray-500 dark:text-gray-400"">
                                    {item.tags?.map((tag) => (
                                        <span
                                            key={`${item.title}-${tag}`}
                                            className=""px-2 py-1 rounded-md bg-black/5 dark:bg-white/10 backdrop-blur-xs transition-all duration-200""
                                        >
                                            #{tag}
                                        </span>
                                    ))}
                                </div>
                                <span className=""text-xs text-gray-500 dark:text-gray-400 opacity-0 group-hover:opacity-100 transition-opacity"">
                                    {item.cta || ""Explore â†’""}
                                </span>
                            </div>
                        </CardFooter>

                        <div
                            className={cn(
                                ""absolute inset-0 -z-10 rounded-xl p-px bg-linear-to-br from-transparent via-gray-200/70 to-transparent dark:via-white/10"",
                                item.hasPersistentHover
                                    ? ""opacity-100""
                                    : ""opacity-0 group-hover:opacity-100"",
                                ""transition-opacity duration-300""
                            )}
                        />
                    </Card>
                </Link>
            ))}
        </div>
    );
}","import { FC, ReactNode } from ""react"";
import { Home, MapPin, Compass, Building, Heart, HomeIcon, Camera } from ""lucide-react"";
import Link from ""next/link"";
import { Card, CardHeader, CardContent, CardFooter } from ""@/components/ui/card"";

interface BentoItem {
    title: string;
    description: string;
    icon: ReactNode;
    status?: string;
    tags?: string[];
    meta?: string;
    cta?: string;
    colSpan?: number;
    hasPersistentHover?: boolean;
}

interface BentoGridProps {
    items: BentoItem[];
}

const BentoGrid: FC<BentoGridProps> = ({ items }) => (
    <div className=""grid grid-cols-1 md:grid-cols-3 gap-3 p-4 max-w-7xl mx-auto"">
        {items.map((item, index) => (
            <Link key={index} href=""https://kokonutui.com"" className={`col-span-${item.colSpan || 1} ${item.colSpan === 2 ? ""md:col-span-2"" : """"}`}>
                <Card className={`group relative h-full transition-all duration-300 hover:shadow-lg hover:-translate-y-0.5 will-change-transform overflow-hidden ${item.hasPersistentHover ? ""shadow-md -translate-y-0.5"" : """"}`}>
                    <div className={`absolute inset-0 ${item.hasPersistentHover ? ""opacity-100"" : ""opacity-0 group-hover:opacity-100""} transition-opacity duration-300`}>
                        <div className=""absolute inset-0 bg-[radial-gradient(circle_at_center,rgba(0,0,0,0.05)_1px,transparent_1px)] dark:bg-[radial-gradient(circle_at_center,rgba(255,255,255,0.02)_1px,transparent_1px)] bg-[length:4px_4px]"" />
                    </div>

                    <CardHeader className=""relative space-y-0 p-4"">
                        <div className=""flex items-center justify-between"">
                            <div className=""w-8 h-8 rounded-lg flex items-center justify-center bg-black/5 dark:bg-white/10"">
                                {item.icon}
                            </div>
                            <span className=""text-xs font-medium px-2 py-1 rounded-md bg-black/5 dark:bg-white/10 text-gray-600 dark:text-gray-300"">
                                {item.status || ""Active""}
                            </span>
                        </div>
                    </CardHeader>

                    <CardContent className=""relative space-y-2 p-4 pt-0"">
                        <h3 className=""font-medium text-gray-900 dark:text-gray-100 tracking-tight text-[15px]"">
                            {item.title}
                            <span className=""ml-2 text-xs text-gray-500 dark:text-gray-400 font-normal"">
                                {item.meta}
                            </span>
                        </h3>
                        <p className=""text-sm text-gray-600 dark:text-gray-300 leading-snug font-[425]"">
                            {item.description}
                        </p>
                    </CardContent>

                    <CardFooter className=""relative p-4"">
                        <div className=""flex items-center justify-between w-full"">
                            <div className=""flex items-center space-x-2 text-xs text-gray-500 dark:text-gray-400"">
                                {item.tags?.map((tag, tagIndex) => (
                                    <span key={tagIndex} className=""px-2 py-1 rounded-md bg-black/5 dark:bg-white/10 backdrop-blur-xs transition-all duration-200"">
                                        #{tag}
                                    </span>
                                ))}
                            </div>
                            <span className=""text-xs text-gray-500 dark:text-gray-400 opacity-0 group-hover:opacity-100 transition-opacity"">
                                {item.cta || ""Explore â†’""}
                            </span>
                        </div>
                    </CardFooter>

                    <div className={`absolute inset-0 -z-10 rounded-xl p-px bg-linear-to-br from-transparent via-gray-200/70 to-transparent dark:via-white/10 ${item.hasPersistentHover ? ""opacity-100"" : ""opacity-0 group-hover:opacity-100""} transition-opacity duration-300`} />
                </Card>
            </Link>
        ))}
    </div>
);

export default BentoGrid;","Component for AI prompt with text input, file attachment, and model selection."
kokonutui,action-search-bar,"import Card08, { type Card08Props } from ""./card/card-08"";

interface CardGrid {
    items: Card08Props[];
    gridTitle?: string;
}

const collections: Card08Props[] = [
    {
        title: ""Summer Dress Collection"",
        subtitle: ""Fit with the latest trends"",
        image: ""https://assets.lummi.ai/assets/QmVQpR9kUDEiFupgWrzaUYVii2TLa5zE7h9XDU7okBFdyc?auto=format&w=450"",
        badge: {
            text: ""New"",
            variant: ""orange"",
        },
    },
    {
        image: ""https://assets.lummi.ai/assets/QmXFtkNH6GJy581VwChHZeQF6qfQM9bkLhF2kDh1px5qKB?auto=format&w=1500"",
        title: ""Autumn Essentials"",
        subtitle: ""Warm and cozy for the colder months"",
        badge: {
            text: ""New"",
            variant: ""orange"",
        },
    },
    {
        image: ""https://www.lummi.ai/api/pro/image/a06ede0d-63fb-4d99-be4c-9ba0840cf779?asset=original&cb=1nK52A&auto=format&w=1500"",
        title: ""Winter Collection"",
        subtitle: ""Colorful for the festive season"",
        badge: {
            text: ""New"",
            variant: ""orange"",
        },
    },
    {
        image: ""https://assets.lummi.ai/assets/QmPdy3qFqQF8gDQ6KuuUrRaqez3cbdeaYw3GMrxBynLfGd?auto=format&w=1500"",
        title: ""Spring Accessories"",
        subtitle: ""Hidden treasures for the spring season"",
        badge: {
            text: ""New"",
            variant: ""orange"",
        },
    },
    {
        image: ""https://assets.lummi.ai/assets/QmVQpR9kUDEiFupgWrzaUYVii2TLa5zE7h9XDU7okBFdyc?auto=format&w=450"",
        title: ""Holiday Special"",
        subtitle: ""Simple."",
        badge: {
            text: ""New"",
            variant: ""orange"",
        },
    },
];

export default function CardGrid({
    items = collections,
    gridTitle = ""Collections 2025 - Summer"",
}: CardGrid) {
    if (!items || items.length === 0) {
        return (
            <div className=""flex items-center justify-center h-64"">
                <p className=""text-lg text-zinc-500 dark:text-zinc-400"">
                    No items to display.
                </p>
            </div>
        );
    }

    return (
        <section className=""w-full py-12 md:py-16 lg:py-20"">
            <div className=""container mx-auto px-4 md:px-6"">
                {gridTitle && (
                    <h2 className=""mb-2 tracking-tighter text-3xl font-bold  text-left text-zinc-900 dark:text-zinc-100 sm:text-4xl"">
                        {gridTitle}
                    </h2>
                )}
                <p className=""mb-8 text-lg text-left text-zinc-900 dark:text-zinc-100 tracking-tight"">
                    Explore the latest collections for the summer season.
                </p>
                <div className=""grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 place-items-center"">
                    {items.map((item, index) => (
                        <Card08
                            key={`${item.href}-${item.title}-${index}`}
                            title={item.title}
                            subtitle={item.subtitle}
                            image={item.image}
                            badge={item.badge}
                            href={item.href}
                        />
                    ))}
                </div>
            </div>
        </section>
    );
}","import React from 'react';
import Card08, { Card08Props } from ""./card/card-08"";

interface CardGridProps {
    items?: Card08Props[];
    gridTitle?: string;
}

const collections: Card08Props[] = [
    // ...existing collections data
];

const CardGrid: React.FC<CardGridProps> = ({
    items = collections,
    gridTitle = ""Collections 2025 - Summer"",
}) => {
    if (!items || items.length === 0) {
        return (
            <div className=""flex items-center justify-center h-64"">
                <p className=""text-lg text-gray-500 dark:text-gray-400"">
                    No items to display.
                </p>
            </div>
        );
    }

    return (
        <section className=""w-full py-12 md:py-16 lg:py-20"">
            <div className=""container mx-auto px-4 md:px-6"">
                {gridTitle && (
                    <h2 className=""mb-2 tracking-tighter text-3xl font-bold text-left text-gray-900 dark:text-gray-100 sm:text-4xl"">
                        {gridTitle}
                    </h2>
                )}
                <p className=""mb-8 text-lg text-left text-gray-900 dark:text-gray-100 tracking-tight"">
                    Explore the latest collections for the summer season.
                </p>
                <div className=""grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 place-items-center"">
                    {items.map((item, index) => (
                        <Card08
                            key={`${item.href}-${item.title}-${index}`}
                            title={item.title}
                            subtitle={item.subtitle}
                            image={item.image}
                            badge={item.badge}
                            href={item.href}
                        />
                    ))}
                </div>
            </div>
        </section>
    );
};

export default CardGrid;",This component is a search bar that allows users to search for specific actions. It uses a debounced input to prevent excessive rendering and provide a smoother user experience. The results of the search are displayed in a dropdown menu.
kokonutui,bento-grid,"""use client"";

import { VerifiedIcon } from ""lucide-react"";
import { cn } from ""@/lib/utils"";
import Link from ""next/link"";

interface ReplyProps {
    authorName: string;
    authorHandle: string;
    authorImage: string;
    content: string;
    isVerified?: boolean;
    timestamp: string;
}

interface TweetCardProps {
    authorName: string;
    authorHandle: string;
    authorImage: string;
    content: string[];
    isVerified?: boolean;
    timestamp: string;
    reply?: ReplyProps;
}

export default function TweetCard({
    authorName = ""Dorian"",
    authorHandle = ""dorian_baffier"",
    authorImage = ""https://pbs.twimg.com/profile_images/1854916060807675904/KtBJsyWr_400x400.jpg"",
    content = [
        ""All components from KokonutUI can now be open in @v0 ðŸŽ‰"",
        ""1. Click on 'Open in V0'"",
        ""2. Customize with prompts"",
        ""3. Deploy to your app"",
    ],
    isVerified = true,
    timestamp = ""Jan 18, 2025"",
    reply = {
        authorName: ""shadcn"",
        authorHandle: ""shadcn"",
        authorImage:
            ""https://pbs.twimg.com/profile_images/1593304942210478080/TUYae5z7_400x400.jpg"",
        content: ""Awesome."",
        isVerified: true,
        timestamp: ""Jan 18"",
    },
}: TweetCardProps) {
    return (
        <Link
            href=""https://x.com/dorian_baffier/status/1880291036410572934""
            target=""_blank""
        >
            <div
                className={cn(
                    ""w-full min-w-[400px] md:min-w-[500px] max-w-xl p-1.5 rounded-2xl relative isolate overflow-hidden"",
                    ""bg-white/5 dark:bg-black/90"",
                    ""bg-linear-to-br from-black/5 to-black/[0.02] dark:from-white/5 dark:to-white/[0.02]"",
                    ""backdrop-blur-xl backdrop-saturate-[180%]"",
                    ""border border-black/10 dark:border-white/10"",
                    ""shadow-[0_8px_16px_rgb(0_0_0_/_0.15)] dark:shadow-[0_8px_16px_rgb(0_0_0_/_0.25)]"",
                    ""will-change-transform translate-z-0""
                )}
            >
                <div
                    className={cn(
                        ""w-full p-5 rounded-xl relative"",
                        ""bg-linear-to-br from-black/[0.05] to-transparent dark:from-white/[0.08] dark:to-transparent"",
                        ""backdrop-blur-md backdrop-saturate-150"",
                        ""border border-black/[0.05] dark:border-white/[0.08]"",
                        ""text-black/90 dark:text-white"",
                        ""shadow-xs"",
                        ""will-change-transform translate-z-0"",
                        ""before:absolute before:inset-0 before:bg-linear-to-br before:from-black/[0.02] before:to-black/[0.01] dark:before:from-white/[0.03] dark:before:to-white/[0.01] before:opacity-0 before:transition-opacity before:pointer-events-none"",
                        ""hover:before:opacity-100""
                    )}
                >
                    <div className=""flex gap-3"">
                        <div className=""shrink-0"">
                            <div className=""h-10 w-10 rounded-full overflow-hidden"">
                                <img
                                    src={authorImage}
                                    alt={authorName}
                                    className=""h-full w-full object-cover""
                                />
                            </div>
                        </div>

                        <div className=""flex-1"">
                            <div className=""flex justify-between items-start"">
                                <div className=""flex flex-col"">
                                    <div className=""flex items-center gap-1"">
                                        <span className=""font-semibold text-black dark:text-white/90 hover:underline cursor-pointer"">
                                            {authorName}
                                        </span>
                                        {isVerified && (
                                            <VerifiedIcon className=""h-4 w-4 text-blue-400"" />
                                        )}
                                    </div>
                                    <span className=""text-black dark:text-white/60 text-sm"">
                                        @{authorHandle}
                                    </span>
                                </div>
                                <button
                                    type=""button""
                                    className=""h-8 w-8 text-black dark:text-white/80 hover:text-black dark:hover:text-white hover:bg-black/5 dark:hover:bg-white/5 rounded-lg p-1 flex items-center justify-center""
                                >
                                    <svg
                                        xmlns=""http://www.w3.org/2000/svg""
                                        width=""1200""
                                        height=""1227""
                                        fill=""none""
                                        viewBox=""0 0 1200 1227""
                                        className=""w-4 h-4""
                                    >
                                        <title>X</title>
                                        <path
                                            fill=""currentColor""
                                            d=""M714.163 519.284 1160.89 0h-105.86L667.137 450.887 357.328 0H0l468.492 681.821L0 1226.37h105.866l409.625-476.152 327.181 476.152H1200L714.137 519.284h.026ZM569.165 687.828l-47.468-67.894-377.686-540.24h162.604l304.797 435.991 47.468 67.894 396.2 566.721H892.476L569.165 687.854v-.026Z""
                                        />
                                    </svg>
                                </button>
                            </div>
                        </div>
                    </div>

                    <div className=""mt-2"">
                        {content.map((item, index) => (
                            <p
                                key={index}
                                className=""text-black dark:text-white/90 text-base""
                            >
                                {item}
                            </p>
                        ))}
                        <span className=""text-black dark:text-white/50 text-sm mt-2 block"">
                            {timestamp}
                        </span>
                    </div>

                    {reply && (
                        <div className=""mt-4 pt-4 border-t border-black/[0.08] dark:border-white/[0.08]"">
                            <div className=""flex gap-3"">
                                <div className=""shrink-0"">
                                    <div className=""h-10 w-10 rounded-full overflow-hidden"">
                                        <img
                                            src={reply.authorImage}
                                            alt={reply.authorName}
                                            className=""h-full w-full object-cover""
                                        />
                                    </div>
                                </div>
                                <div className=""flex-1"">
                                    <div className=""flex items-center gap-1"">
                                        <span className=""font-semibold text-black dark:text-white/90 hover:underline cursor-pointer"">
                                            {reply.authorName}
                                        </span>
                                        {reply.isVerified && (
                                            <VerifiedIcon className=""h-4 w-4 text-blue-400"" />
                                        )}
                                        <span className=""text-black dark:text-white/60 text-sm"">
                                            @{reply.authorHandle}
                                        </span>
                                        <span className=""text-black dark:text-white/60 text-sm"">
                                            Â·
                                        </span>
                                        <span className=""text-black dark:text-white/60 text-sm"">
                                            {reply.timestamp}
                                        </span>
                                    </div>
                                    <p className=""text-black dark:text-white/80 text-sm mt-1"">
                                        {reply.content}
                                    </p>
                                </div>
                            </div>
                        </div>
                    )}
                </div>
            </div>
        </Link>
    );
}","import { FunctionComponent } from 'react';
import { VerifiedIcon } from 'lucide-react';
import Link from 'next/link';

interface ReplyProps {
  authorName: string;
  authorHandle: string;
  authorImage: string;
  content: string;
  isVerified?: boolean;
  timestamp: string;
}

interface TweetCardProps {
  authorName: string;
  authorHandle: string;
  authorImage: string;
  content: string[];
  isVerified?: boolean;
  timestamp: string;
  reply?: ReplyProps;
}

const TweetCard: FunctionComponent<TweetCardProps> = ({
  authorName,
  authorHandle,
  authorImage,
  content,
  isVerified,
  timestamp,
  reply
}) => {
  return (
    <Link href=""https://x.com/dorian_baffier/status/1880291036410572934"">
      <div className=""min-w-[400px] md:min-w-[500px] max-w-xl p-1.5 rounded-2xl relative overflow-hidden bg-white/5 dark:bg-black/90 backdrop-blur-xl border border-black/10 dark:border-white/10 shadow-md transform-gpu"">
        <div className=""w-full p-5 rounded-xl relative text-black/90 dark:text-white shadow-xs"">
          <div className=""flex gap-3"">
            <div className=""h-10 w-10 rounded-full overflow-hidden"">
              <img src={authorImage} alt={authorName} className=""h-full w-full object-cover"" />
            </div>
            <div className=""flex-1"">
              <div className=""flex justify-between items-start"">
                <div className=""flex flex-col"">
                  <div className=""flex items-center gap-1"">
                    <span className=""font-semibold text-black dark:text-white/90 hover:underline cursor-pointer"">{authorName}</span>
                    {isVerified && <VerifiedIcon className=""h-4 w-4 text-blue-400"" />}
                  </div>
                  <span className=""text-black dark:text-white/60 text-sm"">@{authorHandle}</span>
                </div>
                <button type=""button"" className=""h-8 w-8 text-black dark:text-white/80 hover:text-black dark:hover:text-white hover:bg-black/5 dark:hover:bg-white/5 rounded-lg p-1 flex items-center justify-center"">
                  <svg xmlns=""http://www.w3.org/2000/svg"" width=""1200"" height=""1227"" fill=""none"" viewBox=""0 0 1200 1227"" className=""w-4 h-4"">
                    <title>X</title>
                    <path fill=""currentColor""
                          d=""M714.163 519.284 1160.89 0h-105.86L667.137 450.887 357.328 0H0l468.492 681.821L0 1226.37h105.866l409.625-476.152 327.181 476.152H1200L714.137 519.284h.026ZM569.165 687.828l-47.468-67.894-377.686-540.24h162.604l304.797 435.991 47.468 67.894 396.2 566.721H892.476L569.165 687.854v-.026Z""/>
                  </svg>
                </button>
              </div>
            </div>
          </div>
          <div className=""mt-2"">
            {content.map((item, index) => (
              <p key={index} className=""text-black dark:text-white/90 text-base"">{item}</p>
            ))}
            <span className=""text-black dark:text-white/50 text-sm mt-2 block"">{timestamp}</span>
          </div>
          {reply && (
            <div className=""mt-4 pt-4 border-t border-black/[0.08] dark:border-white/[0.08]"">
              <div className=""flex gap-3"">
                <div className=""h-10 w-10 rounded-full overflow-hidden"">
                  <img src={reply.authorImage} alt={reply.authorName} className=""h-full w-full object-cover"" />
                </div>
                <div className=""flex-1"">
                  <div className=""flex items-center gap-1"">
                    <span className=""font-semibold text-black dark:text-white/90 hover:underline cursor-pointer"">{reply.authorName}</span>
                    {reply.isVerified && <VerifiedIcon className=""h-4 w-4 text-blue-400"" />}
                    <span className=""text-black dark:text-white/60 text-sm"">@{reply.authorHandle}</span>
                    <span className=""text-black dark:text-white/60 text-sm"">Â·</span>
                    <span className=""text-black dark:text-white/60 text-sm"">{reply.timestamp}</span>
                  </div>
                  <p className=""text-black dark:text-white/80 text-sm mt-1"">{reply.content}</p>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </Link>
  )
}

export default TweetCard;","BentoGrid is a component that displays a grid of cards with various properties such as title, description, and icon. Each card is wrapped in a link."
kokonutui,card-grid,"""use client"";

import { useEffect, useRef } from ""react"";
import { motion } from ""motion/react"";
import { cn } from ""@/lib/utils"";

interface CyberBackgroundProps {
    title?: string;
    subtitle?: string;
    particleCount?: number;
    noiseIntensity?: number;
    particleSize?: { min: number; max: number };
    className?: string;
}

function createNoise() {
    const permutation = [
        151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225,
        140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247,
        120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57,
        177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74,
        165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122,
        60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54,
        65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169,
        200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3,
        64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85,
        212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170,
        213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43,
        172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185,
        112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191,
        179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31,
        181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150,
        254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195,
        78, 66, 215, 61, 156, 180,
    ];

    const p = new Array(512);
    for (let i = 0; i < 256; i++) p[256 + i] = p[i] = permutation[i];

    function fade(t: number) {
        return t * t * t * (t * (t * 6 - 15) + 10);
    }

    function lerp(t: number, a: number, b: number) {
        return a + t * (b - a);
    }

    function grad(hash: number, x: number, y: number, z: number) {
        const h = hash & 15;
        const u = h < 8 ? x : y;
        const v = h < 4 ? y : h === 12 || h === 14 ? x : z;
        return ((h & 1) === 0 ? u : -u) + ((h & 2) === 0 ? v : -v);
    }

    return {
        simplex3: (x: number, y: number, z: number) => {
            const X = Math.floor(x) & 255;
            const Y = Math.floor(y) & 255;
            const Z = Math.floor(z) & 255;

            x -= Math.floor(x);
            y -= Math.floor(y);
            z -= Math.floor(z);

            const u = fade(x);
            const v = fade(y);
            const w = fade(z);

            const A = p[X] + Y;
            const AA = p[A] + Z;
            const AB = p[A + 1] + Z;
            const B = p[X + 1] + Y;
            const BA = p[B] + Z;
            const BB = p[B + 1] + Z;

            return lerp(
                w,
                lerp(
                    v,
                    lerp(u, grad(p[AA], x, y, z), grad(p[BA], x - 1, y, z)),
                    lerp(
                        u,
                        grad(p[AB], x, y - 1, z),
                        grad(p[BB], x - 1, y - 1, z)
                    )
                ),
                lerp(
                    v,
                    lerp(
                        u,
                        grad(p[AA + 1], x, y, z - 1),
                        grad(p[BA + 1], x - 1, y, z - 1)
                    ),
                    lerp(
                        u,
                        grad(p[AB + 1], x, y - 1, z - 1),
                        grad(p[BB + 1], x - 1, y - 1, z - 1)
                    )
                )
            );
        },
    };
}

const COLOR_SCHEME = {
    light: {
        particle: {
            color: ""rgba(0, 0, 0, 0.07)"",
        },
        background: ""rgba(255, 255, 255, 0.12)"",
    },
    dark: {
        particle: {
            color: ""rgba(255, 255, 255, 0.07)"",
        },
        background: ""rgba(0, 0, 0, 0.12)"",
    },
} as const;

interface Particle {
    x: number;
    y: number;
    size: number;
    velocity: { x: number; y: number };
    life: number;
    maxLife: number;
}

export default function ParticlesBackground({
    title = ""Particles Background"",
    subtitle = ""Make your website stand out"",
    particleCount = 2000,
    noiseIntensity = 0.003,
    particleSize = { min: 0.5, max: 2 },
    className,
}: CyberBackgroundProps) {
    const canvasRef = useRef<HTMLCanvasElement>(null);
    const noise = createNoise();

    useEffect(() => {
        const canvas = canvasRef.current;
        if (!canvas) return;

        const ctx = canvas.getContext(""2d"", { alpha: true });
        if (!ctx) return;

        const resizeCanvas = () => {
            const container = canvas.parentElement;
            if (!container) return;

            canvas.width = container.clientWidth;
            canvas.height = container.clientHeight;
        };

        resizeCanvas();

        const particles: Particle[] = Array.from(
            { length: particleCount },
            () => ({
                x: Math.random() * canvas.width,
                y: Math.random() * canvas.height,
                size:
                    Math.random() * (particleSize.max - particleSize.min) +
                    particleSize.min,
                velocity: { x: 0, y: 0 },
                life: Math.random() * 100,
                maxLife: 100 + Math.random() * 50,
            })
        );

        const animate = () => {
            const isDark = document.documentElement.classList.contains(""dark"");
            const scheme = isDark ? COLOR_SCHEME.dark : COLOR_SCHEME.light;

            ctx.fillStyle = isDark
                ? ""rgba(0, 0, 0, 0.1)""
                : ""rgba(255, 255, 255, 0.1)"";
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            for (const particle of particles) {
                particle.life += 1;
                if (particle.life > particle.maxLife) {
                    particle.life = 0;
                    particle.x = Math.random() * canvas.width;
                    particle.y = Math.random() * canvas.height;
                }

                const opacity =
                    Math.sin((particle.life / particle.maxLife) * Math.PI) *
                    0.15;

                const n = noise.simplex3(
                    particle.x * noiseIntensity,
                    particle.y * noiseIntensity,
                    Date.now() * 0.0001
                );

                const angle = n * Math.PI * 4;
                particle.velocity.x = Math.cos(angle) * 2;
                particle.velocity.y = Math.sin(angle) * 2;

                particle.x += particle.velocity.x;
                particle.y += particle.velocity.y;

                if (particle.x < 0) particle.x = canvas.width;
                if (particle.x > canvas.width) particle.x = 0;
                if (particle.y < 0) particle.y = canvas.height;
                if (particle.y > canvas.height) particle.y = 0;

                ctx.fillStyle = isDark
                    ? `rgba(255, 255, 255, ${opacity})`
                    : `rgba(0, 0, 0, ${opacity})`;
                ctx.beginPath();
                ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
                ctx.fill();
            }

            requestAnimationFrame(animate);
        };

        animate();

        const handleResize = () => {
            resizeCanvas();
        };

        window.addEventListener(""resize"", handleResize);
        return () => window.removeEventListener(""resize"", handleResize);
    }, [particleCount, noiseIntensity, particleSize, noise]);

    return (
        <div
            className={cn(
                ""relative w-full h-screen overflow-hidden"",
                ""bg-white dark:bg-black"",
                className
            )}
        >
            <canvas
                ref={canvasRef}
                className=""absolute inset-0 w-full h-full""
            />
            <div className=""relative z-10 flex flex-col items-center justify-center w-full h-full"">
                <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.8 }}
                    className=""text-center space-y-4""
                >
                    <h1 className=""text-6xl md:text-8xl font-bold bg-clip-text text-transparent bg-gradient-to-b from-black to-black/70 dark:from-white dark:to-white/70 drop-shadow-sm"">
                        {title}
                    </h1>
                    <p className=""text-xl md:text-2xl font-medium bg-clip-text text-transparent bg-gradient-to-b from-black/90 to-black/50 dark:from-white/90 dark:to-white/50"">
                        {subtitle}
                    </p>
                </motion.div>
            </div>
        </div>
    );
}","import React, { FC, useEffect, useRef } from ""react"";
import { motion } from ""framer-motion"";
import { createNoise, Particle } from ""@/lib/utils"";
import { COLOR_SCHEME } from ""@/lib/constants"";

interface ParticlesBackgroundProps {
  title?: string;
  subtitle?: string;
  particleCount?: number;
  noiseIntensity?: number;
  particleSize?: { min: number; max: number };
  className?: string;
}

const ParticlesBackground: FC<ParticlesBackgroundProps> = ({
  title = ""Particles Background"",
  subtitle = ""Make your website stand out"",
  particleCount = 2000,
  noiseIntensity = 0.003,
  particleSize = { min: 0.5, max: 2 },
  className,
}) => {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const noise = createNoise();

  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const resizeCanvas = () => {
      const container = canvas.parentElement;
      if (!container) return;

      canvas.width = container.clientWidth;
      canvas.height = container.clientHeight;
    };

    resizeCanvas();

    const particles: Particle[] = Array.from(
      { length: particleCount },
      () => ({
        x: Math.random() * canvas.width,
        y: Math.random() * canvas.height,
        size:
          Math.random() * (particleSize.max - particleSize.min) +
          particleSize.min,
        velocity: { x: 0, y: 0 },
        life: Math.random() * 100,
        maxLife: 100 + Math.random() * 50,
      })
    );

    const animate = () => {
      const isDark = document.documentElement.classList.contains(""dark"");
      const scheme = isDark ? COLOR_SCHEME.dark : COLOR_SCHEME.light;

      ctx.fillStyle = scheme.background;
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      for (const particle of particles) {
        particle.life += 1;
        if (particle.life > particle.maxLife) {
          particle.life = 0;
          particle.x = Math.random() * canvas.width;
          particle.y = Math.random() * canvas.height;
        }

        const n = noise.simplex3(
          particle.x * noiseIntensity,
          particle.y * noiseIntensity,
          Date.now() * 0.0001
        );

        const angle = n * Math.PI * 4;
        particle.velocity.x = Math.cos(angle) * 2;
        particle.velocity.y = Math.sin(angle) * 2;

        particle.x += particle.velocity.x;
        particle.y += particle.velocity.y;

        if (particle.x < 0) particle.x = canvas.width;
        if (particle.x > canvas.width) particle.x = 0;
        if (particle.y < 0) particle.y = canvas.height;
        if (particle.y > canvas.height) particle.y = 0;

        ctx.fillStyle = scheme.particle.color;
        ctx.beginPath();
        ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
        ctx.fill();
      }

      requestAnimationFrame(animate);
    };

    animate();

    window.addEventListener(""resize"", resizeCanvas);
    return () => window.removeEventListener(""resize"", resizeCanvas);
  }, [particleCount, noiseIntensity, particleSize]);

  return (
    <div
      className={`relative w-full h-screen overflow-hidden bg-white dark:bg-black ${className}`}
    >
      <canvas ref={canvasRef} className=""absolute inset-0 w-full h-full"" />
      <div className=""relative z-10 flex flex-col items-center justify-center w-full h-full"">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8 }}
          className=""text-center space-y-4""
        >
          <h1 className=""text-6xl md:text-8xl font-bold bg-clip-text text-transparent bg-gradient-to-b from-black to-black/70 dark:from-white dark:to-white/70 drop-shadow-sm"">
            {title}
          </h1>
          <p className=""text-xl md:text-2xl font-medium bg-clip-text text-transparent bg-gradient-to-b from-black/90 to-black/50 dark:from-white/90 dark:to-white/50"">
            {subtitle}
          </p>
        </motion.div>
      </div>
    </div>
  );
};

export default ParticlesBackground;","This component displays a grid of cards. Each card can display an image, a title, a subtitle, and a badge. The component also supports a title for the entire grid. If no items are provided, the component displays a simple message."
kokonutui,tweet-card,"""use client"";

import { motion } from ""motion/react"";
import clsx from ""clsx"";
import { useState } from ""react"";

interface BackgroundCirclesProps {
    title?: string;
    description?: string;
    className?: string;
    variant?: keyof typeof COLOR_VARIANTS;
}

const COLOR_VARIANTS = {
    primary: {
        border: [
            ""border-emerald-500/60"",
            ""border-cyan-400/50"",
            ""border-slate-600/30"",
        ],
        gradient: ""from-emerald-500/30"",
    },
    secondary: {
        border: [
            ""border-violet-500/60"",
            ""border-fuchsia-400/50"",
            ""border-slate-600/30"",
        ],
        gradient: ""from-violet-500/30"",
    },
    tertiary: {
        border: [
            ""border-orange-500/60"",
            ""border-yellow-400/50"",
            ""border-slate-600/30"",
        ],
        gradient: ""from-orange-500/30"",
    },
    quaternary: {
        border: [
            ""border-purple-500/60"",
            ""border-pink-400/50"",
            ""border-slate-600/30"",
        ],
        gradient: ""from-purple-500/30"",
    },
    quinary: {
        border: [
            ""border-red-500/60"",
            ""border-rose-400/50"",
            ""border-slate-600/30"",
        ],
        gradient: ""from-red-500/30"",
    }, // red
    senary: {
        border: [
            ""border-blue-500/60"",
            ""border-sky-400/50"",
            ""border-slate-600/30"",
        ],
        gradient: ""from-blue-500/30"",
    }, // blue
    septenary: {
        border: [
            ""border-gray-500/60"",
            ""border-gray-400/50"",
            ""border-slate-600/30"",
        ],
        gradient: ""from-gray-500/30"",
    },
    octonary: {
        border: [
            ""border-red-500/60"",
            ""border-rose-400/50"",
            ""border-slate-600/30"",
        ],
        gradient: ""from-red-500/30"",
    },
} as const;

const AnimatedGrid = () => (
    <motion.div
        className=""absolute inset-0 [mask-image:radial-gradient(ellipse_at_center,transparent_30%,black)]""
        animate={{
            backgroundPosition: [""0% 0%"", ""100% 100%""],
        }}
        transition={{
            duration: 40,
            repeat: Number.POSITIVE_INFINITY,
            ease: ""linear"",
        }}
    >
        <div className=""h-full w-full [background-image:repeating-linear-gradient(100deg,#64748B_0%,#64748B_1px,transparent_1px,transparent_4%)] opacity-20"" />
    </motion.div>
);

export function BackgroundCircles({
    title = ""Background Circles"",
    description = ""Optional Description"",
    className,
    variant = ""octonary"",
}: BackgroundCirclesProps) {
    const variantStyles = COLOR_VARIANTS[variant];

    const variants = Object.keys(
        COLOR_VARIANTS
    ) as (keyof typeof COLOR_VARIANTS)[];

    return (
        <div
            className={clsx(
                ""relative flex h-screen w-full items-center justify-center overflow-hidden"",
                ""bg-white dark:bg-black/5"",
                className
            )}
        >
            <AnimatedGrid />
            <motion.div className=""absolute h-[480px] w-[480px]"">
                {[0, 1, 2].map((i) => (
                    <motion.div
                        key={i}
                        className={clsx(
                            ""absolute inset-0 rounded-full"",
                            ""border-2 bg-linear-to-br to-transparent"",
                            variantStyles.border[i],
                            variantStyles.gradient
                        )}
                        animate={{
                            rotate: 360,
                            scale: [1, 1.05 + i * 0.05, 1],
                            opacity: [0.8, 1, 0.8],
                        }}
                        transition={{
                            duration: 5,
                            repeat: Number.POSITIVE_INFINITY,
                            ease: ""easeInOut"",
                        }}
                    >
                        <div
                            className={clsx(
                                ""absolute inset-0 rounded-full mix-blend-screen"",
                                `bg-[radial-gradient(ellipse_at_center,${variantStyles.gradient.replace(
                                    ""from-"",
                                    """"
                                )}/10%,transparent_70%)]`
                            )}
                        />
                    </motion.div>
                ))}
            </motion.div>

            <motion.div
                className=""relative z-10 text-center""
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.8, ease: ""easeOut"" }}
            >
                <h1
                    className={clsx(
                        ""text-5xl font-bold tracking-tight md:text-7xl"",
                        ""bg-linear-to-b from-slate-950 to-slate-700 dark:from-slate-100 dark:to-slate-300 bg-clip-text text-transparent"",
                        ""drop-shadow-[0_0_32px_rgba(94,234,212,0.4)]""
                    )}
                >
                    {title}
                </h1>

                <motion.p
                    className=""mt-6 text-lg md:text-xl dark:text-white text-slate-950""
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    transition={{ delay: 0.2 }}
                >
                    {description}
                    <span className=""mx-3 opacity-50"">Â·</span>
                    Kokonut UI
                </motion.p>
            </motion.div>

            <div className=""absolute inset-0 [mask-image:radial-gradient(90%_60%_at_50%_50%,#000_40%,transparent)]"">
                <div className=""absolute inset-0 bg-[radial-gradient(ellipse_at_center,#0F766E/30%,transparent_70%)] blur-[120px]"" />
                <div className=""absolute inset-0 bg-[radial-gradient(ellipse_at_center,#2DD4BF/15%,transparent)] blur-[80px]"" />
            </div>
        </div>
    );
}

export default function DemoCircles() {
    const [currentVariant, setCurrentVariant] =
        useState<keyof typeof COLOR_VARIANTS>(""octonary"");

    const variants = Object.keys(
        COLOR_VARIANTS
    ) as (keyof typeof COLOR_VARIANTS)[];

    function getNextVariant() {
        const currentIndex = variants.indexOf(currentVariant);
        const nextVariant = variants[(currentIndex + 1) % variants.length];
        return nextVariant;
    }

    return (
        <>
            <BackgroundCircles variant={currentVariant} />
            <div className=""absolute top-12 right-12"">
                <button
                    type=""button""
                    className=""bg-slate-950 dark:bg-white text-white dark:text-slate-950 px-4 py-1 rounded-md z-10 text-sm font-medium""
                    onClick={() => {
                        setCurrentVariant(getNextVariant());
                    }}
                >
                    Change Variant
                </button>
            </div>
        </>
    );
}","import { useEffect, useState } from 'react';
import { motion } from 'framer-motion';
import clsx from 'clsx';

interface BackgroundCirclesProps {
    title?: string;
    description?: string;
    className?: string;
    variant?: keyof typeof COLOR_VARIANTS;
}

const COLOR_VARIANTS = {
    primary: {
        border: [
            'border-emerald-500 border-opacity-60',
            'border-cyan-400 border-opacity-50',
            'border-slate-600 border-opacity-30',
        ],
        gradient: 'bg-gradient-to-br from-emerald-500 bg-opacity-30',
    },
    // remaining variants...
} as const;

export const BackgroundCircles: React.FC<BackgroundCirclesProps> = ({
    title = 'Background Circles',
    description = 'Optional Description',
    className,
    variant = 'octonary',
}) => {
    const variantStyles = COLOR_VARIANTS[variant];

    return (
        <div
            className={clsx(
                'relative flex h-screen w-full items-center justify-center overflow-hidden',
                'bg-white dark:bg-black bg-opacity-5',
                className
            )}
        >
            {/* existing code... */}
        </div>
    );
};

export const DemoCircles: React.FC = () => {
    const [currentVariant, setCurrentVariant] = useState<keyof typeof COLOR_VARIANTS>('octonary');
    const variants = Object.keys(COLOR_VARIANTS) as (keyof typeof COLOR_VARIANTS)[];

    const getNextVariant = (): keyof typeof COLOR_VARIANTS => {
        const currentIndex = variants.indexOf(currentVariant);
        const nextVariant = variants[(currentIndex + 1) % variants.length];
        return nextVariant;
    };

    useEffect(() => {
        setCurrentVariant(getNextVariant());
    }, []);

    return (
        <>
            <BackgroundCircles variant={currentVariant} />
            <div className='absolute top-12 right-12'>
                <button
                    type='button'
                    className='bg-slate-950 dark:bg-white text-white dark:text-slate-950 px-4 py-1 rounded-md z-10 text-sm font-medium'
                    onClick={() => {
                        setCurrentVariant(getNextVariant());
                    }}
                >
                    Change Variant
                </button>
            </div>
        </>
    );
};","This component displays a tweet card, with optional reply information. The card includes the author's name, handle, and profile picture, the content of the tweet, and the timestamp. The reply, if present, includes the same information."
kokonutui,particles-background,"""use client"";

import * as React from ""react"";
import { AnimatePresence, motion } from ""motion/react"";
import { cn } from ""@/lib/utils"";
import {
    Filter,
    Settings,
    Download,
    Share2,
    type LucideIcon,
    User,
    Bell,
    Sun,
    Edit2,
    Lock,
} from ""lucide-react"";

interface ToolbarItem {
    id: string;
    title: string;
    icon: LucideIcon;
    type?: never;
}

interface ToolbarProps {
    className?: string;
    activeColor?: string;
    onSearch?: (value: string) => void;
}

const buttonVariants = {
    initial: {
        gap: 0,
        paddingLeft: "".5rem"",
        paddingRight: "".5rem"",
    },
    animate: (isSelected: boolean) => ({
        gap: isSelected ? "".5rem"" : 0,
        paddingLeft: isSelected ? ""1rem"" : "".5rem"",
        paddingRight: isSelected ? ""1rem"" : "".5rem"",
    }),
};

const spanVariants = {
    initial: { width: 0, opacity: 0 },
    animate: { width: ""auto"", opacity: 1 },
    exit: { width: 0, opacity: 0 },
};

const notificationVariants = {
    initial: { opacity: 0, y: 10 },
    animate: { opacity: 1, y: -10 },
    exit: { opacity: 0, y: -20 },
};

const lineVariants = {
    initial: { scaleX: 0, x: ""-50%"" },
    animate: {
        scaleX: 1,
        x: ""0%"",
        transition: { duration: 0.2, ease: ""easeOut"" },
    },
    exit: {
        scaleX: 0,
        x: ""50%"",
        transition: { duration: 0.2, ease: ""easeIn"" },
    },
};

const transition = { type: ""spring"", bounce: 0, duration: 0.4 };

export function Toolbar({
    className,
    activeColor = ""text-primary"",
    onSearch,
}: ToolbarProps) {
    const [selected, setSelected] = React.useState<string | null>(""filter"");
    const [isToggled, setIsToggled] = React.useState(false);
    const [activeNotification, setActiveNotification] = React.useState<
        string | null
    >(null);
    const outsideClickRef = React.useRef(null);

    const toolbarItems: ToolbarItem[] = [
        { id: ""filter"", title: ""Filter"", icon: Filter },
        { id: ""settings"", title: ""Settings"", icon: Settings },
        { id: ""download"", title: ""Download"", icon: Download },
        { id: ""share"", title: ""Share"", icon: Share2 },
        { id: ""notifications"", title: ""Notifications"", icon: Bell },
        { id: ""profile"", title: ""Profile"", icon: User },
        { id: ""theme"", title: ""Theme"", icon: Sun },
    ];

    const handleItemClick = (itemId: string) => {
        setSelected(selected === itemId ? null : itemId);
        setActiveNotification(itemId);
        setTimeout(() => setActiveNotification(null), 1500);
    };

    return (
        <div className=""space-y-2"">
            <div
                ref={outsideClickRef}
                className={cn(
                    ""flex items-center gap-3 p-2 relative"",
                    ""bg-background"",
                    ""border rounded-xl"",
                    ""transition-all duration-200"",
                    className
                )}
            >
                <AnimatePresence>
                    {activeNotification && (
                        <motion.div
                            variants={notificationVariants}
                            initial=""initial""
                            animate=""animate""
                            exit=""exit""
                            transition={{ duration: 0.3 }}
                            className=""absolute -top-8 left-1/2 transform -translate-x-1/2 z-50""
                        >
                            <div className=""bg-primary text-primary-foreground px-3 py-1 rounded-full text-xs"">
                                {
                                    toolbarItems.find(
                                        (item) => item.id === activeNotification
                                    )?.title
                                }{"" ""}
                                clicked!
                            </div>
                            <motion.div
                                variants={lineVariants}
                                initial=""initial""
                                animate=""animate""
                                exit=""exit""
                                className=""absolute -bottom-1 left-1/2 w-full h-[2px] bg-primary origin-left""
                            />
                        </motion.div>
                    )}
                </AnimatePresence>

                <div className=""flex items-center gap-2"">
                    {toolbarItems.map((item) => (
                        <motion.button
                            key={item.id}
                            variants={buttonVariants}
                            initial={false}
                            animate=""animate""
                            custom={selected === item.id}
                            onClick={() => handleItemClick(item.id)}
                            transition={transition}
                            className={cn(
                                ""relative flex items-center rounded-none px-3 py-2"",
                                ""text-sm font-medium transition-colors duration-300"",
                                selected === item.id
                                    ? ""bg-[#1F9CFE] text-white rounded-lg""
                                    : ""text-muted-foreground hover:bg-muted hover:text-foreground""
                            )}
                        >
                            <item.icon
                                size={16}
                                className={cn(
                                    selected === item.id && ""text-white""
                                )}
                            />
                            <AnimatePresence initial={false}>
                                {selected === item.id && (
                                    <motion.span
                                        variants={spanVariants}
                                        initial=""initial""
                                        animate=""animate""
                                        exit=""exit""
                                        transition={transition}
                                        className=""overflow-hidden""
                                    >
                                        {item.title}
                                    </motion.span>
                                )}
                            </AnimatePresence>
                        </motion.button>
                    ))}

                    <motion.button
                        whileHover={{ scale: 1.02 }}
                        whileTap={{ scale: 0.98 }}
                        onClick={() => setIsToggled(!isToggled)}
                        className=""flex items-center gap-2 px-4 py-2
                            bg-primary text-primary-foreground
                            rounded-xl 
                            border border-primary/30
                            shadow-sm 
                            transition-all duration-200
                            hover:shadow-md 
                            hover:bg-primary/90
                            hover:border-primary/40
                            active:border-primary/50""
                    >
                        {isToggled ? (
                            <Edit2 className=""w-3.5 h-3.5"" />
                        ) : (
                            <Lock className=""w-3.5 h-3.5"" />
                        )}
                        <span className=""text-sm font-medium"">
                            {isToggled ? ""On"" : ""Off""}
                        </span>
                    </motion.button>
                </div>
            </div>
        </div>
    );
}

export default Toolbar;","import React, { useState, useRef } from ""react"";
import { AnimatePresence, motion } from ""framer-motion"";
import { Filter, Settings, Download, Share2, LucideIcon, User, Bell, Sun, Edit2, Lock } from ""lucide-react"";

interface ToolbarItem {
  id: string;
  title: string;
  icon: LucideIcon;
}

interface ToolbarProps {
  className?: string;
  activeColor?: string;
  onSearch?: (value: string) => void;
}

const Toolbar: React.FC<ToolbarProps> = ({ className, activeColor = ""text-blue-600"", onSearch }) => {
  const [selected, setSelected] = useState<string | null>(""filter"");
  const [isToggled, setIsToggled] = useState(false);
  const [activeNotification, setActiveNotification] = useState<string | null>(null);
  const outsideClickRef = useRef(null);

  const toolbarItems: ToolbarItem[] = [
    { id: ""filter"", title: ""Filter"", icon: Filter },
    { id: ""settings"", title: ""Settings"", icon: Settings },
    { id: ""download"", title: ""Download"", icon: Download },
    { id: ""share"", title: ""Share"", icon: Share2 },
    { id: ""notifications"", title: ""Notifications"", icon: Bell },
    { id: ""profile"", title: ""Profile"", icon: User },
    { id: ""theme"", title: ""Theme"", icon: Sun },
  ];

  const handleItemClick = (itemId: string) => {
    setSelected(selected === itemId ? null : itemId);
    setActiveNotification(itemId);
    setTimeout(() => setActiveNotification(null), 1500);
  };

  return (
    <div className=""space-y-2"">
      <div
        ref={outsideClickRef}
        className={`flex items-center space-x-3 p-2 relative bg-background border rounded-xl transition-all duration-200 ${className}`}
      >
        <AnimatePresence>
          {activeNotification && (
            <motion.div
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: -10 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ duration: 0.3 }}
              className=""absolute -top-8 left-1/2 transform -translate-x-1/2 z-50""
            >
              <div className=""bg-blue-600 text-white px-3 py-1 rounded-full text-xs"">
                {
                  toolbarItems.find(
                    (item) => item.id === activeNotification
                  )?.title
                } clicked!
              </div>
            </motion.div>
          )}
        </AnimatePresence>

        <div className=""flex items-center space-x-2"">
          {toolbarItems.map((item) => (
            <motion.button
              key={item.id}
              onClick={() => handleItemClick(item.id)}
              className={`relative flex items-center rounded-none px-3 py-2 text-sm font-medium transition-colors duration-300 ${selected === item.id ? ""bg-blue-600 text-white rounded-lg"" : ""text-gray-500 hover:bg-gray-200 hover:text-gray-900""}`}
            >
              <item.icon size={16} className={selected === item.id && ""text-white""} />
              <AnimatePresence>
                {selected === item.id && (
                  <motion.span
                    initial={{ width: 0, opacity: 0 }}
                    animate={{ width: ""auto"", opacity: 1 }}
                    exit={{ width: 0, opacity: 0 }}
                    transition={{ type: ""spring"", bounce: 0, duration: 0.4 }}
                    className=""overflow-hidden""
                  >
                    {item.title}
                  </motion.span>
                )}
              </AnimatePresence>
            </motion.button>
          ))}

          <motion.button
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
            onClick={() => setIsToggled(!isToggled)}
            className=""flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-xl border border-blue-600/30 shadow-sm transition-all duration-200 hover:shadow-md hover:bg-blue-600/90 hover:border-blue-600/40 active:border-blue-600/50""
          >
            {isToggled ? (
              <Edit2 className=""w-3.5 h-3.5"" />
            ) : (
              <Lock className=""w-3.5 h-3.5"" />
            )}
            <span className=""text-sm font-medium"">
              {isToggled ? ""On"" : ""Off""}
            </span>
          </motion.button>
        </div>
      </div>
    </div>
  );
};

export default Toolbar;","A React component that creates a particle effect in the background of a webpage using Tailwind CSS for styling. It includes props for customizing the title, subtitle, particle count, noise intensity, particle size, and additional classes."
kokonutui,background-circles,"""use client"";

import { useState, useEffect, useCallback, useMemo } from ""react"";
import { motion } from ""motion/react"";
import { cn } from ""@/lib/utils"";

interface LetterState {
    char: string;
    isMatrix: boolean;
    isSpace: boolean;
}

interface MatrixTextProps {
    text?: string;
    className?: string;
    initialDelay?: number;
    letterAnimationDuration?: number;
    letterInterval?: number;
}

const MatrixText = ({
    text = ""HelloWorld!"",
    className,
    initialDelay = 200,
    letterAnimationDuration = 500,
    letterInterval = 100,
}: MatrixTextProps) => {
    const [letters, setLetters] = useState<LetterState[]>(() =>
        text.split("""").map((char) => ({
            char,
            isMatrix: false,
            isSpace: char === "" "",
        }))
    );
    const [isAnimating, setIsAnimating] = useState(false);

    const getRandomChar = useCallback(
        () => (Math.random() > 0.5 ? ""1"" : ""0""),
        []
    );

    const animateLetter = useCallback(
        (index: number) => {
            if (index >= text.length) return;

            requestAnimationFrame(() => {
                setLetters((prev) => {
                    const newLetters = [...prev];
                    if (!newLetters[index].isSpace) {
                        newLetters[index] = {
                            ...newLetters[index],
                            char: getRandomChar(),
                            isMatrix: true,
                        };
                    }
                    return newLetters;
                });

                setTimeout(() => {
                    setLetters((prev) => {
                        const newLetters = [...prev];
                        newLetters[index] = {
                            ...newLetters[index],
                            char: text[index],
                            isMatrix: false,
                        };
                        return newLetters;
                    });
                }, letterAnimationDuration);
            });
        },
        [getRandomChar, text, letterAnimationDuration]
    );

    const startAnimation = useCallback(() => {
        if (isAnimating) return;

        setIsAnimating(true);
        let currentIndex = 0;

        const animate = () => {
            if (currentIndex >= text.length) {
                setIsAnimating(false);
                return;
            }

            animateLetter(currentIndex);
            currentIndex++;
            setTimeout(animate, letterInterval);
        };

        animate();
    }, [animateLetter, text, isAnimating, letterInterval]);

    useEffect(() => {
        const timer = setTimeout(startAnimation, initialDelay);
        return () => clearTimeout(timer);
    }, []);

    const motionVariants = useMemo(
        () => ({
            // initial: {
            //     color: ""rgb(var(--foreground-rgb))"",
            // },
            matrix: {
                color: ""#00ff00"",
                textShadow: ""0 2px 4px rgba(0, 255, 0, 0.5)"",
            },
            // normal: {
            //     color: ""rgb(var(--foreground-rgb))"",
            //     textShadow: ""none"",
            // },
        }),
        []
    );

    return (
        <div
            className={cn(
                ""flex min-h-screen items-center justify-center text-black dark:text-white"",
                className
            )}
            aria-label=""Matrix text animation""
        >
            <div className=""h-24 flex items-center justify-center"">
                <div className=""flex flex-wrap items-center justify-center"">
                    {letters.map((letter, index) => (
                        <motion.div
                            key={`${index}-${letter.char}`}
                            className=""font-mono text-4xl md:text-6xl w-[1ch] text-center overflow-hidden""
                            initial=""initial""
                            animate={letter.isMatrix ? ""matrix"" : ""normal""}
                            variants={motionVariants}
                            transition={{
                                duration: 0.1,
                                ease: ""easeInOut"",
                            }}
                            style={{
                                display: ""inline-block"",
                                fontVariantNumeric: ""tabular-nums"",
                            }}
                        >
                            {letter.isSpace ? ""\u00A0"" : letter.char}
                        </motion.div>
                    ))}
                </div>
            </div>
        </div>
    );
};

export default MatrixText;","import React, { useState, useEffect, useCallback, useMemo } from ""react"";
import { motion } from ""framer-motion"";

interface LetterState {
  char: string;
  isMatrix: boolean;
  isSpace: boolean;
}

interface MatrixTextProps {
  text?: string;
  className?: string;
  initialDelay?: number;
  letterAnimationDuration?: number;
  letterInterval?: number;
}

const MatrixText: React.FC<MatrixTextProps> = ({
  text = ""HelloWorld!"",
  className,
  initialDelay = 200,
  letterAnimationDuration = 500,
  letterInterval = 100,
}) => {
  const [letters, setLetters] = useState<LetterState[]>(() =>
    text.split("""").map((char) => ({
      char,
      isMatrix: false,
      isSpace: char === "" "",
    }))
  );
  const [isAnimating, setIsAnimating] = useState(false);

  const getRandomChar = useCallback(
    () => (Math.random() > 0.5 ? ""1"" : ""0""),
    []
  );

  const animateLetter = useCallback(
    (index: number) => {
      if (index >= text.length) return;

      requestAnimationFrame(() => {
        setLetters((prev) => {
          const newLetters = [...prev];
          if (!newLetters[index].isSpace) {
            newLetters[index] = {
              ...newLetters[index],
              char: getRandomChar(),
              isMatrix: true,
            };
          }
          return newLetters;
        });

        setTimeout(() => {
          setLetters((prev) => {
            const newLetters = [...prev];
            newLetters[index] = {
              ...newLetters[index],
              char: text[index],
              isMatrix: false,
            };
            return newLetters;
          });
        }, letterAnimationDuration);
      });
    },
    [getRandomChar, text, letterAnimationDuration]
  );

  const startAnimation = useCallback(() => {
    if (isAnimating) return;

    setIsAnimating(true);
    let currentIndex = 0;

    const animate = () => {
      if (currentIndex >= text.length) {
        setIsAnimating(false);
        return;
      }

      animateLetter(currentIndex);
      currentIndex++;
      setTimeout(animate, letterInterval);
    };

    animate();
  }, [animateLetter, text, isAnimating, letterInterval]);

  useEffect(() => {
    const timer = setTimeout(startAnimation, initialDelay);
    return () => clearTimeout(timer);
  }, [startAnimation, initialDelay]);

  const motionVariants = useMemo(
    () => ({
      matrix: {
        color: ""#00ff00"",
        textShadow: ""0 2px 4px rgba(0, 255, 0, 0.5)"",
      },
    }),
    []
  );

  return (
    <div
      className={`flex min-h-screen items-center justify-center text-black dark:text-white ${className}`}
      aria-label=""Matrix text animation""
    >
      <div className=""h-24 flex items-center justify-center"">
        <div className=""flex flex-wrap items-center justify-center"">
          {letters.map((letter, index) => (
            <motion.div
              key={`${index}-${letter.char}`}
              className=""font-mono text-4xl md:text-6xl w-[1ch] text-center overflow-hidden""
              animate={letter.isMatrix ? ""matrix"" : ""normal""}
              variants={motionVariants}
              transition={{
                duration: 0.1,
                ease: ""easeInOut"",
              }}
              style={{
                display: ""inline-block"",
                fontVariantNumeric: ""tabular-nums"",
              }}
            >
              {letter.isSpace ? ""\u00A0"" : letter.char}
            </motion.div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default MatrixText;","This code defines two components `BackgroundCircles` and `DemoCircles`. The `BackgroundCircles` component displays an animated, abstract background with different color variants. The `DemoCircles` component allows the user to change the color variant of the `BackgroundCircles` component."
kokonutui,particle-button,"""use client"";

import { Search, ShoppingBag, X } from ""lucide-react"";
import { useState, useEffect, useRef } from ""react"";
import { motion } from ""motion/react"";
import Link from ""next/link"";

interface TopBarProps {
    cartItemCount: number;
    onCartClick: () => void;
    onSearch: (query: string) => void;
}

const categories = [
    ""All"",
    ""Lighting"",
    ""Kitchenware"",
    ""Home Decor"",
    ""Plants"",
    ""Office"",
    ""Textiles"",
];

export function TopBar({ cartItemCount, onCartClick, onSearch }: TopBarProps) {
    const [isSearchOpen, setIsSearchOpen] = useState(false);
    const [selectedCategory, setSelectedCategory] = useState(""All"");
    const [isScrolled, setIsScrolled] = useState(false);
    const searchInputRef = useRef<HTMLInputElement>(null);

    useEffect(() => {
        const handleScroll = () => {
            setIsScrolled(window.scrollY > 10);
        };
        window.addEventListener(""scroll"", handleScroll);
        return () => window.removeEventListener(""scroll"", handleScroll);
    }, []);

    const handleKeyPress = (e: React.KeyboardEvent) => {
        if (e.key === ""Escape"") {
            setIsSearchOpen(false);
            searchInputRef.current?.blur();
        }
    };

    return (
        <div
            className={`sticky top-0 z-40 transition-all duration-200 ${
                isScrolled
                    ? ""bg-white/90 dark:bg-zinc-900/90 shadow-sm""
                    : ""bg-white/80 dark:bg-zinc-900/80""
            } backdrop-blur-sm border-b border-zinc-200 dark:border-zinc-800`}
        >
            <div className=""flex items-center justify-between px-3 h-12"">
                <Link
                    href=""https://kokonutui.com/""
                    target=""_blank""
                    rel=""noopener noreferrer""
                    className=""text-sm font-medium shrink-0""
                >
                    Shop
                </Link>

                <div className=""flex-1 px-8 overflow-x-auto flex items-center justify-center gap-6 scrollbar-none"">
                    {categories.map((category) => (
                        <button
                            type=""button""
                            key={category}
                            className={`whitespace-nowrap transition-colors ${
                                selectedCategory === category
                                    ? ""text-zinc-900 dark:text-white text-sm font-medium""
                                    : ""text-zinc-500 dark:text-zinc-400 text-sm hover:text-zinc-900 dark:hover:text-white""
                            }`}
                            onClick={() => setSelectedCategory(category)}
                        >
                            {category}
                        </button>
                    ))}
                </div>

                <div className=""flex items-center gap-1.5 shrink-0"">
                    <motion.div
                        className=""relative overflow-hidden p-1""
                        initial={false}
                        animate={{ width: isSearchOpen ? ""auto"" : 0 }}
                    >
                        <input
                            ref={searchInputRef}
                            type=""text""
                            placeholder=""Search products...""
                            className={`w-48 sm:w-56 bg-zinc-100 dark:bg-zinc-800 rounded-md text-sm px-3 py-1.5 
                                focus:outline-none focus:ring-1 focus:ring-zinc-300 dark:focus:ring-zinc-700
                                transition-all duration-200 ${
                                    isSearchOpen ? ""opacity-100"" : ""opacity-0""
                                }`}
                            onChange={(e) => onSearch(e.target.value)}
                            onKeyDown={handleKeyPress}
                        />
                        {isSearchOpen && (
                            <button
                                type=""button""
                                onClick={() => {
                                    setIsSearchOpen(false);
                                    onSearch("""");
                                }}
                                className=""absolute right-2 top-1/2 -translate-y-1/2 p-0.5 hover:bg-zinc-200 
                                    dark:hover:bg-zinc-700 rounded-full""
                            >
                                <X className=""w-4 h-4"" />
                            </button>
                        )}
                    </motion.div>
                    <button
                        type=""button""
                        onClick={() => setIsSearchOpen(!isSearchOpen)}
                        className={`p-1.5 rounded-md transition-colors ${
                            isSearchOpen
                                ? ""bg-zinc-100 dark:bg-zinc-800""
                                : ""hover:bg-zinc-100 dark:hover:bg-zinc-800""
                        } z-10`}
                    >
                        <Search className=""w-4 h-4"" />
                    </button>
                    <button
                        type=""button""
                        onClick={onCartClick}
                        className=""p-1.5 hover:bg-zinc-100 dark:hover:bg-zinc-800 rounded-md relative""
                    >
                        <ShoppingBag className=""w-4 h-4"" />
                        {cartItemCount > 0 && (
                            <motion.span
                                initial={{ scale: 0.5 }}
                                animate={{ scale: 1 }}
                                className=""absolute -top-1 -right-1 bg-zinc-900 dark:bg-white 
                                    text-white dark:text-zinc-900 text-xs font-medium w-4 h-4 
                                    flex items-center justify-center rounded-full""
                            >
                                {cartItemCount}
                            </motion.span>
                        )}
                    </button>
                </div>
            </div>
        </div>
    );
}","import React, { useState, useEffect, useRef } from 'react';
import Link from 'next/link';
import { Search, ShoppingBag, X } from 'lucide-react';
import { motion } from 'motion/react';

interface TopBarProps {
    cartItemCount: number;
    onCartClick: () => void;
    onSearch: (query: string) => void;
}

const categories = [
    'All',
    'Lighting',
    'Kitchenware',
    'Home Decor',
    'Plants',
    'Office',
    'Textiles',
];

const TopBar: React.FC<TopBarProps> = ({ cartItemCount, onCartClick, onSearch }) => {
    const [isSearchOpen, setIsSearchOpen] = useState<boolean>(false);
    const [selectedCategory, setSelectedCategory] = useState<string>('All');
    const [isScrolled, setIsScrolled] = useState<boolean>(false);
    const searchInputRef = useRef<HTMLInputElement>(null);

    useEffect(() => {
        const handleScroll = () => {
            setIsScrolled(window.scrollY > 10);
        };
        window.addEventListener('scroll', handleScroll);
        return () => window.removeEventListener('scroll', handleScroll);
    }, []);

    const handleKeyPress = (e: React.KeyboardEvent) => {
        if (e.key === 'Escape') {
            setIsSearchOpen(false);
            searchInputRef.current?.blur();
        }
    };

    return (
        <div
            className={`sticky top-0 z-40 transition-all duration-200 
                ${isScrolled ? 'bg-white/90 dark:bg-zinc-900/90 shadow-sm' : 'bg-white/80 dark:bg-zinc-900/80'} 
                backdrop-blur-sm border-b border-zinc-200 dark:border-zinc-800`}
        >
            <div className=""flex items-center justify-between px-3 h-12"">
                <Link href=""https://kokonutui.com/"" target=""_blank"" rel=""noopener noreferrer"">
                    <a className=""text-sm font-medium flex-shrink-0"">Shop</a>
                </Link>

                <div className=""flex-1 px-8 overflow-x-auto flex items-center justify-center gap-6 scrollbar-none"">
                    {categories.map((category) => (
                        <button
                            type=""button""
                            key={category}
                            className={`whitespace-nowrap transition-colors 
                                ${selectedCategory === category
                                    ? 'text-zinc-900 dark:text-white text-sm font-medium'
                                    : 'text-zinc-500 dark:text-zinc-400 text-sm hover:text-zinc-900 dark:hover:text-white'}`}
                            onClick={() => setSelectedCategory(category)}
                        >
                            {category}
                        </button>
                    ))}
                </div>

                <div className=""flex items-center gap-1.5 flex-shrink-0"">
                    <motion.div
                        className=""relative overflow-hidden p-1""
                        initial={false}
                        animate={{ width: isSearchOpen ? 'auto' : 0 }}
                    >
                        <input
                            ref={searchInputRef}
                            type=""text""
                            placeholder=""Search products...""
                            className={`w-48 sm:w-56 bg-zinc-100 dark:bg-zinc-800 rounded-md text-sm px-3 py-1.5 
                                focus:outline-none focus:ring-1 focus:ring-zinc-300 dark:focus:ring-zinc-700
                                transition-all duration-200 ${isSearchOpen ? 'opacity-100' : 'opacity-0'}`}
                            onChange={(e) => onSearch(e.target.value)}
                            onKeyDown={handleKeyPress}
                        />
                        {isSearchOpen && (
                            <button
                                type=""button""
                                onClick={() => {
                                    setIsSearchOpen(false);
                                    onSearch("");
                                }}
                                className=""absolute right-2 top-1/2 -translate-y-1/2 p-0.5 hover:bg-zinc-200 
                                    dark:hover:bg-zinc-700 rounded-full""
                            >
                                <X className=""w-4 h-4"" />
                            </button>
                        )}
                    </motion.div>
                    <button
                        type=""button""
                        onClick={() => setIsSearchOpen(!isSearchOpen)}
                        className={`p-1.5 rounded-md transition-colors 
                            ${isSearchOpen ? 'bg-zinc-100 dark:bg-zinc-800' : 'hover:bg-zinc-100 dark:hover:bg-zinc-800'} 
                            z-10`}
                    >
                        <Search className=""w-4 h-4"" />
                    </button>
                    <button
                        type=""button""
                        onClick={onCartClick}
                        className=""p-1.5 hover:bg-zinc-100 dark:hover:bg-zinc-800 rounded-md relative""
                    >
                        <ShoppingBag className=""w-4 h-4"" />
                        {cartItemCount > 0 && (
                            <motion.span
                                initial={{ scale: 0.5 }}
                                animate={{ scale: 1 }}
                                className=""absolute -top-1 -right-1 bg-zinc-900 dark:bg-white 
                                    text-white dark:text-zinc-900 text-xs font-medium w-4 h-4 
                                    flex items-center justify-center rounded-full""
                            >
                                {cartItemCount}
                            </motion.span>
                        )}
                    </button>
                </div>
            </div>
        </div>
    );
};

export default TopBar;",The `ParticleButton` component is a button that shows a particle effect when clicked. The particles are animated to move in a random direction and then disappear. The button uses Tailwind CSS for styling and Framer-Motion for animations.
kokonutui,avatar-picker,"""use client"";

import { motion, AnimatePresence } from ""motion/react"";
import { useState } from ""react"";
import { ProductGrid } from ""./product-grid"";
import { CartDrawer } from ""./cart-drawer"";
import { ProductModal } from ""./product-modal"";
import { TopBar } from ""./top-bar"";
import { type Product, type CartItem, products } from ""./data"";

export default function MinimalShop() {
    const [cart, setCart] = useState<CartItem[]>([]);
    const [selectedProduct, setSelectedProduct] = useState<Product | null>(
        null
    );
    const [isCartOpen, setIsCartOpen] = useState(false);
    const [searchQuery, setSearchQuery] = useState("""");

    const addToCart = (product: Product, quantity: number = 1) => {
        setCart((prev) => {
            const exists = prev.find((item) => item.id === product.id);
            if (exists) {
                return prev.map((item) =>
                    item.id === product.id
                        ? { ...item, quantity: item.quantity + quantity }
                        : item
                );
            }
            return [...prev, { ...product, quantity }];
        });
    };

    const removeFromCart = (productId: string) => {
        setCart((prev) => prev.filter((item) => item.id !== productId));
    };

    const filteredProducts = products.filter((product) =>
        product.name.toLowerCase().includes(searchQuery.toLowerCase())
    );

    return (
        <div className=""h-screen bg-zinc-50 dark:bg-zinc-950"">
            <TopBar
                cartItemCount={cart.length}
                onCartClick={() => setIsCartOpen(true)}
                onSearch={setSearchQuery}
            />

            <div className=""mx-auto px-2 pt-12 pb-16"">
                <ProductGrid
                    products={filteredProducts}
                    onProductSelect={setSelectedProduct}
                />
            </div>

            <AnimatePresence>
                {selectedProduct && (
                    <ProductModal
                        product={selectedProduct}
                        onClose={() => setSelectedProduct(null)}
                        onAddToCart={(product) => {
                            addToCart(product);
                            setSelectedProduct(null);
                            setIsCartOpen(true);
                        }}
                    />
                )}
            </AnimatePresence>

            <AnimatePresence>
                {isCartOpen && (
                    <CartDrawer
                        cart={cart}
                        onClose={() => setIsCartOpen(false)}
                        onRemoveFromCart={removeFromCart}
                    />
                )}
            </AnimatePresence>
        </div>
    );
}","import React, { useState } from 'react';
import { AnimatePresence } from 'framer-motion';
import { ProductGrid } from './product-grid';
import { CartDrawer } from './cart-drawer';
import { ProductModal } from './product-modal';
import { TopBar } from './top-bar';
import { Product, CartItem, products } from './data';

const MinimalShop: React.FC = () => {
    const [cart, setCart] = useState<CartItem[]>([]);
    const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);
    const [isCartOpen, setIsCartOpen] = useState<boolean>(false);
    const [searchQuery, setSearchQuery] = useState<string>("""");

    const addToCart = (product: Product, quantity: number = 1) => {
        setCart((prev) => {
            const exists = prev.find((item) => item.id === product.id);
            if (exists) {
                return prev.map((item) =>
                    item.id === product.id
                        ? { ...item, quantity: item.quantity + quantity }
                        : item
                );
            }
            return [...prev, { ...product, quantity }];
        });
    };

    const removeFromCart = (productId: string) => {
        setCart((prev) => prev.filter((item) => item.id !== productId));
    };

    const filteredProducts = products.filter((product) =>
        product.name.toLowerCase().includes(searchQuery.toLowerCase())
    );

    return (
        <div className=""h-screen bg-gray-50 dark:bg-gray-900"">
            <TopBar
                cartItemCount={cart.length}
                onCartClick={() => setIsCartOpen(true)}
                onSearch={setSearchQuery}
            />

            <div className=""mx-auto px-2 pt-12 pb-16"">
                <ProductGrid
                    products={filteredProducts}
                    onProductSelect={setSelectedProduct}
                />
            </div>

            <AnimatePresence>
                {selectedProduct && (
                    <ProductModal
                        product={selectedProduct}
                        onClose={() => setSelectedProduct(null)}
                        onAddToCart={(product) => {
                            addToCart(product);
                            setSelectedProduct(null);
                            setIsCartOpen(true);
                        }}
                    />
                )}
            </AnimatePresence>

            <AnimatePresence>
                {isCartOpen && (
                    <CartDrawer
                        cart={cart}
                        onClose={() => setIsCartOpen(false)}
                        onRemoveFromCart={removeFromCart}
                    />
                )}
            </AnimatePresence>
        </div>
    );
}

export default MinimalShop;",This is a user avatar picker component. It allows users to select an avatar from a predefined list of avatars. The selected avatar is then displayed on the user interface. The component includes animations for avatar selection and rotation.
kokonutui,hero-geometric,"""use client"";

import { motion } from ""motion/react"";
import { X, Plus, Minus } from ""lucide-react"";
import { useState } from ""react"";
import { type Product } from ""./data"";

interface ProductModalProps {
  product: Product;
  onClose: () => void;
  onAddToCart: (product: Product, quantity: number) => void;
}

export function ProductModal({ product, onClose, onAddToCart }: ProductModalProps) {
  const [quantity, setQuantity] = useState(1);

  const increment = () => setQuantity((q) => q + 1);
  const decrement = () => setQuantity((q) => (q > 1 ? q - 1 : 1));

  const handleAddToCart = () => {
    onAddToCart(product, quantity);
  };

  return (
    <>
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 0.5 }}
        exit={{ opacity: 0 }}
        className=""fixed inset-0 bg-black""
        onClick={onClose}
      />
      <motion.div
        layoutId={`product-${product.id}`}
        className=""fixed inset-x-4 bottom-0 md:inset-[25%] z-50 bg-white dark:bg-zinc-900 rounded-t-xl md:rounded-xl overflow-hidden max-h-[80vh] md:max-h-[500px]""
        onClick={(e) => e.stopPropagation()} // prevent modal close on inside clicks
      >
        <div className=""h-full md:flex"">
          <div className=""relative md:w-2/5"">
            <img
              src={product.image}
              alt={product.name}
              className=""w-full h-[200px] md:h-full object-cover""
            />
            <button
              onClick={onClose}
              aria-label=""Close modal""
              className=""absolute top-2 right-2 p-1.5 bg-white/80 dark:bg-black/50 backdrop-blur-sm rounded-full""
            >
              <X className=""w-4 h-4"" />
            </button>
          </div>

          <div className=""p-3 md:w-3/5 flex flex-col"">
            <div className=""flex-1"">
              <div className=""flex justify-between items-start mb-2"">
                <div>
                  <h2 className=""text-sm font-medium"">{product.name}</h2>
                  <p className=""text-xs text-zinc-500 dark:text-zinc-400"">
                    {product.category}
                  </p>
                </div>
                <p className=""text-sm font-medium"">${product.price}</p>
              </div>

              <div className=""space-y-2"">
                <p className=""text-xs text-zinc-600 dark:text-zinc-300"">{product.description}</p>
                <div className=""text-xs space-y-1"">
                  <p className=""text-zinc-500"">SKU: {product.id}</p>
                  <p className=""text-zinc-500"">Stock: Available</p>
                </div>
              </div>
            </div>

            {/* Quantity controls */}
            <div className=""flex items-center mt-4 space-x-3"">
              <button
                onClick={decrement}
                disabled={quantity <= 1}
                aria-label=""Decrease quantity""
                className=""p-1.5 bg-zinc-200 dark:bg-zinc-700 rounded disabled:opacity-50""
              >
                <Minus className=""w-4 h-4"" />
              </button>
              <span className=""text-sm font-medium w-8 text-center"">{quantity}</span>
              <button
                onClick={increment}
                aria-label=""Increase quantity""
                className=""p-1.5 bg-zinc-200 dark:bg-zinc-700 rounded""
              >
                <Plus className=""w-4 h-4"" />
              </button>
            </div>

            <button
              onClick={handleAddToCart}
              className=""w-full mt-3 py-2 bg-zinc-900 dark:bg-white text-white dark:text-zinc-900 text-xs font-medium rounded-md hover:bg-zinc-800 dark:hover:bg-zinc-100 transition-colors""
            >
              Add {quantity} to Cart
            </button>
          </div>
        </div>
      </motion.div>
    </>
  );
}","import { motion, AnimatePresence } from ""framer-motion"";
import { X } from ""heroicons-react"";
import { useState } from ""react"";
import { Product } from ""./data"";

interface ProductModalProps {
  product: Product;
  onClose: () => void;
  onAddToCart: (product: Product, quantity: number) => void;
}

export const ProductModal: React.FC<ProductModalProps> = ({
  product,
  onClose,
  onAddToCart,
}) => {
  const [quantity, setQuantity] = useState<number>(1);

  const handleQuantityChange = (delta: number) => {
    setQuantity((prev) => Math.max(1, prev + delta));
  };

  return (
    <AnimatePresence>
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 0.4 }}
        exit={{ opacity: 0 }}
        transition={{ duration: 0.3 }}
        className=""fixed inset-0 bg-black z-40""
        onClick={onClose}
      />
      <motion.div
        layoutId={`product-${product.id}`}
        initial={{ y: 100, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        exit={{ y: 100, opacity: 0 }}
        transition={{ type: ""spring"", stiffness: 300, damping: 30 }}
        className=""fixed inset-x-4 bottom-0 md:inset-[20%] z-50 bg-white dark:bg-zinc-900 rounded-t-xl md:rounded-xl overflow-hidden max-h-[80vh] md:max-h-[500px] shadow-lg""
      >
        <div className=""h-full md:flex"">
          {/* Left: Product Image */}
          <div className=""relative md:w-2/5"">
            <img
              src={product.image}
              alt={product.name}
              className=""w-full h-[200px] md:h-full object-cover""
            />
            <button
              onClick={onClose}
              className=""absolute top-2 right-2 p-1.5 bg-white/80 dark:bg-black/50 backdrop-blur-sm rounded-full hover:bg-white dark:hover:bg-zinc-800 transition""
            >
              <X className=""w-4 h-4"" />
            </button>
          </div>

          {/* Right: Details */}
          <div className=""p-4 md:w-3/5 flex flex-col justify-between"">
            <div>
              <div className=""flex justify-between items-start mb-2"">
                <div>
                  <h2 className=""text-sm font-medium"">{product.name}</h2>
                  <p className=""text-xs text-zinc-500 dark:text-zinc-400"">
                    {product.category}
                  </p>
                </div>
                <p className=""text-sm font-medium"">${product.price}</p>
              </div>

              <p className=""text-xs text-zinc-600 dark:text-zinc-300 mb-2"">
                {product.description}
              </p>

              <div className=""text-xs space-y-1 text-zinc-500"">
                <p>SKU: {product.id}</p>
                <p>Stock: Available</p>
              </div>

              {/* Quantity Selector */}
              <div className=""flex items-center mt-4 gap-2"">
                <button
                  onClick={() => handleQuantityChange(-1)}
                  className=""w-6 h-6 text-sm bg-zinc-200 dark:bg-zinc-700 text-black dark:text-white rounded hover:bg-zinc-300 dark:hover:bg-zinc-600""
                >
                  -
                </button>
                <span className=""text-sm"">{quantity}</span>
                <button
                  onClick={() => handleQuantityChange(1)}
                  className=""w-6 h-6 text-sm bg-zinc-200 dark:bg-zinc-700 text-black dark:text-white rounded hover:bg-zinc-300 dark:hover:bg-zinc-600""
                >
                  +
                </button>
              </div>
            </div>

            <button
              onClick={() => onAddToCart(product, quantity)}
              className=""mt-4 py-2 bg-zinc-900 dark:bg-white text-white dark:text-zinc-900 text-xs font-medium rounded-md hover:bg-zinc-800 dark:hover:bg-zinc-100 transition-colors""
            >
              Add {quantity} to Cart
            </button>
          </div>
        </div>
      </motion.div>
    </AnimatePresence>
  );
};",This component displays an animated geometric shape with a hero message and a badge. It uses the `framer-motion` library for animations and `next/image` for image loading. The component is written in TypeScript and styled using Tailwind CSS.
kokonutui,checkout-interaction,"""use client"";

import { useState } from ""react"";
import { cn } from ""@/lib/utils"";
import { Upload, X, FileText } from ""lucide-react"";
import { useFileInput } from ""@/hooks/use-file-input"";

export default function Input_03() {
  const [isDragging, setIsDragging] = useState(false);
  const [preview, setPreview] = useState<string | null>(null);
  const [uploadProgress, setUploadProgress] = useState(0);

  const {
    fileName,
    fileInputRef,
    clearFile,
    error,
    validateAndSetFile,
    fileSize,
  } = useFileInput({ accept: ""image/*"", maxSize: 5 }); // maxSize in MB

  function handleFile(file: File) {
    validateAndSetFile(file);

    if (!error) {
      simulateUpload(file);
    } else {
      // Clear preview & progress if validation fails
      setPreview(null);
      setUploadProgress(0);
    }
  }

  function simulateUpload(file: File) {
    let progress = 0;
    const interval = setInterval(() => {
      progress += 10;
      setUploadProgress(progress);

      if (progress >= 100) {
        clearInterval(interval);

        if (file.type.startsWith(""image/"")) {
          const reader = new FileReader();
          reader.onloadend = () => {
            setPreview(reader.result as string);
          };
          reader.readAsDataURL(file);
        } else {
          setPreview(null);
        }
      }
    }, 100);
  }

  function handleDrop(e: React.DragEvent) {
    e.preventDefault();
    setIsDragging(false);

    const droppedFile = e.dataTransfer.files[0];
    if (!droppedFile) return;

    handleFile(droppedFile);
  }

  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {
    const selectedFile = e.target.files?.[0];
    if (!selectedFile) return;

    handleFile(selectedFile);
  }

  function removeFile() {
    clearFile();
    setPreview(null);
    setUploadProgress(0);
  }

  return (
    <div className=""w-full max-w-md space-y-2"">
      <label className=""text-sm font-medium text-zinc-700 dark:text-zinc-300"">
        Upload file
      </label>

      <div
        className={cn(
          ""relative group cursor-pointer rounded-lg border-2 border-dashed transition-colors duration-200"",
          isDragging
            ? ""border-indigo-500 bg-indigo-50/50 dark:bg-indigo-500/10""
            : ""border-zinc-200 dark:border-zinc-800""
        )}
        onDragOver={(e) => {
          e.preventDefault();
          setIsDragging(true);
        }}
        onDragLeave={() => setIsDragging(false)}
        onDrop={handleDrop}
        onClick={() => fileInputRef.current?.click()}
        onKeyDown={(e) => {
          if (e.key === ""Enter"" || e.key === "" "") {
            e.preventDefault();
            fileInputRef.current?.click();
          }
        }}
        tabIndex={0}
        role=""button""
        aria-label=""Upload file""
      >
        <input
          ref={fileInputRef}
          type=""file""
          accept=""image/*""
          onChange={handleChange}
          className=""hidden""
        />

        <div className=""p-8 space-y-4"">
          {!fileName ? (
            <div className=""flex flex-col items-center gap-2"">
              <Upload className=""w-8 h-8 text-zinc-400 dark:text-zinc-500"" />
              <p className=""text-sm text-zinc-600 dark:text-zinc-400"">
                Drag and drop or click to upload
              </p>
            </div>
          ) : (
            <div className=""flex items-center gap-4"">
              {preview ? (
                <div className=""relative w-16 h-16 rounded-lg overflow-hidden"">
                  <img
                    src={preview}
                    alt=""Preview""
                    className=""w-full h-full object-cover""
                  />
                </div>
              ) : (
                <div className=""w-16 h-16 rounded-lg bg-zinc-100 dark:bg-zinc-800 flex items-center justify-center"">
                  <FileText className=""w-8 h-8 text-zinc-400"" />
                </div>
              )}

              <div className=""flex-1 min-w-0"">
                <p className=""text-sm font-medium truncate"">
                  {fileName || ""No file selected""}
                </p>
                <p className=""text-xs text-zinc-500"">
                  {fileSize
                    ? `${(fileSize / 1024 / 1024).toFixed(2)} MB`
                    : ""0 MB""}
                </p>

                {uploadProgress > 0 && uploadProgress < 100 && (
                  <div className=""mt-2 h-1 w-full bg-zinc-100 dark:bg-zinc-800 rounded-full overflow-hidden"">
                    <div
                      className=""h-full bg-indigo-500 transition-all duration-200""
                      style={{ width: `${uploadProgress}%` }}
                    />
                  </div>
                )}
              </div>

              <button
                type=""button""
                onClick={(e) => {
                  e.stopPropagation();
                  removeFile();
                }}
                className=""p-1 hover:bg-zinc-100 dark:hover:bg-zinc-800 rounded""
                aria-label=""Remove file""
              >
                <X className=""w-5 h-5 text-zinc-400"" />
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}","import React, {
  useState,
  useRef,
  ChangeEvent,
  DragEvent,
  KeyboardEvent,
} from ""react"";
import {
  XMarkIcon,
  ArrowUpTrayIcon,
  DocumentIcon,
} from ""@heroicons/react/24/solid"";

type FileInputProps = {
  accept?: string;
  maxSize?: number;
};

const useFileInput = ({ accept = ""*"", maxSize = Infinity }: FileInputProps) => {
  const [fileName, setFileName] = useState<string | null>(null);
  const [fileSize, setFileSize] = useState<number>(0);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const clearFile = () => {
    setFileName(null);
    setFileSize(0);
    if (fileInputRef.current) fileInputRef.current.value = """";
  };

  const validateAndSetFile = (file: File) => {
    if (file.size > maxSize) throw new Error(""File is too large"");
    if (accept !== ""*"" && !file.type.match(accept)) {
      throw new Error(""File type is not accepted"");
    }
    setFileName(file.name);
    setFileSize(file.size);
  };

  return {
    fileName,
    fileSize,
    fileInputRef,
    clearFile,
    validateAndSetFile,
  };
};

const Input_03: React.FC = () => {
  const [isDragging, setIsDragging] = useState(false);
  const [preview, setPreview] = useState<string | null>(null);
  const [uploadProgress, setUploadProgress] = useState(0);

  const {
    fileName,
    fileSize,
    fileInputRef,
    clearFile,
    validateAndSetFile,
  } = useFileInput({ accept: ""image/*"", maxSize: 5 * 1024 * 1024 });

  const handleFile = (file: File) => {
    try {
      validateAndSetFile(file);
      simulateUpload(file);
    } catch (err) {
      alert((err as Error).message);
    }
  };

  const simulateUpload = (file: File) => {
    let progress = 0;
    const interval = setInterval(() => {
      progress += 10;
      setUploadProgress(progress);
      if (progress >= 100) {
        clearInterval(interval);
        if (file.type.startsWith(""image/"")) {
          const reader = new FileReader();
          reader.onloadend = () => {
            setPreview(reader.result as string);
          };
          reader.readAsDataURL(file);
        }
      }
    }, 100);
  };

  const handleDrop = (e: DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    setIsDragging(false);

    const droppedFile = e.dataTransfer.files?.[0];
    if (!droppedFile) return;

    handleFile(droppedFile);
  };

  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {
    const selectedFile = e.target.files?.[0];
    if (!selectedFile) return;
    handleFile(selectedFile);
  };

  const removeFile = () => {
    clearFile();
    setPreview(null);
    setUploadProgress(0);
  };

  return (
    <div className=""w-full max-w-md space-y-2"">
      <label className=""text-sm font-medium text-gray-700 dark:text-gray-300"">
        Upload file
      </label>
      <div
        className={`relative group cursor-pointer rounded-lg border-2 border-dashed transition-colors duration-200 ${
          isDragging
            ? ""border-indigo-500 bg-indigo-50 dark:bg-indigo-500/10""
            : ""border-gray-200 dark:border-gray-800""
        }`}
        onDragOver={(e) => {
          e.preventDefault();
          setIsDragging(true);
        }}
        onDragLeave={() => setIsDragging(false)}
        onDrop={handleDrop}
        onClick={() => fileInputRef.current?.click()}
        onKeyDown={(e: KeyboardEvent<HTMLDivElement>) => {
          if (e.key === ""Enter"" || e.key === "" "") {
            e.preventDefault();
            fileInputRef.current?.click();
          }
        }}
        tabIndex={0}
        aria-label=""Upload file""
      >
        <input
          ref={fileInputRef}
          type=""file""
          accept=""image/*""
          onChange={handleChange}
          className=""hidden""
        />

        <div className=""p-8 space-y-4"">
          {!fileName ? (
            <div className=""flex flex-col items-center gap-2"">
              <ArrowUpTrayIcon className=""w-8 h-8 text-gray-400 dark:text-gray-500"" />
              <p className=""text-sm text-gray-600 dark:text-gray-400"">
                Drag and drop or click to upload
              </p>
            </div>
          ) : (
            <div className=""flex items-center gap-4"">
              {preview ? (
                <div className=""relative w-16 h-16 rounded-lg overflow-hidden"">
                  <img
                    src={preview}
                    alt=""Preview""
                    className=""w-full h-full object-cover""
                  />
                </div>
              ) : (
                <div className=""w-16 h-16 rounded-lg bg-gray-100 dark:bg-gray-800 flex items-center justify-center"">
                  <DocumentIcon className=""w-8 h-8 text-gray-400"" />
                </div>
              )}
              <div className=""flex-1 min-w-0"">
                <p className=""text-sm font-medium truncate"">
                  {fileName || ""No file selected""}
                </p>
                <p className=""text-xs text-gray-500"">
                  {(fileSize / 1024 / 1024).toFixed(2)} MB
                </p>
                {uploadProgress < 100 && (
                  <div className=""mt-2 h-1 w-full bg-gray-100 dark:bg-gray-800 rounded-full overflow-hidden"">
                    <div
                      className=""h-full bg-indigo-500 transition-all duration-200""
                      style={{ width: `${uploadProgress}%` }}
                    />
                  </div>
                )}
              </div>
              <button
                type=""button""
                onClick={(e) => {
                  e.stopPropagation();
                  removeFile();
                }}
                className=""p-1 hover:bg-gray-100 dark:hover:bg-gray-800 rounded""
              >
                <XMarkIcon className=""w-5 h-5 text-gray-400"" />
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Input_03;","A checkout interaction component for an e-commerce website, enabling users to add products to a cart, adjust quantities, and view a total price before initiating checkout. This component is styled using Tailwind CSS and uses Framer Motion for animations."
kokonutui,background-paths,"""use client"";

import { useState, useRef, useEffect, useCallback } from ""react"";
import { cn } from ""@/lib/utils"";

const OTP_LENGTH = 6;

export default function Input_06() {
  const [code, setCode] = useState<string[]>(Array(OTP_LENGTH).fill(""""));
  const [activeIndex, setActiveIndex] = useState(0);
  const inputRefs = useRef<(HTMLInputElement | null)[]>([]);
  const [shake, setShake] = useState(false);

  useEffect(() => {
    // Keep refs array length in sync
    inputRefs.current = inputRefs.current.slice(0, OTP_LENGTH);
  }, []);

  const handleChange = (index: number, value: string) => {
    if (!/^\d*$/.test(value)) return; // Only digits allowed

    const newCode = [...code];
    newCode[index] = value.slice(-1); // Take only last digit entered
    setCode(newCode);

    if (value && index < OTP_LENGTH - 1) {
      inputRefs.current[index + 1]?.focus();
      setActiveIndex(index + 1);
    }
  };

  const handleKeyDown = (
    index: number,
    e: React.KeyboardEvent<HTMLInputElement>
  ) => {
    if (e.key === ""Backspace"") {
      if (code[index]) {
        // Clear current input value on backspace
        const newCode = [...code];
        newCode[index] = """";
        setCode(newCode);
      } else if (index > 0) {
        // Move to previous input if empty and backspace pressed
        inputRefs.current[index - 1]?.focus();
        setActiveIndex(index - 1);
      }
    } else if (e.key === ""ArrowLeft"" && index > 0) {
      inputRefs.current[index - 1]?.focus();
      setActiveIndex(index - 1);
    } else if (e.key === ""ArrowRight"" && index < OTP_LENGTH - 1) {
      inputRefs.current[index + 1]?.focus();
      setActiveIndex(index + 1);
    }
  };

  const handlePaste = (e: React.ClipboardEvent) => {
    e.preventDefault();
    const pastedData = e.clipboardData.getData(""text/plain"").slice(0, OTP_LENGTH);

    if (!/^\d+$/.test(pastedData)) {
      setShake(true);
      setTimeout(() => setShake(false), 600);
      return;
    }

    const newCode = [...code];
    pastedData.split("""").forEach((digit, index) => {
      newCode[index] = digit;
    });
    setCode(newCode);

    // Focus on next empty input or last one
    const focusIndex = Math.min(pastedData.length, OTP_LENGTH - 1);
    inputRefs.current[focusIndex]?.focus();
    setActiveIndex(focusIndex);
  };

  const setInputRef = useCallback(
    (index: number) => (el: HTMLInputElement | null) => {
      inputRefs.current[index] = el;
    },
    []
  );

  return (
    <div className=""w-full max-w-sm space-y-2"">
      <fieldset className={cn(""flex flex-col gap-2"", shake && ""animate-shake"")}>
        <legend className=""text-sm font-medium text-zinc-700 dark:text-zinc-300 mb-2"">
          Verification Code
        </legend>

        <div className=""flex gap-2 items-center justify-start"">
          {Array.from({ length: OTP_LENGTH }).map((_, index) => (
            <div key={`otp-input-${index}`} className=""relative"">
              <input
                id={`otp-input-${index}`}
                ref={setInputRef(index)}
                type=""text""
                inputMode=""numeric""
                maxLength={1}
                value={code[index]}
                onChange={(e) => handleChange(index, e.target.value)}
                onKeyDown={(e) => handleKeyDown(index, e)}
                onPaste={handlePaste}
                onFocus={() => setActiveIndex(index)}
                className={cn(
                  ""w-12 h-14 text-center text-lg font-semibold"",
                  ""rounded-lg border"",
                  ""transition-all duration-200"",
                  ""bg-white dark:bg-zinc-900"",
                  ""border-zinc-200 dark:border-zinc-800"",
                  activeIndex === index && ""border-indigo-500 dark:border-indigo-500"",
                  ""focus:outline-none focus:ring-2 focus:ring-indigo-500/20""
                )}
              />
              {index !== OTP_LENGTH - 1 && (
                <div className=""absolute top-1/2 -right-2 w-2 transform -translate-y-1/2"">
                  <div className=""w-1 h-1 rounded-full bg-zinc-300 dark:bg-zinc-600"" />
                </div>
              )}
            </div>
          ))}
        </div>
      </fieldset>
    </div>
  );
}","import React, { useState, useRef, useEffect, useCallback } from ""react"";

const OTP_LENGTH = 6;

const Input_06: React.FC = () => {
  const [code, setCode] = useState<string[]>(Array(OTP_LENGTH).fill(""""));
  const [activeIndex, setActiveIndex] = useState(0);
  const inputRefs = useRef<(HTMLInputElement | null)[]>([]);
  const [shake, setShake] = useState(false);

  useEffect(() => {
    inputRefs.current = inputRefs.current.slice(0, OTP_LENGTH);
  }, []);

  const handleChange = (index: number, value: string) => {
    if (!/^\d*$/.test(value)) return;

    const newCode = [...code];
    newCode[index] = value.slice(-1);
    setCode(newCode);

    if (value && index < OTP_LENGTH - 1) {
      inputRefs.current[index + 1]?.focus();
      setActiveIndex(index + 1);
    }
  };

  const handleKeyDown = (
    index: number,
    e: React.KeyboardEvent<HTMLInputElement>
  ) => {
    if (e.key === ""Backspace"") {
      if (code[index] === """") {
        if (index > 0) {
          inputRefs.current[index - 1]?.focus();
          setActiveIndex(index - 1);
        }
      } else {
        const newCode = [...code];
        newCode[index] = """";
        setCode(newCode);
      }
    } else if (e.key === ""ArrowLeft"" && index > 0) {
      inputRefs.current[index - 1]?.focus();
      setActiveIndex(index - 1);
    } else if (e.key === ""ArrowRight"" && index < OTP_LENGTH - 1) {
      inputRefs.current[index + 1]?.focus();
      setActiveIndex(index + 1);
    }
  };

  const handlePaste = (e: React.ClipboardEvent) => {
    e.preventDefault();
    const pasted = e.clipboardData.getData(""text/plain"").slice(0, OTP_LENGTH);
    if (!/^\d+$/.test(pasted)) {
      setShake(true);
      setTimeout(() => setShake(false), 600);
      return;
    }

    const newCode = [...code];
    pasted.split("""").forEach((char, i) => {
      newCode[i] = char;
    });

    setCode(newCode);

    const last = Math.min(pasted.length, OTP_LENGTH - 1);
    inputRefs.current[last]?.focus();
    setActiveIndex(last);
  };

  const setInputRef = useCallback(
    (index: number) => (el: HTMLInputElement | null) => {
      inputRefs.current[index] = el;
    },
    []
  );

  return (
    <div className=""w-full max-w-sm space-y-2"">
      <fieldset
        className={`flex flex-col gap-2 ${
          shake ? ""animate-shake"" : """"
        }`}
      >
        <legend className=""text-sm font-medium text-gray-700 dark:text-gray-300 mb-2"">
          Verification Code
        </legend>

        <div className=""flex gap-2 items-center justify-start"">
          {Array.from({ length: OTP_LENGTH }).map((_, index) => (
            <div key={index} className=""relative"">
              <input
                id={`otp-input-${index}`}
                ref={setInputRef(index)}
                type=""text""
                inputMode=""numeric""
                autoComplete=""one-time-code""
                maxLength={1}
                value={code[index]}
                onChange={(e) => handleChange(index, e.target.value)}
                onKeyDown={(e) => handleKeyDown(index, e)}
                onPaste={handlePaste}
                onFocus={() => setActiveIndex(index)}
                className={`w-12 h-14 text-center text-lg font-semibold rounded-lg border transition-all duration-200 bg-white dark:bg-gray-900 border-gray-200 dark:border-gray-800 ${
                  activeIndex === index
                    ? ""border-blue-500 dark:border-blue-500""
                    : """"
                } focus:outline-none focus:ring-2 focus:ring-blue-500/20`}
                aria-label={`Digit ${index + 1}`}
              />
              {index < OTP_LENGTH - 1 && (
                <div className=""absolute top-1/2 -right-2 w-2 transform -translate-y-1/2"">
                  <div className=""w-1 h-1 rounded-full bg-gray-300 dark:bg-gray-600"" />
                </div>
              )}
            </div>
          ))}
        </div>
      </fieldset>
    </div>
  );
};

export default Input_06;","This is a dynamic background paths component that helps in creating a background with animated paths and also includes a title and ""Get Started"" button."
kokonutui,currency-transfer,"""use client"";

import { useState } from ""react"";
import { cn } from ""@/lib/utils"";

interface NumericInputProps {
  min?: number;
  max?: number;
  step?: number;
  defaultValue?: number;
}

export default function Input_04({
  min = 0,
  max = 100,
  step = 1,
  defaultValue = 50,
}: NumericInputProps) {
  const [value, setValue] = useState(defaultValue);
  const [isFocused, setIsFocused] = useState(false);

  const percentage = ((value - min) / (max - min)) * 100;

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newValue = Number.parseFloat(e.target.value);
    if (!Number.isNaN(newValue)) {
      if (newValue >= min && newValue <= max) {
        setValue(newValue);
      } else if (newValue < min) {
        setValue(min);
      } else if (newValue > max) {
        setValue(max);
      }
    }
  };

  const incrementValue = () => {
    setValue((prev) => Math.min(prev + step, max));
  };

  const decrementValue = () => {
    setValue((prev) => Math.max(prev - step, min));
  };

  return (
    <div className=""w-full max-w-xs"">
      <div className=""relative"">
        <div
          className={cn(
            ""flex items-center rounded-lg border"",
            ""border-zinc-200 dark:border-zinc-800"",
            ""bg-white dark:bg-black/5"",
            isFocused && ""ring-2 ring-zinc-300 dark:ring-zinc-700""
          )}
        >
          <button
            type=""button""
            onClick={decrementValue}
            className=""px-3 py-2 hover:bg-zinc-100 dark:hover:bg-zinc-800 text-zinc-500 dark:text-zinc-400 transition-colors""
            aria-label=""Decrement button""
          >
            ?
          </button>
          <input
            type=""number""
            value={value}
            onChange={handleChange}
            onFocus={() => setIsFocused(true)}
            onBlur={() => setIsFocused(false)}
            min={min}
            max={max}
            step={step}
            className=""w-full text-center border-none bg-transparent focus:outline-none 
              [-moz-appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none 
              [&::-webkit-inner-spin-button]:appearance-none
              text-zinc-900 dark:text-zinc-100""
          />
          <button
            type=""button""
            onClick={incrementValue}
            className=""px-3 py-2 hover:bg-zinc-100 dark:hover:bg-zinc-800 text-zinc-500 dark:text-zinc-400 transition-colors""
            aria-label=""Increment button""
          >
            +
          </button>
        </div>

        <div className=""mt-2 h-1.5 rounded-full bg-zinc-100 dark:bg-zinc-800 overflow-hidden"">
          <div
            className=""h-full bg-zinc-300 dark:bg-zinc-600 transition-all duration-200""
            style={{ width: `${percentage}%` }}
          />
        </div>

        <div className=""mt-1 flex justify-between text-xs text-zinc-400 dark:text-zinc-500"">
          <span>{min}</span>
          <span>{max}</span>
        </div>
      </div>
    </div>
  );
}","import React, { useState, ChangeEvent, FC } from 'react';

interface NumericInputProps {
  min?: number;
  max?: number;
  step?: number;
  defaultValue?: number;
}

const Input_04: FC<NumericInputProps> = ({
  min = 0,
  max = 100,
  step = 1,
  defaultValue = 50,
}) => {
  const [value, setValue] = useState<number>(defaultValue);
  const [isFocused, setIsFocused] = useState<boolean>(false);

  const percentage = ((value - min) / (max - min)) * 100;

  const handleChange = (e: ChangeEvent<HTMLInputElement>): void => {
    const newValue = parseFloat(e.target.value);
    if (!isNaN(newValue)) {
      const clampedValue = Math.max(min, Math.min(max, newValue));
      setValue(clampedValue);
    }
  };

  const incrementValue = (): void => {
    setValue(prev => Math.min(prev + step, max));
  };

  const decrementValue = (): void => {
    setValue(prev => Math.max(prev - step, min));
  };

  return (
    <div className=""w-full max-w-xs"">
      <div className=""relative"">
        <div
          className={`flex items-center rounded-lg border border-gray-200 dark:border-gray-800 bg-white dark:bg-black/5 ${
            isFocused ? 'ring-2 ring-gray-300 dark:ring-gray-700' : ''
          }`}
        >
          <button
            type=""button""
            onClick={decrementValue}
            className=""px-3 py-2 hover:bg-gray-100 dark:hover:bg-gray-800 
            text-gray-500 dark:text-gray-400 transition-colors""
            aria-label=""Decrement""
          >
            ?
          </button>
          <input
            type=""number""
            value={value}
            onChange={handleChange}
            onFocus={() => setIsFocused(true)}
            onBlur={() => setIsFocused(false)}
            min={min}
            max={max}
            step={step}
            className=""w-full text-center border-none bg-transparent focus:outline-none 
            text-gray-900 dark:text-gray-100""
            aria-label=""Numeric input""
          />
          <button
            type=""button""
            onClick={incrementValue}
            className=""px-3 py-2 hover:bg-gray-100 dark:hover:bg-gray-800 
            text-gray-500 dark:text-gray-400 transition-colors""
            aria-label=""Increment""
          >
            +
          </button>
        </div>

        <div className=""mt-2 h-1.5 rounded-full bg-gray-100 dark:bg-gray-800 overflow-hidden"">
          <div
            className=""h-full bg-gray-300 dark:bg-gray-600 transition-all duration-200""
            style={{ width: `${percentage}%` }}
          />
        </div>

        <div className=""mt-1 flex justify-between text-xs text-gray-400 dark:text-gray-500"">
          <span>{min}</span>
          <span>{max}</span>
        </div>
      </div>
    </div>
  );
};

export default Input_04;","The `CurrencyTransfer` component is a form for a currency transfer, with a success message and details of the transfer. The `Checkmark` component is an animated SVG checkmark. The animations are handled by Framer Motion. The components are styled using Tailwind CSS for utility-first, responsive design."
kokonutui,text-02,"""use client"";

import { AnimatePresence, motion } from ""motion/react"";
import Image from ""next/image"";
import { useState } from ""react"";

const MAX_TEAM_SIZE = 4;

const animations = {
  container: {
    initial: { opacity: 0, y: 20 },
    animate: { opacity: 1, y: 0 },
    exit: { opacity: 0, y: -20 },
  },
  avatar: {
    initial: { opacity: 0, scale: 0.8 },
    animate: { opacity: 1, scale: 1, transition: { duration: 0.3 } },
    exit: { opacity: 0, scale: 0.8, transition: { duration: 0.15 } },
  },
  vibration: {
    initial: { x: 0 },
    vibrate: { x: [-5, 5, -5, 5, 0], transition: { duration: 0.3 } },
  },
} as const;

const avatarUrls = [
  ""https://ferf1mheo22r9ira.public.blob.vercel-storage.com/avatar-01-n0x8HFv8EUetf9z6ht0wScJKoTHqf8.png"",
  ""https://ferf1mheo22r9ira.public.blob.vercel-storage.com/avatar-02-albo9B0tWOSLXCVZh9rX9KFxXIVWMr.png"",
  ""https://ferf1mheo22r9ira.public.blob.vercel-storage.com/avatar-03-JateJIUhtd3PXynaMG9TDWQ55j5AVP.png"",
  ""https://ferf1mheo22r9ira.public.blob.vercel-storage.com/avatar-04-uuYHWIRvVPi01gEt6NwnGyjqLeeZhz.png"",
] as const;

export default function Input09() {
  const [peopleCount, setPeopleCount] = useState(1);
  const [isVibrating, setIsVibrating] = useState(false);

  function triggerVibration() {
    setIsVibrating(true);
    setTimeout(() => setIsVibrating(false), 300);
  }

  function handleIncrement(e: React.MouseEvent) {
    e.preventDefault();
    if (peopleCount < MAX_TEAM_SIZE) {
      setPeopleCount((count) => count + 1);
    } else {
      triggerVibration();
    }
  }

  function handleDecrement(e: React.MouseEvent) {
    e.preventDefault();
    if (peopleCount > 1) {
      setPeopleCount((count) => count - 1);
    } else {
      triggerVibration();
    }
  }

  function renderAvatars() {
    return Array.from({ length: peopleCount }, (_, i) => (
      <motion.div
        key={i}
        variants={animations.avatar}
        initial=""initial""
        animate=""animate""
        exit=""exit""
        className=""flex items-center justify-center""
        style={{
          zIndex: peopleCount - i,
          marginLeft: i === 0 ? 0 : -24,
        }}
      >
        <Image
          src={avatarUrls[i % avatarUrls.length]}
          width={96}
          height={96}
          alt={`Team member ${i + 1}`}
          className=""rounded-full object-cover""
          priority={true}
        />
      </motion.div>
    ));
  }

  return (
    <motion.div
      variants={animations.container}
      initial=""initial""
      animate=""animate""
      exit=""exit""
      className=""flex w-full flex-col items-center justify-center gap-8""
    >
      <div className=""relative h-24 w-full flex justify-center"">
        <AnimatePresence>{renderAvatars()}</AnimatePresence>
      </div>
      <motion.div
        variants={
          isVibrating
            ? {
                initial: { x: 0 },
                vibrate: {
                  x: [0, -5, 5, -5, 5, 0],
                  transition: { duration: 0.3 },
                },
              }
            : undefined
        }
        initial=""initial""
        animate={isVibrating ? ""vibrate"" : ""initial""}
        className=""flex items-center gap-8""
      >
        <button
          type=""button""
          onClick={handleDecrement}
          className=""h-12 w-12 rounded-full border-zinc-200 dark:border-zinc-800 
                     bg-white dark:bg-zinc-900 
                     hover:bg-zinc-50 dark:hover:bg-zinc-800/50 
                     text-zinc-900 dark:text-zinc-100 cursor-pointer""
          aria-label=""Decrement team size""
        >
          <span className=""text-2xl font-medium"">?</span>
        </button>

        <motion.span
          key={peopleCount}
          variants={animations.container}
          initial=""initial""
          animate=""animate""
          exit=""exit""
          className=""text-2xl font-medium text-zinc-900 dark:text-zinc-100""
        >
          {peopleCount}
        </motion.span>

        <button
          type=""button""
          onClick={handleIncrement}
          className=""h-12 w-12 rounded-full border-zinc-200 dark:border-zinc-800 
                     bg-white dark:bg-zinc-900 
                     hover:bg-zinc-50 dark:hover:bg-zinc-800/50 
                     text-zinc-900 dark:text-zinc-100 cursor-pointer""
          aria-label=""Increment team size""
        >
          <span className=""text-2xl font-medium"">+</span>
        </button>
      </motion.div>
    </motion.div>
  );
}","use client';

import { AnimatePresence, motion } from ""framer-motion"";
import Image from ""next/image"";
import { useState } from ""react"";

const MAX_TEAM_SIZE = 4;
const avatarUrls = [
  ""https://ferf1mheo22r9ira.public.blob.vercel-storage.com/avatar-01-n0x8HFv8EUetf9z6ht0wScJKoTHqf8.png"",
  ""https://ferf1mheo22r9ira.public.blob.vercel-storage.com/avatar-02-albo9B0tWOSLXCVZh9rX9KFxXIVWMr.png"",
  ""https://ferf1mheo22r9ira.public.blob.vercel-storage.com/avatar-03-JateJIUhtd3PXynaMG9TDWQ55j5AVP.png"",
  ""https://ferf1mheo22r9ira.public.blob.vercel-storage.com/avatar-04-uuYHWIRvVPi01gEt6NwnGyjqLeeZhz.png"",
] as const;

const animations = {
  container: {
    initial: { opacity: 0, y: 20 },
    animate: { opacity: 1, y: 0 },
    exit: { opacity: 0, y: -20 },
  },
  avatar: {
    initial: { opacity: 0, scale: 0.8 },
    animate: { opacity: 1, scale: 1, transition: { duration: 0.3 } },
    exit: { opacity: 0, scale: 0.8, transition: { duration: 0.15 } },
  },
  vibration: {
    initial: { x: 0 },
    vibrate: { x: [-5, 5, -5, 5, 0], transition: { duration: 0.3 } },
  },
} as const;

const Input09 = (): JSX.Element => {
  const [peopleCount, setPeopleCount] = useState<number>(1);
  const [isVibrating, setIsVibrating] = useState<boolean>(false);

  const triggerVibration = () => {
    setIsVibrating(true);
    setTimeout(() => setIsVibrating(false), 300);
  };

  const handleIncrement = () => {
    if (peopleCount < MAX_TEAM_SIZE) {
      setPeopleCount(prev => prev + 1);
    } else {
      triggerVibration();
    }
  };

  const handleDecrement = () => {
    if (peopleCount > 1) {
      setPeopleCount(prev => prev - 1);
    } else {
      triggerVibration();
    }
  };

  return (
    <motion.div
      variants={animations.container}
      initial=""initial""
      animate=""animate""
      exit=""exit""
      className=""flex w-full flex-col items-center justify-center gap-8""
    >
      <div className=""relative h-24 w-full flex justify-center"">
        <AnimatePresence mode=""popLayout"">
          {Array.from({ length: peopleCount }).map((_, i) => (
            <motion.div
              key={i}
              variants={animations.avatar}
              initial=""initial""
              animate=""animate""
              exit=""exit""
              className=""flex items-center justify-center""
              style={{
                zIndex: peopleCount - i,
                marginLeft: i === 0 ? 0 : -24,
              }}
            >
              <Image
                src={avatarUrls[i % avatarUrls.length]}
                width={96}
                height={96}
                alt={`Team member ${i + 1}`}
                className=""rounded-full object-cover""
              />
            </motion.div>
          ))}
        </AnimatePresence>
      </div>

      <motion.div
        variants={isVibrating ? animations.vibration : undefined}
        initial=""initial""
        animate={isVibrating ? ""vibrate"" : ""initial""}
        className=""flex items-center gap-8""
      >
        <button
          type=""button""
          onClick={handleDecrement}
          className=""h-12 w-12 rounded-full border border-gray-200 dark:border-gray-800 
            bg-white dark:bg-gray-900 hover:bg-gray-50 dark:hover:bg-gray-800/50 
            text-gray-900 dark:text-gray-100 cursor-pointer""
          aria-label=""Decrease team size""
        >
          <span className=""text-2xl font-medium"">?</span>
        </button>

        <motion.span
          key={peopleCount}
          variants={animations.container}
          initial=""initial""
          animate=""animate""
          exit=""exit""
          className=""text-2xl font-medium text-gray-900 dark:text-gray-100""
        >
          {peopleCount}
        </motion.span>

        <button
          type=""button""
          onClick={handleIncrement}
          className=""h-12 w-12 rounded-full border border-gray-200 dark:border-gray-800 
            bg-white dark:bg-gray-900 hover:bg-gray-50 dark:hover:bg-gray-800/50 
            text-gray-900 dark:text-gray-100 cursor-pointer""
          aria-label=""Increase team size""
        >
          <span className=""text-2xl font-medium"">+</span>
        </button>
      </motion.div>
    </motion.div>
  );
};

export default Input09;","This is a TypeScript and Tailwind CSS styled TextSplit component which splits the text into two parts on hover, maintaining the layout size with hidden text."
kokonutui,text-06,"""use client"";

import React, { useState, useRef, useEffect, type RefObject } from ""react"";
import { cn } from ""@/lib/utils""; // Make sure this exists or replace with your own classNames helper
import { X, Check, Plus } from ""lucide-react"";

interface Tag {
  id: string;
  label: string;
  color?: string;
}

interface TagInputProps {
  onChange?: (tags: Tag[]) => void;
  defaultTags?: Tag[];
  suggestions?: Tag[];
  maxTags?: number;
  label?: string;
  placeholder?: string;
  error?: string;
}

const defaultKokonutTag: Tag = {
  id: ""kokonut-ui"",
  label: ""KokonutUI"",
  color:
    ""bg-indigo-100 text-indigo-700 border border-indigo-200 dark:bg-indigo-900/30 dark:text-indigo-300 dark:border-indigo-700/30"",
};

const tagStyles = {
  base: ""inline-flex items-center gap-1.5 px-2 py-0.5 text-sm rounded-md transition-colors duration-150"",
  colors: {
    blue: ""bg-blue-50 text-blue-700 border border-blue-200 hover:border-blue-300 dark:bg-blue-900/30 dark:text-blue-300 dark:border-blue-700/30 dark:hover:border-blue-600/50"",
    purple:
      ""bg-purple-50 text-purple-700 border border-purple-200 hover:border-purple-300 dark:bg-purple-900/30 dark:text-purple-300 dark:border-purple-700/30 dark:hover:border-purple-600/50"",
    green:
      ""bg-green-50 text-green-700 border border-green-200 hover:border-green-300 dark:bg-green-900/30 dark:text-green-300 dark:border-green-700/30 dark:hover:border-green-600/50"",
  },
};

// Helper hook for detecting clicks outside a ref element
function useClickOutside(ref: RefObject<HTMLElement>, handler: () => void) {
  useEffect(() => {
    function handleClickOutside(event: MouseEvent) {
      if (ref.current && !ref.current.contains(event.target as Node)) {
        handler();
      }
    }
    document.addEventListener(""mousedown"", handleClickOutside);
    return () => document.removeEventListener(""mousedown"", handleClickOutside);
  }, [ref, handler]);
}

export default function Input_02({
  onChange,
  defaultTags = [defaultKokonutTag],
  suggestions = [
    { id: ""nextjs"", label: ""Next.js"" },
    { id: ""react"", label: ""React"" },
    { id: ""tailwind"", label: ""Tailwind"" },
  ],
  maxTags = 10,
  label = ""Tags"",
  placeholder = ""Add tags..."",
  error,
}: TagInputProps) {
  const [tags, setTags] = useState<Tag[]>(defaultTags);
  const [input, setInput] = useState("""");
  const [isOpen, setIsOpen] = useState(false);
  const [selectedIndex, setSelectedIndex] = useState(0);

  const inputRef = useRef<HTMLInputElement>(null);
  const containerRef = useRef<HTMLDivElement>(null);

  // Sync changes with parent
  useEffect(() => {
    if (onChange) onChange(tags);
  }, [tags, onChange]);

  // Remove tag by id
  function removeTag(id: string) {
    setTags((prev) => prev.filter((tag) => tag.id !== id));
  }

  // Remove last tag
  function removeLastTag() {
    setTags((prev) => prev.slice(0, -1));
  }

  // Add tag if max not reached and tag not already added
  function addTag(tag: Tag) {
    if (tags.length >= maxTags) return;
    if (tags.find((t) => t.id === tag.id)) return;
    setTags((prev) => [...prev, tag]);
  }

  // Filter suggestions
  const filteredSuggestions = suggestions
    .filter(
      (s) =>
        s.label.toLowerCase().includes(input.toLowerCase()) &&
        !tags.find((t) => t.id === s.id)
    )
    .slice(0, 5);

  const canAddNewTag =
    !suggestions.find((s) => s.label.toLowerCase() === input.toLowerCase()) &&
    input.length > 0;

  // Keyboard controls
  function handleKeyDown(e: React.KeyboardEvent<HTMLInputElement>) {
    if (e.key === ""Backspace"" && input === """" && tags.length > 0) {
      removeLastTag();
      return;
    }

    if (e.key === ""Enter"" && input) {
      e.preventDefault();

      if (isOpen && filteredSuggestions[selectedIndex]) {
        addTag(filteredSuggestions[selectedIndex]);
        setInput("""");
        setIsOpen(false);
        return;
      }

      if (canAddNewTag) {
        addTag({ id: input, label: input, color: randomTagColor() });
        setInput("""");
        setIsOpen(false);
      }
      return;
    }

    if (e.key === ""Escape"") {
      setIsOpen(false);
      return;
    }

    // Navigate suggestions with arrow keys
    if (e.key === ""ArrowDown"") {
      e.preventDefault();
      setSelectedIndex((i) =>
        i + 1 >= filteredSuggestions.length + (canAddNewTag ? 1 : 0) ? 0 : i + 1
      );
    }
    if (e.key === ""ArrowUp"") {
      e.preventDefault();
      setSelectedIndex((i) =>
        i - 1 < 0 ? filteredSuggestions.length + (canAddNewTag ? 0 : -1) : i - 1
      );
    }
  }

  // Close dropdown on outside click
  useClickOutside(containerRef, () => setIsOpen(false));

  // Pick random tag color from tagStyles.colors keys
  function randomTagColor() {
    const keys = Object.keys(tagStyles.colors) as Array<
      keyof typeof tagStyles.colors
    >;
    const randomKey = keys[Math.floor(Math.random() * keys.length)];
    return tagStyles.colors[randomKey];
  }

  return (
    <div className=""w-full max-w-full sm:max-w-2xl space-y-2"" ref={containerRef}>
      {label && (
        <label
          className=""text-sm font-medium text-zinc-800 dark:text-zinc-200""
          htmlFor={label}
        >
          {label}
        </label>
      )}

      <div
        className={cn(
          ""min-h-[3rem] sm:min-h-[2.5rem] p-2 sm:p-1.5"",
          ""rounded-lg border"",
          ""border-zinc-300 dark:border-zinc-700"",
          ""bg-white dark:bg-zinc-900"",
          ""focus-within:ring-2 focus-within:ring-indigo-500/30 dark:focus-within:ring-indigo-400/30"",
          ""flex items-center flex-row flex-wrap gap-2 sm:gap-1.5 relative""
        )}
        onClick={() => inputRef.current?.focus()}
      >
        {tags.map((tag) => (
          <span
            key={tag.id}
            className={cn(
              tagStyles.base,
              ""text-base sm:text-sm py-1 sm:py-0.5"",
              tag.color || tagStyles.colors.blue
            )}
          >
            {tag.label}
            <button
              type=""button""
              onClick={() => removeTag(tag.id)}
              className={cn(
                ""text-current/60 hover:text-current transition-colors"",
                ""p-1 sm:p-0""
              )}
            >
              <X className=""w-4 h-4 sm:w-3.5 sm:h-3.5"" />
            </button>
          </span>
        ))}

        <input
          ref={inputRef}
          type=""text""
          value={input}
          onChange={(e) => {
            setInput(e.target.value);
            setIsOpen(true);
            setSelectedIndex(0);
          }}
          onFocus={() => setIsOpen(true)}
          onKeyDown={handleKeyDown}
          placeholder={tags.length === 0 ? placeholder : """"}
          className={cn(
            ""flex-1 min-w-[140px] sm:min-w-[120px] bg-transparent"",
            ""h-8 sm:h-7"",
            ""text-base sm:text-sm"",
            ""text-zinc-900 dark:text-zinc-100"",
            ""placeholder:text-zinc-500 dark:placeholder:text-zinc-400"",
            ""focus:outline-none""
          )}
        />

        {/* Dropdown */}
        {isOpen && (input || filteredSuggestions.length > 0) && (
          <div
            className={cn(
              ""absolute left-0 right-0 top-full mt-1 z-50"",
              ""max-h-[60vh] sm:max-h-[300px] overflow-y-auto"",
              ""bg-white dark:bg-zinc-900"",
              ""border border-zinc-300 dark:border-zinc-700"",
              ""rounded-lg shadow-lg dark:shadow-zinc-950/50"",
              ""overflow-hidden""
            )}
          >
            <div className=""px-2 py-1.5 border-b border-zinc-200 dark:border-zinc-800"">
              <span className=""text-xs font-medium text-zinc-600 dark:text-zinc-300"">
                Choose a tag or create one
              </span>
            </div>
            <div className=""p-2 sm:p-1.5 flex flex-wrap gap-2 sm:gap-1.5"">
              {filteredSuggestions.map((suggestion, index) => (
                <button
                  type=""button""
                  key={suggestion.id}
                  onClick={() => {
                    addTag(suggestion);
                    setInput("""");
                    setIsOpen(false);
                  }}
                  className={cn(
                    tagStyles.base,
                    selectedIndex === index
                      ? tagStyles.colors.blue
                      : ""bg-zinc-50 text-zinc-700 border border-zinc-300 hover:border-zinc-400 dark:bg-zinc-800/50 dark:text-zinc-300 dark:border-zinc-700 dark:hover:border-zinc-600""
                  )}
                  onMouseEnter={() => setSelectedIndex(index)}
                >
                  {suggestion.label}
                  {selectedIndex === index && (
                    <Check className=""w-3.5 h-3.5"" />
                  )}
                </button>
              ))}

              {canAddNewTag && (
                <button
                  type=""button""
                  onClick={() => {
                    addTag({
                      id: input,
                      label: input,
                      color: randomTagColor(),
                    });
                    setInput("""");
                    setIsOpen(false);
                  }}
                  className={cn(
                    tagStyles.base,
                    selectedIndex === filteredSuggestions.length
                      ? tagStyles.colors.blue
                      : ""bg-zinc-50 text-zinc-700 border border-zinc-300 hover:border-zinc-400 dark:bg-zinc-800/50 dark:text-zinc-300 dark:border-zinc-700 dark:hover:border-zinc-600""
                  )}
                  onMouseEnter={() => setSelectedIndex(filteredSuggestions.length)}
                >
                  <Plus className=""w-3.5 h-3.5"" />
                  Create ""{input}""
                </button>
              )}
            </div>
          </div>
        )}
      </div>

      {error && (
        <p className=""text-sm text-red-600 dark:text-red-400"">{error}</p>
      )}
    </div>
  );
}","use client';

import { X, Check, Plus } from ""lucide-react"";
import React, { useState, useRef, KeyboardEvent, useEffect } from ""react"";

// Dummy hooks to simulate your `useTags` and `useClickOutside` behavior
// Replace with your actual imports in real project
function useTags({ defaultTags = [], maxTags = 10, onChange }) {
  const [tags, setTags] = useState(defaultTags);

  const addTag = (tag) => {
    if (tags.length >= maxTags || tags.find((t) => t.id === tag.id)) return;
    const newTags = [...tags, tag];
    setTags(newTags);
    onChange?.(newTags);
  };

  const removeTag = (tag) => {
    const newTags = tags.filter((t) => t.id !== tag.id);
    setTags(newTags);
    onChange?.(newTags);
  };

  const removeLastTag = () => {
    if (tags.length > 0) {
      const newTags = tags.slice(0, -1);
      setTags(newTags);
      onChange?.(newTags);
    }
  };

  return { tags, addTag, removeTag, removeLastTag };
}

function useClickOutside(ref, handler) {
  useEffect(() => {
    const listener = (event) => {
      if (!ref.current || ref.current.contains(event.target)) return;
      handler(event);
    };
    document.addEventListener(""mousedown"", listener);
    return () => {
      document.removeEventListener(""mousedown"", listener);
    };
  }, [ref, handler]);
}

// --- Tag type & styles ---
interface Tag {
  id: string;
  label: string;
  color?: string;
}

interface TagInputProps {
  onChange?: (tags: Tag[]) => void;
  defaultTags?: Tag[];
  suggestions?: Tag[];
  maxTags?: number;
  label?: string;
  placeholder?: string;
  error?: string;
}

const defaultKokonutTag: Tag = {
  id: ""kokonut-ui"",
  label: ""KokonutUI"",
  color: ""bg-indigo-100 text-indigo-700 border border-indigo-200 dark:bg-indigo-900/30 dark:text-indigo-300 dark:border-indigo-700/30"",
};

export const Input_02: React.FC<TagInputProps> = ({
  onChange,
  defaultTags = [defaultKokonutTag],
  suggestions = [
    { id: ""nextjs"", label: ""Next.js"" },
    { id: ""react"", label: ""React"" },
    { id: ""tailwind"", label: ""Tailwind"" },
  ],
  maxTags = 10,
  label = ""Tags"",
  placeholder = ""Add tags..."",
  error,
}) => {
  const { tags, addTag, removeTag, removeLastTag } = useTags({
    onChange,
    defaultTags,
    maxTags,
  });

  const [input, setInput] = useState("""");
  const [isOpen, setIsOpen] = useState(false);
  const [selectedIndex, setSelectedIndex] = useState(0);
  const inputRef = useRef<HTMLInputElement>(null);
  const containerRef = useRef<HTMLDivElement>(null);

  const filteredSuggestions = suggestions.filter(
    (s) =>
      s.label.toLowerCase().includes(input.toLowerCase()) &&
      !tags.find((t) => t.id === s.id)
  );

  const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {
    if (e.key === ""Enter"" && filteredSuggestions[selectedIndex]) {
      addTag(filteredSuggestions[selectedIndex]);
      setInput("""");
      setIsOpen(false);
    } else if (e.key === ""ArrowDown"") {
      e.preventDefault();
      setSelectedIndex((prev) =>
        prev < filteredSuggestions.length - 1 ? prev + 1 : prev
      );
    } else if (e.key === ""ArrowUp"") {
      e.preventDefault();
      setSelectedIndex((prev) => (prev > 0 ? prev - 1 : 0));
    } else if (e.key === ""Backspace"" && input === """") {
      removeLastTag();
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setInput(e.target.value);
    setIsOpen(true);
    setSelectedIndex(0);
  };

  const handleSelectSuggestion = (tag: Tag) => {
    addTag(tag);
    setInput("""");
    setIsOpen(false);
  };

  useClickOutside(containerRef, () => setIsOpen(false));

  return (
    <div ref={containerRef} className=""w-full max-w-lg"">
      <label className=""block mb-2 text-sm font-medium text-gray-700 dark:text-white"">
        {label}
      </label>

      <div className=""flex flex-wrap gap-2 p-2 border rounded-md dark:border-gray-700"">
        {tags.map((tag) => (
          <span
            key={tag.id}
            className={`inline-flex items-center gap-1 px-2 py-1 text-sm rounded-md ${tag.color || ""bg-gray-200 dark:bg-gray-700 text-black dark:text-white""}`}
          >
            {tag.label}
            <button
              onClick={() => removeTag(tag)}
              className=""text-xs hover:text-red-500""
            >
              <X size={14} />
            </button>
          </span>
        ))}

        <input
          type=""text""
          ref={inputRef}
          value={input}
          onChange={handleInputChange}
          onKeyDown={handleKeyDown}
          placeholder={placeholder}
          className=""flex-grow min-w-[120px] bg-transparent focus:outline-none text-sm dark:text-white""
        />
      </div>

      {isOpen && filteredSuggestions.length > 0 && (
        <ul className=""mt-1 border rounded-md bg-white dark:bg-gray-800 shadow-lg max-h-40 overflow-auto text-sm"">
          {filteredSuggestions.map((tag, index) => (
            <li
              key={tag.id}
              onClick={() => handleSelectSuggestion(tag)}
              className={`flex items-center justify-between px-3 py-2 cursor-pointer ${
                index === selectedIndex
                  ? ""bg-blue-100 dark:bg-gray-700""
                  : ""hover:bg-gray-100 dark:hover:bg-gray-700""
              }`}
            >
              {tag.label}
              <Check
                className={`w-4 h-4 ${
                  tags.find((t) => t.id === tag.id) ? ""block"" : ""invisible""
                }`}
              />
            </li>
          ))}
        </ul>
      )}

      {error && <p className=""mt-1 text-sm text-red-500"">{error}</p>}
    </div>
  );
};

export default Input_02;","This is a SwooshText component that takes in `text` and `className` as props, and displays the text with a special swoosh effect. The component utilizes SVG filters to achieve a motion blur effect. Tailwind CSS is used for styling."
kokonutui,text-04,"""use client"";

import { useState } from ""react"";
import { cn } from ""@/lib/utils"";
import { ChevronRight, ChevronLeft } from ""lucide-react"";

const moodStates = [
    { value: 0, label: ""Not Happy"", color: ""#EF4444"" },
    { value: 50, label: ""Good"", color: ""#F59E0B"" },
    { value: 100, label: ""Very Good"", color: ""#10B981"" },
] as const;

function EmotionFace({ value }: { value: number }) {
    const getFaceConfig = () => {
        if (value === 0) {
            return {
                color: ""#EF4444"",
                eyes: {
                    left: ""M6 10 Q8 8 10 10"",
                    right: ""M14 10 Q16 8 18 10"",
                },
                mouth: ""M8 16 Q12 13 16 16"",
            };
        }

        if (value === 50) {
            return {
                color: ""#F59E0B"",
                eyes: {
                    left: ""M6 9 L10 9"",
                    right: ""M14 9 L18 9"",
                },
                mouth: ""M8 16 L16 16"",
            };
        }

        return {
            color: ""#10B981"",
            eyes: {
                left: ""M6 10 Q8 12 10 10"",
                right: ""M14 10 Q16 12 18 10"",
            },
            mouth: ""M8 16 Q12 19 16 16"",
        };
    };

    const face = getFaceConfig();

    return (
        <svg
            width=""160""
            height=""160""
            viewBox=""0 0 24 24""
            fill=""none""
            xmlns=""http://www.w3.org/2000/svg""
            className=""transition-all duration-300 ease-in-out""
        >
            <title>Face Mood</title>
            {/* Left Eye */}
            <path
                d={face.eyes.left}
                stroke={face.color}
                strokeWidth=""2""
                strokeLinecap=""round""
            />

            {/* Right Eye */}
            <path
                d={face.eyes.right}
                stroke={face.color}
                strokeWidth=""2""
                strokeLinecap=""round""
            />

            {/* Mouth */}
            <path
                d={face.mouth}
                stroke={face.color}
                strokeWidth=""2.5""
                strokeLinecap=""round""
            />
        </svg>
    );
}

export default function Input_10() {
    const [value, setValue] = useState(100);

    const adjustValue = (direction: ""left"" | ""right"") => {
        const currentIndex = moodStates.findIndex(
            (state) => state.value === value
        );
        const newIndex =
            direction === ""left""
                ? Math.max(0, currentIndex - 1)
                : Math.min(moodStates.length - 1, currentIndex + 1);

        setValue(moodStates[newIndex].value);
    };

    return (
        <div className=""w-full max-w-sm space-y-4"">
            <div className=""relative flex items-center justify-center gap-8 py-4"">
                <button
                    type=""button""
                    onClick={() => adjustValue(""left"")}
                    disabled={value === 0}
                    className={cn(
                        ""p-2 rounded-full hover:bg-zinc-100 dark:hover:bg-zinc-800"",
                        ""text-zinc-500 hover:text-zinc-700"",
                        ""dark:text-zinc-400 dark:hover:text-zinc-300"",
                        ""disabled:opacity-50 disabled:cursor-not-allowed"",
                        ""transition-colors""
                    )}
                >
                    <ChevronLeft className=""w-6 h-6"" />
                </button>

                <EmotionFace value={value} />

                <button
                    type=""button""
                    onClick={() => adjustValue(""right"")}
                    disabled={value === 100}
                    className={cn(
                        ""p-2 rounded-full hover:bg-zinc-100 dark:hover:bg-zinc-800"",
                        ""text-zinc-500 hover:text-zinc-700"",
                        ""dark:text-zinc-400 dark:hover:text-zinc-300"",
                        ""disabled:opacity-50 disabled:cursor-not-allowed"",
                        ""transition-colors""
                    )}
                >
                    <ChevronRight className=""w-6 h-6"" />
                </button>
            </div>
        </div>
    );
}","import { FC, useState } from ""react"";
import { ChevronRight, ChevronLeft } from ""lucide-react"";

interface EmotionFaceProps {
  value: number;
}

interface MoodState {
  value: number;
  label: string;
  color: string;
}

const moodStates: MoodState[] = [
  { value: 0, label: ""Not Happy"", color: ""red-600"" },
  { value: 50, label: ""Good"", color: ""yellow-500"" },
  { value: 100, label: ""Very Good"", color: ""green-500"" },
];

const EmotionFace: FC<EmotionFaceProps> = ({ value }) => {
  // Logic here remains the same
  // ...

  return (
    <svg
      width=""160""
      height=""160""
      viewBox=""0 0 24 24""
      fill=""none""
      xmlns=""http://www.w3.org/2000/svg""
      className=""transition-all duration-300 ease-in-out""
    >
      {/* Other elements here */}
      {/* Use Tailwind classes for colors e.g., text-red-600 */}
    </svg>
  );
};

const Input_10: FC = () => {
  const [value, setValue] = useState(100);

  const adjustValue = (direction: ""left"" | ""right"") => {
    // Logic here remains the same
    // ...
  };

  return (
    <div className=""w-full max-w-sm space-y-4"">
      <div className=""relative flex items-center justify-center gap-8 py-4"">
        <button
          type=""button""
          onClick={() => adjustValue(""left"")}
          disabled={value === 0}
          className={`p-2 rounded-full transition-colors ${value === 0 ? 'opacity-50 cursor-not-allowed' : 'hover:bg-gray-100 text-gray-500 hover:text-gray-700'}`}
        >
          <ChevronLeft className=""w-6 h-6"" />
        </button>

        <EmotionFace value={value} />

        <button
          type=""button""
          onClick={() => adjustValue(""right"")}
          disabled={value === 100}
          className={`p-2 rounded-full transition-colors ${value === 100 ? 'opacity-50 cursor-not-allowed' : 'hover:bg-gray-100 text-gray-500 hover:text-gray-700'}`}
        >
          <ChevronRight className=""w-6 h-6"" />
        </button>
      </div>
    </div>
  );
};

export default Input_10;",This component displays a stylized text with custom shadows - the shadows disappear on hover. It also allows for custom text and shadow colors.
kokonutui,text-05,"""use client"";

import { useState, useRef } from ""react"";
import { cn } from ""@/lib/utils"";
import { X, Check } from ""lucide-react"";

interface SimpleInputProps {
    label?: string;
    placeholder?: string;
    error?: string;
    success?: string;
    onChange?: (value: string) => void;
    onClear?: () => void;
    type?: ""text"" | ""email"" | ""password"" | ""search"";
}

export default function Input_01({
    label = ""Label"",
    placeholder = ""Type something..."",
    error,
    success,
    onChange,
    onClear,
    type = ""text"",
}: SimpleInputProps) {
    const [value, setValue] = useState("""");
    const [isFocused, setIsFocused] = useState(false);
    const inputRef = useRef<HTMLInputElement>(null);

    const handleClear = () => {
        setValue("""");
        onClear?.();
        inputRef.current?.focus();
    };

    return (
        <div className=""w-full max-w-xs space-y-1.5"">
            <label
                className=""text-sm font-medium text-zinc-700 dark:text-zinc-300""
                htmlFor={label}
            >
                {label}
            </label>

            <div className=""relative group"">
                <input
                    ref={inputRef}
                    type={type}
                    value={value}
                    onChange={(e) => {
                        setValue(e.target.value);
                        onChange?.(e.target.value);
                    }}
                    onFocus={() => setIsFocused(true)}
                    onBlur={() => setIsFocused(false)}
                    placeholder={placeholder}
                    className={cn(
                        ""w-full px-3 py-2"",
                        ""rounded-lg"",
                        ""bg-white dark:bg-zinc-900"",
                        ""border border-zinc-200 dark:border-zinc-800"",
                        ""text-sm text-zinc-900 dark:text-zinc-100"",
                        ""placeholder:text-zinc-400 dark:placeholder:text-zinc-600"",
                        ""transition-all duration-200"",
                        ""focus:outline-hidden focus:ring-2"",
                        error
                            ? ""border-red-500 focus:ring-red-500/20""
                            : success
                            ? ""border-green-500 focus:ring-green-500/20""
                            : ""focus:ring-indigo-500/20"",
                        isFocused && ""border-indigo-500""
                    )}
                />

                {/* Clear button */}
                {value && (
                    <button
                        onClick={handleClear}
                        className={cn(
                            ""absolute right-2 top-1/2 -translate-y-1/2"",
                            ""p-1 rounded-md"",
                            ""text-zinc-400 hover:text-zinc-600"",
                            ""dark:text-zinc-600 dark:hover:text-zinc-400"",
                            ""transition-colors""
                        )}
                    >
                        <X className=""w-4 h-4"" />
                    </button>
                )}

                {/* Status indicator */}
                <div
                    className={cn(
                        ""absolute -right-4 top-1/2 -translate-y-1/2"",
                        ""transition-opacity duration-200"",
                        !error && !success && ""opacity-0""
                    )}
                >
                    {error ? (
                        <X className=""w-4 h-4 text-red-500"" />
                    ) : success ? (
                        <Check className=""w-4 h-4 text-green-500"" />
                    ) : null}
                </div>
            </div>

            {/* Error/Success message */}
            {(error || success) && (
                <p
                    className={cn(
                        ""text-sm"",
                        error ? ""text-red-500"" : ""text-green-500""
                    )}
                >
                    {error || success}
                </p>
            )}
        </div>
    );
}","import React, { FC, useState, useRef, ChangeEvent } from ""react"";
import { X, Check } from ""lucide-react"";

interface SimpleInputProps {
    label?: string;
    placeholder?: string;
    error?: string;
    success?: string;
    onChange?: (value: string) => void;
    onClear?: () => void;
    type?: ""text"" | ""email"" | ""password"" | ""search"";
}

export const Input_01: FC<SimpleInputProps> = ({
    label = ""Label"",
    placeholder = ""Type something..."",
    error,
    success,
    onChange,
    onClear,
    type = ""text"",
}) => {
    const [value, setValue] = useState<string>("""");
    const [isFocused, setIsFocused] = useState<boolean>(false);
    const inputRef = useRef<HTMLInputElement>(null);

    const handleClear = (): void => {
        setValue("""");
        onClear?.();
        inputRef.current?.focus();
    };

    const handleOnChange = (e: ChangeEvent<HTMLInputElement>): void => {
        setValue(e.target.value);
        onChange?.(e.target.value);
    }

    return (
        <div className=""w-full max-w-xs space-y-1.5"">
            <label className=""text-sm font-medium text-gray-700 dark:text-gray-300"" htmlFor={label} >
                {label}
            </label>

            <div className=""relative group"">
                <input
                    ref={inputRef}
                    type={type}
                    value={value}
                    onChange={handleOnChange}
                    onFocus={() => setIsFocused(true)}
                    onBlur={() => setIsFocused(false)}
                    placeholder={placeholder}
                    className={`w-full px-3 py-2 rounded-lg bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-800 text-sm text-gray-900 dark:text-gray-100 placeholder:gray-400 dark:placeholder:gray-600 transition-all duration-200 focus:outline-none ${isFocused ? ""border-blue-500"" : """"} ${error ? ""border-red-500 focus:ring-red-500/20"" : success ? ""border-green-500 focus:ring-green-500/20"" : ""focus:ring-blue-500/20""}`} 
                />

                {/* Clear button */}
                {value && (
                    <button onClick={handleClear} className=""absolute right-2 top-1/2 transform -translate-y-1/2 p-1 rounded-md text-gray-400 hover:text-gray-600 dark:text-gray-600 dark:hover:text-gray-400 transition-colors"">
                        <X className=""w-4 h-4"" />
                    </button>
                )}

                {/* Status indicator */}
                <div className={`absolute -right-4 top-1/2 transform -translate-y-1/2 transition-opacity duration-200 ${!error && !success ? ""opacity-0"" : """"}`}>
                    {error ? (
                        <X className=""w-4 h-4 text-red-500"" />
                    ) : success ? (
                        <Check className=""w-4 h-4 text-green-500"" />
                    ) : null}
                </div>
            </div>

            {/* Error/Success message */}
            {(error || success) && (
                <p className={`text-sm ${error ? ""text-red-500"" : ""text-green-500""}`}>
                    {error || success}
                </p>
            )}
        </div>
    );
}","This component displays a string of text with certain letters bouncing in an ongoing animation. Users can customize the text, the class name, the delay between each letter's animation, and the indices of the letters to animate. All the text is styled with Tailwind CSS and the animations are handled by the Framer Motion library."
kokonutui,text-03,"""use client"";

import { useState, useRef } from ""react"";
import { cn } from ""@/lib/utils"";
import { Check, Copy } from ""lucide-react"";
import { useCopyToClipboard } from ""@/hooks/use-copy-to-clipboard"";

interface ColorInputProps {
  onChange?: (color: string) => void; // Callback for final color
  defaultValue?: string; // Default color
  swatches?: string[]; // Swatches for quick selection
  showOpacity?: boolean; // Whether to show the opacity slider
  label?: string; // Label for the input
}

const defaultSwatches = [
  ""#ef4444"",
  ""#f97316"",
  ""#f59e0b"",
  ""#84cc16"",
  ""#22c55e"",
  ""#06b6d4"",
  ""#3b82f6"",
  ""#6366f1"",
  ""#8b5cf6"",
  ""#d946ef"",
  ""#ec4899"",
  ""#f43f5e"",
];

// Helper to calculate final color with opacity
const generateFinalColor = (color: string, opacity: number): string => {
  if (opacity === 100) return color; // No need to calculate if opacity is 100%
  const alpha = Math.round(opacity * 2.55) // Convert opacity (0-100) to 0-255
    .toString(16) // Convert to hexadecimal
    .padStart(2, ""0""); // Ensure 2 digits (e.g., ""0F"")
  return `${color}${alpha}`;
};

export default function Input_08({
  onChange,
  defaultValue = ""#3b82f6"",
  swatches = defaultSwatches,
  showOpacity = true,
  label = ""Color"",
}: ColorInputProps) {
  const [color, setColor] = useState(defaultValue); // Base color without opacity
  const [opacity, setOpacity] = useState(100); // Opacity (0-100)
  const { isCopied, copyToClipboard } = useCopyToClipboard();

  const finalColor = generateFinalColor(color, opacity); // Calculate the final color

  // Trigger the onChange callback whenever color or opacity changes
  const updateFinalColor = (newColor: string, newOpacity = opacity) => {
    const updatedColor = generateFinalColor(newColor, newOpacity);
    setColor(newColor);
    onChange?.(updatedColor); // Pass final color to parent
  };

  const updateOpacity = (newOpacity: number) => {
    setOpacity(newOpacity);
    onChange?.(generateFinalColor(color, newOpacity)); // Pass final color to parent
  };

  const handleCopy = () => {
    copyToClipboard(finalColor); // Copy the final color
  };

  return (
    <div className=""w-full max-w-xs space-y-2 relative z-10 min-h-[200px]"">
      {label && (
        <label
          htmlFor=""color-input""
          className=""text-sm font-medium text-zinc-700 dark:text-zinc-300""
        >
          {label}
        </label>
      )}

      {/* Color Picker */}
      <div className=""p-3 bg-white dark:bg-zinc-900 border border-zinc-200 dark:border-zinc-800 rounded-lg"">
        {/* Color Preview & Input */}
        <div className=""flex gap-2 items-center"">
          <div
            className=""w-8 h-8 rounded-md border border-zinc-200 dark:border-zinc-700""
            style={{ backgroundColor: finalColor }} // Display final color
          />
          <input
            id=""color-input""
            type=""text""
            value={finalColor.toUpperCase()} // Show final color
            onChange={(e) => {
              const value = e.target.value.slice(0, 7); // Extract base color
              if (/^#[0-9A-F]{6}$/i.test(value)) {
                updateFinalColor(value);
              }
            }}
            className={cn(
              ""flex-1 px-2 py-1 rounded-md border border-zinc-200 dark:border-zinc-800"",
              ""bg-white dark:bg-zinc-900 text-sm font-mono"",
              ""focus:outline-hidden focus:ring-2 focus:ring-indigo-500/20""
            )}
          />
          <button type=""button"" onClick={handleCopy} className=""ml-2 hover:opacity-70"">
            {isCopied ? (
              <Check className=""w-4 h-4 text-green-500"" />
            ) : (
              <Copy className=""w-4 h-4 text-zinc-500"" />
            )}
          </button>
        </div>

        {/* Opacity Slider */}
        {showOpacity && (
          <div className=""mt-4 space-y-1.5"">
            <div className=""flex justify-between text-xs"">
              <span>Opacity</span>
              <span>{opacity}%</span>
            </div>
            <input
              type=""range""
              min=""0""
              max=""100""
              value={opacity}
              onChange={(e) => updateOpacity(Number(e.target.value))}
              className={cn(
                ""w-full h-2 rounded-full appearance-none"",
                ""bg-linear-to-r from-transparent to-current cursor-pointer""
              )}
              style={{ color }}
            />
          </div>
        )}

        {/* Color Swatches */}
        <div className=""mt-4 space-y-1.5"">
          <div className=""text-xs font-medium text-zinc-600 dark:text-zinc-400"">Swatches</div>
          <div className=""grid grid-cols-6 gap-1"">
            {swatches.map((swatch) => (
              <button
                type=""button""
                key={swatch}
                onClick={() => updateFinalColor(swatch)}
                className={cn(
                  ""w-6 h-6 rounded-md border border-zinc-200 dark:border-zinc-700"",
                  ""transition-transform hover:scale-110 relative""
                )}
                style={{ backgroundColor: swatch }}
              >
                {color === swatch && (
                  <Check
                    className={cn(
                      ""w-4 h-4 absolute inset-0 m-auto text-white"",
                      ""drop-shadow-[0_1px_1px_rgba(0,0,0,0.5)]""
                    )}
                  />
                )}
              </button>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}","import React, { FC, useState } from 'react';
import { Check, Copy } from ""lucide-react"";
import { useCopyToClipboard } from ""@/hooks/use-copy-to-clipboard"";

interface ColorInputProps {
  onChange?: (color: string) => void;
  defaultValue?: string;
  swatches?: string[]; 
  showOpacity?: boolean;
  label?: string;
}

const Input_08: FC<ColorInputProps> = ({ onChange, defaultValue = ""#3b82f6"", swatches = defaultSwatches, showOpacity = true, label = ""Color"" }) => {
  const [color, setColor] = useState<string>(defaultValue);
  const [opacity, setOpacity] = useState<number>(100);
  const { isCopied, copyToClipboard } = useCopyToClipboard();

  const finalColor = generateFinalColor(color, opacity);

  const updateFinalColor = (newColor: string, newOpacity: number = opacity): void => {
    const updatedColor = generateFinalColor(newColor, newOpacity);
    setColor(newColor);
    if (onChange) onChange(updatedColor); 
  };

  const updateOpacity = (newOpacity: number): void => {
    setOpacity(newOpacity);
    if (onChange) onChange(generateFinalColor(color, newOpacity)); 
  };

  const handleCopy = (): void => {
    copyToClipboard(finalColor); 
  };

  return (
    <div className=""w-full max-w-xs space-y-2 relative z-10 min-h-[200px]"">
      {label && (
        <label htmlFor=""color-input"" className=""text-sm font-medium text-gray-700 dark:text-gray-300"">
          {label}
        </label>
      )}

      <div className=""p-3 bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-800 rounded-lg"">
        <div className=""flex gap-2 items-center"">
          <div className=""w-8 h-8 rounded-md border border-gray-200 dark:border-gray-700 bg-blue-700"" />
          <input
            id=""color-input""
            type=""text""
            value={finalColor.toUpperCase()}
            onChange={(e) => {
              const value = e.target.value.slice(0, 7);
              if (/^#[0-9A-F]{6}$/i.test(value)) {
                updateFinalColor(value);
              }
            }}
            className=""flex-1 px-2 py-1 rounded-md border border-gray-200 dark:border-gray-800 bg-white dark:bg-gray-900 text-sm font-mono focus:outline-none focus:ring-2 focus:ring-blue-500""
          />
          <button type=""button"" onClick={handleCopy} className=""ml-2 hover:opacity-70"">
            {isCopied ? (
              <Check className=""w-4 h-4 text-green-500"" />
            ) : (
              <Copy className=""w-4 h-4 text-gray-500"" />
            )}
          </button>
        </div>

        {showOpacity && (
          <div className=""mt-4 space-y-1.5"">
            <div className=""flex justify-between text-xs"">
              <span>Opacity</span>
              <span>{opacity}%</span>
            </div>
            <input
              type=""range""
              min=""0""
              max=""100""
              value={opacity.toString()}
              onChange={(e) => updateOpacity(Number(e.target.value))}
              className=""w-full h-2 rounded-full appearance-none bg-gradient-to-r from-transparent to-current cursor-pointer""
              style={{ color }}
            />
          </div>
        )}

        <div className=""mt-4 space-y-1.5"">
          <div className=""text-xs font-medium text-gray-600 dark:text-gray-400"">Swatches</div>
          <div className=""grid grid-cols-6 gap-1"">
            {swatches.map((swatch) => (
              <button
                type=""button""
                key={swatch}
                onClick={() => updateFinalColor(swatch)}
                className=""w-6 h-6 rounded-md border border-gray-200 dark:border-gray-700 transition-transform hover:scale-110 relative""
                style={{ backgroundColor: swatch }}
              >
                {color === swatch && (
                  <Check
                    className=""w-4 h-4 absolute inset-0 m-auto text-white drop-shadow-md""
                  />
                )}
              </button>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Input_08;",This is an animated text component that scales and moves up each character of the text when hovered over. It uses Framer Motion for the animation and Tailwind CSS for styling.
kokonutui,text-01,"""use client"";

import { useState } from ""react"";
import { cn } from ""@/lib/utils"";
import { Eye, EyeOff, Check, X } from ""lucide-react"";

const passwordRequirements = [
    { label: ""8+ characters"", test: (v: string) => v.length >= 8 },
    { label: ""Number"", test: (v: string) => /\d/.test(v) },
    { label: ""Lowercase"", test: (v: string) => /[a-z]/.test(v) },
    { label: ""Uppercase"", test: (v: string) => /[A-Z]/.test(v) },
    {
        label: ""Special (!@#$)"",
        test: (v: string) => /[!@#$%^&*(),.?"":{}|<>]/.test(v),
    },
] as const;

export default function Input_05() {
    const [value, setValue] = useState("""");
    const [showPassword, setShowPassword] = useState(false);

    const getStrength = (value: string): number => {
        if (!value) return 0;
        return (
            passwordRequirements.filter((req) => req.test(value)).length * 20
        );
    };

    const strength = getStrength(value);
    const strengthLabel =
        strength <= 40 ? ""Weak"" : strength <= 80 ? ""Medium"" : ""Strong"";

    return (
        <div className=""w-full space-y-2"">
            <label
                htmlFor=""input-06""
                className=""block text-sm font-medium text-zinc-700 dark:text-zinc-300""
            >
                Label
            </label>

            <div className=""relative"">
                <input
                    id=""input-06""
                    type={showPassword ? ""text"" : ""password""}
                    value={value}
                    onChange={(e) => {
                        setValue(e.target.value);
                    }}
                    placeholder=""Enter your password""
                    className={cn(
                        ""w-full px-3 py-2 pr-10"",
                        ""rounded-md border"",
                        ""bg-white dark:bg-black/5"",
                        ""border-zinc-200 dark:border-zinc-800"",
                        ""focus:outline-hidden focus:ring-2"",
                        ""focus:ring-zinc-900/20 dark:focus:ring-zinc-100/20""
                    )}
                />
                <button
                    type=""button""
                    onClick={() => setShowPassword(!showPassword)}
                    aria-label={
                        showPassword ? ""Hide password"" : ""Show password""
                    }
                    className=""absolute right-3 top-1/2 -translate-y-1/2
                    text-zinc-400 hover:text-zinc-900 
                    dark:text-zinc-500 dark:hover:text-zinc-100
                    transition-colors""
                >
                    {showPassword ? (
                        <EyeOff className=""w-4 h-4"" />
                    ) : (
                        <Eye className=""w-4 h-4"" />
                    )}
                </button>
            </div>

            {value && (
                <div className=""space-y-1"">
                    <div className=""h-1 w-full bg-zinc-100 dark:bg-zinc-800 rounded-full"">
                        <div
                            className=""h-full bg-zinc-900 dark:bg-zinc-100 transition-all duration-300""
                            style={{ width: `${strength}%` }}
                        />
                    </div>
                    <p className=""text-xs text-zinc-500 dark:text-zinc-400"">
                        Strength:{"" ""}
                        <span className=""font-medium"">{strengthLabel}</span>
                    </p>
                </div>
            )}

            <div className=""space-y-1.5 text-sm text-zinc-500 dark:text-zinc-400"">
                {passwordRequirements.map(({ label, test }) => (
                    <div key={label} className=""flex items-center gap-2"">
                        {test(value) ? (
                            <Check className=""w-3.5 h-3.5 text-zinc-900 dark:text-zinc-100"" />
                        ) : (
                            <X className=""w-3.5 h-3.5"" />
                        )}
                        <span>{label}</span>
                    </div>
                ))}
            </div>
        </div>
    );
}","import React, { useState, ChangeEvent } from ""react"";
import { Eye, EyeOff, Check, X } from ""lucide-react"";

interface PasswordRequirement {
    label: string;
    test: (v: string) => boolean;
}

const passwordRequirements: PasswordRequirement[] = [
    { label: ""8+ characters"", test: (v: string) => v.length >= 8 },
    { label: ""Number"", test: (v: string) => /\d/.test(v) },
    { label: ""Lowercase"", test: (v: string) => /[a-z]/.test(v) },
    { label: ""Uppercase"", test: (v: string) => /[A-Z]/.test(v) },
    {
        label: ""Special (!@#$)"",
        test: (v: string) => /[!@#$%^&*(),.?"":{}|<>]/.test(v),
    },
];

const Input_05: React.FC = () => {
    const [value, setValue] = useState("""");
    const [showPassword, setShowPassword] = useState(false);

    const getStrength = (value: string): number => {
        if (!value) return 0;
        return (
            passwordRequirements.filter((req) => req.test(value)).length * 20
        );
    };

    const strength = getStrength(value);
    const strengthLabel =
        strength <= 40 ? ""Weak"" : strength <= 80 ? ""Medium"" : ""Strong"";

    const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {
        setValue(event.target.value);
    };

    return (
        <div className=""w-full space-y-2"">
            <label
                htmlFor=""input-06""
                className=""block text-sm font-medium text-gray-700 dark:text-gray-300""
            >
                Label
            </label>

            <div className=""relative"">
                <input
                    id=""input-06""
                    type={showPassword ? ""text"" : ""password""}
                    value={value}
                    onChange={handleInputChange}
                    placeholder=""Enter your password""
                    className=""w-full px-3 py-2 pr-10 rounded-md border border-gray-200 dark:border-gray-800 focus:outline-none focus:ring-2 focus:ring-gray-900 dark:focus:ring-gray-100 bg-white dark:bg-black/5 transition-colors""
                />
                <button
                    type=""button""
                    onClick={() => setShowPassword(!showPassword)}
                    aria-label={
                        showPassword ? ""Hide password"" : ""Show password""
                    }
                    className=""absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-900 dark:text-gray-500 dark:hover:text-gray-100 transition-colors""
                >
                    {showPassword ? (
                        <EyeOff className=""w-4 h-4"" />
                    ) : (
                        <Eye className=""w-4 h-4"" />
                    )}
                </button>
            </div>

            {value && (
                <div className=""space-y-1"">
                    <div className=""h-1 w-full bg-gray-100 dark:bg-gray-800 rounded-full"">
                        <div
                            className=""h-full bg-gray-900 dark:bg-gray-100 transition-all duration-300""
                            style={{ width: `${strength}%` }}
                        />
                    </div>
                    <p className=""text-xs text-gray-500 dark:text-gray-400"">
                        Strength:{"" ""}
                        <span className=""font-medium"">{strengthLabel}</span>
                    </p>
                </div>
            )}

            <div className=""space-y-1.5 text-sm text-gray-500 dark:text-gray-400"">
                {passwordRequirements.map(({ label, test }) => (
                    <div key={label} className=""flex items-center gap-2"">
                        {test(value) ? (
                            <Check className=""w-3.5 h-3.5 text-gray-900 dark:text-gray-100"" />
                        ) : (
                            <X className=""w-3.5 h-3.5"" />
                        )}
                        <span>{label}</span>
                    </div>
                ))}
            </div>
        </div>
    );
}

export default Input_05;",This component displays a heading with a shimmer effect.
kokonutui,profile-02,"""use client"";

import { Button } from ""@/components/ui/button"";
import { Check, Pencil, Star, Sparkles } from ""lucide-react"";
import { cn } from ""@/lib/utils"";

interface PricingTier {
    name: string;
    icon: React.ReactNode;
    price: number;
    description: string;
    features: string[];
    popular?: boolean;
    color: string;
}

const sampleTiers: PricingTier[] = [
    {
        name: ""Creator"",
        icon: <Pencil className=""w-6 h-6"" />,
        price: 29,
        description: ""Perfect for short video beginners"",
        color: ""amber"",
        features: [
            ""60-second Video Export"",
            ""10 Trending Templates"",
            ""Auto Text-to-Speech"",
            ""Basic Transitions"",
        ],
    },
    {
        name: ""Influencer"",
        icon: <Star className=""w-6 h-6"" />,
        price: 79,
        description: ""For serious content creators"",
        color: ""blue"",
        features: [
            ""3-minute Video Export"",
            ""Voice Effects & Filters"",
            ""Trending Sound Library"",
            ""Auto Captions & Subtitles"",
        ],
        popular: true,
    },
    {
        name: ""Pro Studio"",
        icon: <Sparkles className=""w-6 h-6"" />,
        price: 149,
        description: ""For viral content masters"",
        color: ""purple"",
        features: [
            ""Multi-clip Editing"",
            ""Green Screen Effects"",
            ""Viral Sound Detection"",
            ""Engagement Analytics"",
        ],
    },
];

export default function Pricing_06({
    tag = ""Simple Pricing"",
    title = ""Make Short Videos That Pop"",
    description = ""Edit, enhance, and go viral in minutes"",
    tiers = sampleTiers,
}: {
    tag?: string;
    title?: string;
    description?: string;
    tiers: PricingTier[];
}) {
    return (
        <div className=""w-full max-w-6xl mx-auto px-4"">
            <div className=""text-center space-y-6 mb-16"">
                <div className=""font-handwritten text-xl text-blue-500 rotate-[-1deg]"">
                    {tag}
                </div>
                <div className=""relative"">
                    <h2 className=""text-4xl md:text-5xl font-bold font-handwritten text-zinc-900 dark:text-white rotate-[-1deg]"">
                        {title}
                        <div className=""absolute -right-12 top-0 text-amber-500 rotate-12"">
                            âœ¨
                        </div>
                        <div className=""absolute -left-8 bottom-0 text-blue-500 -rotate-12"">
                            â­ï¸
                        </div>
                    </h2>
                    <div
                        className=""absolute -bottom-4 left-1/2 -translate-x-1/2 w-44 h-3 bg-blue-500/20 
                        rotate-[-1deg] rounded-full blur-sm""
                    />
                </div>
                <p className=""font-handwritten text-xl text-zinc-600 dark:text-zinc-400 rotate-[-1deg]"">
                    {description}
                </p>
            </div>

            <div className=""grid grid-cols-1 md:grid-cols-3 gap-8"">
                {tiers.map((tier, index) => (
                    <div
                        key={tier.name}
                        className={cn(
                            ""relative group"",
                            ""transition-all duration-300"",
                            index === 0 && ""rotate-[-1deg]"",
                            index === 1 && ""rotate-[1deg]"",
                            index === 2 && ""rotate-[-2deg]""
                        )}
                    >
                        <div
                            className={cn(
                                ""absolute inset-0 bg-white dark:bg-zinc-900"",
                                ""border-2 border-zinc-900 dark:border-white"",
                                ""rounded-lg shadow-[4px_4px_0px_0px] shadow-zinc-900 dark:shadow-white"",
                                ""transition-all duration-300"",
                                ""group-hover:shadow-[8px_8px_0px_0px]"",
                                ""group-hover:translate-x-[-4px]"",
                                ""group-hover:translate-y-[-4px]""
                            )}
                        />

                        <div className=""relative p-6"">
                            {tier.popular && (
                                <div
                                    className=""absolute -top-2 -right-2 bg-amber-400 text-zinc-900 
                                    font-handwritten px-3 py-1 rounded-full rotate-12 text-sm border-2 border-zinc-900""
                                >
                                    Popular!
                                </div>
                            )}

                            <div className=""mb-6"">
                                <div
                                    className={cn(
                                        ""w-12 h-12 rounded-full mb-4"",
                                        ""flex items-center justify-center"",
                                        ""border-2 border-zinc-900 dark:border-white"",
                                        `text-${tier.color}-500`
                                    )}
                                >
                                    {tier.icon}
                                </div>
                                <h3 className=""font-handwritten text-2xl text-zinc-900 dark:text-white"">
                                    {tier.name}
                                </h3>
                                <p className=""font-handwritten text-zinc-600 dark:text-zinc-400"">
                                    {tier.description}
                                </p>
                            </div>

                            {/* Price */}
                            <div className=""mb-6 font-handwritten"">
                                <span className=""text-4xl font-bold text-zinc-900 dark:text-white"">
                                    ${tier.price}
                                </span>
                                <span className=""text-zinc-600 dark:text-zinc-400"">
                                    /month
                                </span>
                            </div>

                            <div className=""space-y-3 mb-6"">
                                {tier.features.map((feature) => (
                                    <div
                                        key={feature}
                                        className=""flex items-center gap-3""
                                    >
                                        <div
                                            className=""w-5 h-5 rounded-full border-2 border-zinc-900 
                                            dark:border-white flex items-center justify-center""
                                        >
                                            <Check className=""w-3 h-3"" />
                                        </div>
                                        <span className=""font-handwritten text-lg text-zinc-900 dark:text-white"">
                                            {feature}
                                        </span>
                                    </div>
                                ))}
                            </div>

                            <Button
                                className={cn(
                                    ""w-full h-12 font-handwritten text-lg relative"",
                                    ""border-2 border-zinc-900 dark:border-white"",
                                    ""transition-all duration-300"",
                                    ""shadow-[4px_4px_0px_0px] shadow-zinc-900 dark:shadow-white"",
                                    ""hover:shadow-[6px_6px_0px_0px]"",
                                    ""hover:translate-x-[-2px] hover:translate-y-[-2px]"",
                                    tier.popular
                                        ? [
                                              ""bg-amber-400 text-zinc-900"",
                                              ""hover:bg-amber-300"",
                                              ""active:bg-amber-400"",
                                              ""dark:hover:bg-amber-300"",
                                              ""dark:active:bg-amber-400"",
                                          ]
                                        : [
                                              ""bg-zinc-50 dark:bg-zinc-800"",
                                              ""text-zinc-900 dark:text-white"",
                                              ""hover:bg-white dark:hover:bg-zinc-700"",
                                              ""active:bg-zinc-50 dark:active:bg-zinc-800"",
                                          ]
                                )}
                            >
                                Get Started
                            </Button>
                        </div>
                    </div>
                ))}
            </div>
            <div className=""absolute -z-10 inset-0 overflow-hidden"">
                <div className=""absolute top-40 left-20 text-4xl rotate-12"">
                    âœŽ
                </div>
                <div className=""absolute bottom-40 right-20 text-4xl -rotate-12"">
                    âœï¸
                </div>
            </div>
        </div>
    );
}","import { Button } from ""@/components/ui/button"";
import { Check, Pencil, Star, Sparkles } from ""lucide-react"";
import React from 'react';

interface PricingTier {
    name: string;
    icon: React.ReactNode;
    price: number;
    description: string;
    features: string[];
    popular?: boolean;
    color: string;
}

interface Pricing_06Props {
    tag?: string;
    title?: string;
    description?: string;
    tiers: PricingTier[];
}

export const Pricing_06: React.FC<Pricing_06Props> = ({
    tag = ""Simple Pricing"",
    title = ""Make Short Videos That Pop"",
    description = ""Edit, enhance, and go viral in minutes"",
    tiers,
}) => {
    return (
        <div className=""w-full max-w-6xl mx-auto px-4"">
            <div className=""text-center space-y-6 mb-16"">
                <div className=""font-handwritten text-xl text-blue-500 rotate-[-1deg]"">
                    {tag}
                </div>
                <div className=""relative"">
                    <h2 className=""text-4xl md:text-5xl font-bold font-handwritten text-zinc-900 dark:text-white rotate-[-1deg]"">
                        {title}
                        <div className=""absolute -right-12 top-0 text-amber-500 rotate-12"">
                            âœ¨
                        </div>
                        <div className=""absolute -left-8 bottom-0 text-blue-500 -rotate-12"">
                            â­ï¸
                        </div>
                    </h2>
                    <div
                        className=""absolute -bottom-4 left-1/2 -translate-x-1/2 w-44 h-3 bg-blue-500/20 
                        rotate-[-1deg] rounded-full blur-sm""
                    />
                </div>
                <p className=""font-handwritten text-xl text-zinc-600 dark:text-zinc-400 rotate-[-1deg]"">
                    {description}
                </p>
            </div>

            <div className=""grid grid-cols-1 md:grid-cols-3 gap-8"">
                {tiers.map((tier, index) => (
                    <div
                        key={tier.name}
                        className={`relative group transition-all duration-300 ${index === 0 ? ""rotate-[-1deg]"" : """"} ${index === 1 ? ""rotate-[1deg]"" : """"} ${index === 2 ? ""rotate-[-2deg]"" : """"}`}
                    >
                        <div
                            className={`absolute inset-0 bg-white dark:bg-zinc-900 border-2 border-zinc-900 dark:border-white rounded-lg shadow-[4px_4px_0px_0px] shadow-zinc-900 dark:shadow-white transition-all duration-300 group-hover:shadow-[8px_8px_0px_0px] group-hover:translate-x-[-4px] group-hover:translate-y-[-4px]`}
                        />
                        <div className=""relative p-6"">
                            {tier.popular && (
                                <div
                                    className=""absolute -top-2 -right-2 bg-amber-400 text-zinc-900 
                                    font-handwritten px-3 py-1 rounded-full rotate-12 text-sm border-2 border-zinc-900""
                                >
                                    Popular!
                                </div>
                            )}
                            <div className=""mb-6"">
                                <div
                                    className={`w-12 h-12 rounded-full mb-4 flex items-center justify-center border-2 border-zinc-900 dark:border-white text-${tier.color}-500`}
                                >
                                    {tier.icon}
                                </div>
                                <h3 className=""font-handwritten text-2xl text-zinc-900 dark:text-white"">
                                    {tier.name}
                                </h3>
                                <p className=""font-handwritten text-zinc-600 dark:text-zinc-400"">
                                    {tier.description}
                                </p>
                            </div>
                            <div className=""mb-6 font-handwritten"">
                                <span className=""text-4xl font-bold text-zinc-900 dark:text-white"">
                                    ${tier.price}
                                </span>
                                <span className=""text-zinc-600 dark:text-zinc-400"">
                                    /month
                                </span>
                            </div>
                            <div className=""space-y-3 mb-6"">
                                {tier.features.map((feature) => (
                                    <div
                                        key={feature}
                                        className=""flex items-center gap-3""
                                    >
                                        <div
                                            className=""w-5 h-5 rounded-full border-2 border-zinc-900 
                                            dark:border-white flex items-center justify-center""
                                        >
                                            <Check className=""w-3 h-3"" />
                                        </div>
                                        <span className=""font-handwritten text-lg text-zinc-900 dark:text-white"">
                                            {feature}
                                        </span>
                                    </div>
                                ))}
                            </div>
                            <Button
                                className={`w-full h-12 font-handwritten text-lg relative border-2 border-zinc-900 dark:border-white transition-all duration-300 shadow-[4px_4px_0px_0px] shadow-zinc-900 dark:shadow-white hover:shadow-[6px_6px_0px_0px] hover:translate-x-[-2px] hover:translate-y-[-2px] ${tier.popular ? ""bg-amber-400 text-zinc-900 hover:bg-amber-300 active:bg-amber-400 dark:hover:bg-amber-300 dark:active:bg-amber-400"" : ""bg-zinc-50 dark:bg-zinc-800 text-zinc-900 dark:text-white hover:bg-white dark:hover:bg-zinc-700 active:bg-zinc-50 dark:active:bg-zinc-800""}`}
                            >
                                Get Started
                            </Button>
                        </div>
                    </div>
                ))}
            </div>
            <div className=""absolute -z-10 inset-0 overflow-hidden"">
                <div className=""absolute top-40 left-20 text-4xl rotate-12"">
                    âœŽ
                </div>
                <div className=""absolute bottom-40 right-20 text-4xl -rotate-12"">
                    âœï¸
                </div>
            </div>
        </div>
    );
}","This component displays a user profile with name, role, avatar, location, email, website, and bio. It uses Tailwind CSS for styling and TypeScript for strong type checking."
kokonutui,profile-05,"""use client"";

import { useState } from ""react"";
import { Button } from ""@/components/ui/button"";
import { Check, ArrowRight, Sparkles, ChartNoAxesColumn } from ""lucide-react"";
import { cn } from ""@/lib/utils"";

interface Feature {
    name: string;
    description: string;
    included: boolean;
}

interface PricingTier {
    name: string;
    icon: React.ReactNode;
    price: {
        monthly: number;
        yearly: number;
    };
    description: string;
    features: Feature[];
}

const tiers: PricingTier[] = [
    {
        name: ""Pro"",
        icon: <ChartNoAxesColumn className=""w-5 h-5"" />,
        price: {
            monthly: 49,
            yearly: 470,
        },
        description: ""Perfect for growing teams and businesses"",
        features: [
            {
                name: ""Team Management"",
                description: ""Add up to 20 team members"",
                included: true,
            },
            {
                name: ""Advanced Analytics"",
                description: ""Get detailed insights and reports"",
                included: true,
            },
            {
                name: ""Priority Support"",
                description: ""24/7 email and chat support"",
                included: true,
            },
            {
                name: ""API Access"",
                description: ""Full access to our REST API"",
                included: true,
            },
        ],
    },
    {
        name: ""Enterprise"",
        icon: <Sparkles className=""w-5 h-5"" />,
        price: {
            monthly: 99,
            yearly: 990,
        },
        description: ""For organizations that need more"",
        features: [
            {
                name: ""Unlimited Teams"",
                description: ""No limit on team members"",
                included: true,
            },
            {
                name: ""Custom Analytics"",
                description: ""Tailored reports and insights"",
                included: true,
            },
            {
                name: ""Dedicated Support"",
                description: ""Personal account manager"",
                included: true,
            },
            {
                name: ""Advanced Security"",
                description: ""Enhanced security features"",
                included: true,
            },
            {
                name: ""Custom Integrations"",
                description: ""Build custom workflows"",
                included: true,
            },
            {
                name: ""SLA Guarantee"",
                description: ""99.9% uptime guarantee"",
                included: true,
            },
        ],
    },
];

export default function Pricing_04() {
    const [isYearly, setIsYearly] = useState(false);

    return (
        <div className=""w-full max-w-7xl mx-auto px-4"">
            {/* Billing Toggle */}
            <div className=""flex justify-center mb-12"">
                <div className=""inline-flex items-center bg-zinc-100/50 dark:bg-zinc-800/50 rounded-full p-1"">
                    {[""Monthly"", ""Yearly""].map((period) => (
                        <button
                            key={period}
                            onClick={() => setIsYearly(period === ""Yearly"")}
                            className={cn(
                                ""px-6 py-2 rounded-full text-sm font-medium transition-all"",
                                (period === ""Yearly"") === isYearly
                                    ? ""bg-white dark:bg-zinc-900 text-zinc-900 dark:text-zinc-100 shadow-xs""
                                    : ""text-zinc-600 dark:text-zinc-400 hover:text-zinc-900 dark:hover:text-zinc-100""
                            )}
                        >
                            {period}
                        </button>
                    ))}
                </div>
            </div>

            {/* Pricing Cards */}
            <div className=""grid grid-cols-1 md:grid-cols-2 gap-8"">
                {tiers.map((tier, index) => (
                    <div
                        key={tier.name}
                        className={cn(
                            ""relative rounded-2xl overflow-hidden"",
                            ""bg-white dark:bg-zinc-900"",
                            ""border border-zinc-200 dark:border-zinc-800"",
                            ""transition-all duration-300"",
                            ""hover:shadow-lg hover:border-zinc-300 dark:hover:border-zinc-700""
                        )}
                    >
                        {/* Header */}
                        <div className=""p-8 pb-0"">
                            <div className=""flex items-center justify-between mb-4"">
                                <div className=""flex items-center gap-3"">
                                    <div className=""p-2 rounded-lg bg-zinc-100 dark:bg-zinc-800"">
                                        {tier.icon}
                                    </div>
                                    <h3 className=""text-xl font-semibold"">
                                        {tier.name}
                                    </h3>
                                </div>
                            </div>
                            
                            <div className=""mb-4"">
                                <div className=""flex items-baseline gap-1"">
                                    <span className=""text-4xl font-bold"">
                                        ${isYearly ? tier.price.yearly : tier.price.monthly}
                                    </span>
                                    <span className=""text-zinc-500 text-sm"">
                                        /{isYearly ? ""year"" : ""month""}
                                    </span>
                                </div>
                                <p className=""text-sm text-zinc-500 mt-2"">
                                    {tier.description}
                                </p>
                            </div>

                            <Button
                                className={cn(
                                    ""w-full"",
                                    index === 1
                                        ? ""bg-zinc-900 dark:bg-white text-white dark:text-zinc-900 hover:bg-zinc-800 dark:hover:bg-zinc-100""
                                        : ""bg-zinc-100 dark:bg-zinc-800 text-zinc-900 dark:text-zinc-100 hover:bg-zinc-200 dark:hover:bg-zinc-700""
                                )}
                            >
                                Get started
                                <ArrowRight className=""w-4 h-4 ml-2"" />
                            </Button>
                        </div>

                        {/* Features */}
                        <div className=""p-8 mt-8"">
                            <div className=""space-y-4"">
                                {tier.features.map((feature) => (
                                    <div
                                        key={feature.name}
                                        className=""flex items-start gap-3""
                                    >
                                        <div className=""shrink-0 mt-1"">
                                            <Check className=""w-4 h-4 text-emerald-500"" />
                                        </div>
                                        <div>
                                            <p className=""text-sm font-medium"">
                                                {feature.name}
                                            </p>
                                            <p className=""text-sm text-zinc-500"">
                                                {feature.description}
                                            </p>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        </div>
                    </div>
                ))}
            </div>
        </div>
    );
}","import { useState, FC } from ""react"";
import { Button } from ""@/components/ui/button"";
import { Check, ArrowRight, Sparkles, ChartNoAxesColumn } from ""lucide-react"";

interface Feature {
    name: string;
    description: string;
    included: boolean;
}

interface PricingTier {
    name: string;
    icon: FC<{ className: string }>;
    price: {
        monthly: number;
        yearly: number;
    };
    description: string;
    features: Feature[];
}

const tiers: PricingTier[] = [
    // ...existing tiers
];

const Pricing_04: FC = () => {
    const [isYearly, setIsYearly] = useState(false);

    return (
        <div className=""w-full max-w-7xl mx-auto px-4"">
            <div className=""flex justify-center mb-12"">
                <div className=""inline-flex items-center bg-gray-200 dark:bg-gray-700 rounded-full p-1"">
                    {[""Monthly"", ""Yearly""].map((period) => (
                        <button
                            key={period}
                            onClick={() => setIsYearly(period === ""Yearly"")}
                            className={`px-6 py-2 rounded-full text-sm font-medium transition-all ${isYearly === (period === ""Yearly"") ? ""bg-white dark:bg-gray-800 text-black dark:text-white shadow-xs"" : ""text-gray-600 dark:text-gray-400 hover:text-black dark:hover:text-white""}`}
                        >
                            {period}
                        </button>
                    ))}
                </div>
            </div>

            <div className=""grid grid-cols-1 md:grid-cols-2 gap-8"">
                {tiers.map((tier, index) => (
                    <div
                        key={tier.name}
                        className={`relative rounded-2xl overflow-hidden bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 transition-all duration-300 hover:shadow-lg hover:border-gray-300 dark:hover:border-gray-600`}
                    >
                        <div className=""p-8 pb-0"">
                            <div className=""flex items-center justify-between mb-4"">
                                <div className=""flex items-center gap-3"">
                                    <div className=""p-2 rounded-lg bg-gray-200 dark:bg-gray-700"">
                                        <tier.icon className=""w-5 h-5"" />
                                    </div>
                                    <h3 className=""text-xl font-semibold"">
                                        {tier.name}
                                    </h3>
                                </div>
                            </div>
                            
                            <div className=""mb-4"">
                                <div className=""flex items-baseline gap-1"">
                                    <span className=""text-4xl font-bold"">
                                        ${isYearly ? tier.price.yearly : tier.price.monthly}
                                    </span>
                                    <span className=""text-gray-500 text-sm"">
                                        /{isYearly ? ""year"" : ""month""}
                                    </span>
                                </div>
                                <p className=""text-sm text-gray-500 mt-2"">
                                    {tier.description}
                                </p>
                            </div>

                            <Button
                                className={index === 1
                                    ? ""w-full bg-gray-800 dark:bg-white text-white dark:text-gray-800 hover:bg-gray-700 dark:hover:bg-gray-100""
                                    : ""w-full bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-100 hover:bg-gray-300 dark:hover:bg-gray-600""}
                            >
                                Get started
                                <ArrowRight className=""w-4 h-4 ml-2"" />
                            </Button>
                        </div>

                        <div className=""p-8 mt-8"">
                            <div className=""space-y-4"">
                                {tier.features.map((feature) => (
                                    <div
                                        key={feature.name}
                                        className=""flex items-start gap-3""
                                    >
                                        <Check className=""w-4 h-4 text-green-500"" />
                                        <div>
                                            <p className=""text-sm font-medium"">
                                                {feature.name}
                                            </p>
                                            <p className=""text-sm text-gray-500"">
                                                {feature.description}
                                            </p>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        </div>
                    </div>
                ))}
            </div>
        </div>
    );
}

export default Pricing_04;","This is a Profile05 component that displays a team's information, including its name, description, and members. Each member's information includes name, role, location, email, avatar, availability, skills, and social media links."
kokonutui,profile-03,"""use client"";

import { useState } from ""react"";
import { motion } from ""motion/react"";
import { cn } from ""@/lib/utils"";
import { Check, Sparkles, ArrowRight, Shield, Zap, Infinity } from ""lucide-react"";

interface Feature {
  icon: React.ReactNode;
  title: string;
  description: string;
  highlight?: boolean;
}

const features: Feature[] = [
  {
    icon: <Infinity className=""w-4 h-4"" />,
    title: ""Unlimited Projects"",
    description: ""Create as many projects as you need"",
    highlight: true,
  },
  {
    icon: <Shield className=""w-4 h-4"" />,
    title: ""Enterprise Security"",
    description: ""Advanced security protocols & encryption"",
  },
  {
    icon: <Zap className=""w-4 h-4"" />,
    title: ""Priority Access"",
    description: ""Early access to new features"",
    highlight: true,
  },
];

export default function Pricing_01() {
  const [isHovered, setIsHovered] = useState(false);

  return (
    <div className=""w-full max-w-sm mx-auto"">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className={cn(
          ""group relative overflow-hidden"",
          ""bg-white dark:bg-zinc-900"",
          ""border border-zinc-200 dark:border-zinc-800"",
          ""rounded-2xl transition-all duration-300"",
          ""hover:shadow-[0_8px_30px_rgb(0,0,0,0.12)]"",
          ""dark:hover:shadow-[0_8px_30px_rgb(0,0,0,0.2)]""
        )}
      >
        {/* Ambient background effect */}
        <div className=""absolute inset-0 bg-linear-to-br from-violet-500/5 via-transparent to-transparent"" />

        {/* Header */}
        <div className=""relative p-6 flex items-center justify-between border-b border-zinc-200 dark:border-zinc-800"">
          <div className=""flex items-center gap-3"">
            <div className=""relative"">
              <div className=""absolute inset-0 bg-violet-500/20 blur-xl rounded-full"" />
              <div className=""relative w-10 h-10 rounded-full bg-violet-100 dark:bg-violet-900/20 flex items-center justify-center"">
                <Sparkles className=""w-5 h-5 text-violet-600 dark:text-violet-400"" />
              </div>
            </div>
            <div>
              <h3 className=""text-base font-medium text-zinc-900 dark:text-zinc-100"">
                Enterprise Plan
              </h3>
              <p className=""text-sm text-zinc-500 dark:text-zinc-400"">For growing teams</p>
            </div>
          </div>
          <div className=""px-3 py-1 text-xs font-medium bg-violet-100 dark:bg-violet-900/20 text-violet-600 dark:text-violet-400 rounded-full"">
            Popular
          </div>
        </div>

        {/* Pricing */}
        <div className=""relative p-6 border-b border-zinc-200 dark:border-zinc-800"">
          <div className=""flex items-baseline gap-1"">
            <span className=""text-3xl font-bold text-zinc-900 dark:text-zinc-100"">$49</span>
            <span className=""text-sm text-zinc-500"">/month</span>
          </div>
          <p className=""mt-2 text-sm text-zinc-500 dark:text-zinc-400"">
            Everything you need to scale your business
          </p>
        </div>

        {/* Features list */}
        <div className=""relative p-6 space-y-4"">
          {features.map((feature, index) => (
            <motion.div
              key={feature.title}
              initial={{ opacity: 0, x: -10 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: index * 0.1 }}
              className={cn(
                ""flex items-start gap-3 p-3 rounded-xl transition-colors"",
                feature.highlight ? ""bg-violet-50 dark:bg-violet-900/10"" : """"
              )}
            >
              <div
                className={cn(
                  ""w-8 h-8 rounded-full flex items-center justify-center shrink-0"",
                  feature.highlight
                    ? ""bg-violet-100 dark:bg-violet-900/20""
                    : ""bg-zinc-100 dark:bg-zinc-800""
                )}
              >
                {feature.icon}
              </div>
              <div>
                <h4 className=""text-sm font-medium text-zinc-900 dark:text-zinc-100"">
                  {feature.title}
                </h4>
                <p className=""text-xs text-zinc-500 dark:text-zinc-400 mt-0.5"">
                  {feature.description}
                </p>
              </div>
            </motion.div>
          ))}
        </div>

        {/* Call to Action button */}
        <div className=""relative p-6 border-t border-zinc-200 dark:border-zinc-800"">
          <motion.button
            onHoverStart={() => setIsHovered(true)}
            onHoverEnd={() => setIsHovered(false)}
            whileHover={{ scale: 1.01 }}
            whileTap={{ scale: 0.99 }}
            className={cn(
              ""w-full h-11 flex items-center justify-center gap-2"",
              ""bg-zinc-900 dark:bg-white"",
              ""text-white dark:text-zinc-900"",
              ""text-sm font-medium"",
              ""rounded-lg transition-all duration-300"",
              ""hover:bg-zinc-800 dark:hover:bg-zinc-100""
            )}
          >
            Get started
            <motion.div
              animate={{ x: isHovered ? 4 : 0 }}
              transition={{ type: ""spring"", stiffness: 400, damping: 10 }}
            >
              <ArrowRight className=""w-4 h-4"" />
            </motion.div>
          </motion.button>
        </div>
      </motion.div>
    </div>
  );
}","import React, { useState } from 'react';
import { motion } from 'framer-motion'; // Ensure you import from `framer-motion`
import { Check, Sparkles, ArrowRight, Shield, Zap, Infinity } from 'lucide-react';

interface Feature {
    icon: React.ReactNode;
    title: string;
    description: string;
    highlight?: boolean;
}

const features: Feature[] = [
    {
        icon: <Infinity className=""w-4 h-4"" />,
        title: ""Unlimited Projects"",
        description: ""Create as many projects as you need"",
        highlight: true,
    },
    {
        icon: <Shield className=""w-4 h-4"" />,
        title: ""Enterprise Security"",
        description: ""Advanced security protocols & encryption"",
    },
    {
        icon: <Zap className=""w-4 h-4"" />,
        title: ""Priority Access"",
        description: ""Early access to new features"",
        highlight: true,
    },
];

const Pricing_01: React.FC = () => {
    const [isHovered, setIsHovered] = useState(false);

    return (
        <div className=""w-full max-w-sm mx-auto"">
            <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                className=""group relative overflow-hidden bg-white dark:bg-zinc-900 border border-zinc-200 dark:border-zinc-800 rounded-2xl transition-all duration-300 hover:shadow-lg dark:hover:shadow-xl""
            >
                {/* Ambient background effect */}
                <div className=""absolute inset-0 bg-gradient-to-br from-violet-500/5 via-transparent to-transparent"" />

                {/* Header */}
                <div className=""relative p-6 flex items-center justify-between border-b border-zinc-200 dark:border-zinc-800"">
                    <div className=""flex items-center gap-3"">
                        <div className=""relative"">
                            <div className=""absolute inset-0 bg-violet-500/20 blur-xl rounded-full"" />
                            <div className=""relative w-10 h-10 rounded-full bg-violet-100 dark:bg-violet-900/20 flex items-center justify-center"">
                                <Sparkles className=""w-5 h-5 text-violet-600 dark:text-violet-400"" />
                            </div>
                        </div>
                        <div>
                            <h3 className=""text-base font-medium text-zinc-900 dark:text-zinc-100"">
                                Enterprise Plan
                            </h3>
                            <p className=""text-sm text-zinc-500 dark:text-zinc-400"">
                                For growing teams
                            </p>
                        </div>
                    </div>
                    <div className=""px-3 py-1 text-xs font-medium bg-violet-100 dark:bg-violet-900/20 text-violet-600 dark:text-violet-400 rounded-full"">
                        Popular
                    </div>
                </div>

                {/* Pricing */}
                <div className=""relative p-6 border-b border-zinc-200 dark:border-zinc-800"">
                    <div className=""flex items-baseline gap-1"">
                        <span className=""text-3xl font-bold text-zinc-900 dark:text-zinc-100"">
                            $49
                        </span>
                        <span className=""text-sm text-zinc-500"">/month</span>
                    </div>
                    <p className=""mt-2 text-sm text-zinc-500 dark:text-zinc-400"">
                        Everything you need to scale your business
                    </p>
                </div>

                {/* Features */}
                <div className=""relative p-6 space-y-4"">
                    {features.map((feature, index) => (
                        <motion.div
                            key={feature.title}
                            initial={{ opacity: 0, x: -10 }}
                            animate={{ opacity: 1, x: 0 }}
                            transition={{ delay: index * 0.1 }}
                            className={`flex items-start gap-3 p-3 rounded-xl transition-colors ${
                                feature.highlight ? ""bg-violet-50 dark:bg-violet-900/10"" : """"
                            }`}
                        >
                            <div
                                className={`w-8 h-8 rounded-full flex items-center justify-center shrink-0 ${
                                    feature.highlight
                                        ? ""bg-violet-100 dark:bg-violet-900/20""
                                        : ""bg-zinc-100 dark:bg-zinc-800""
                                }`}
                            >
                                {feature.icon}
                            </div>
                            <div>
                                <h4 className=""text-sm font-medium text-zinc-900 dark:text-zinc-100"">
                                    {feature.title}
                                </h4>
                                <p className=""text-xs text-zinc-500 dark:text-zinc-400 mt-0.5"">
                                    {feature.description}
                                </p>
                            </div>
                        </motion.div>
                    ))}
                </div>

                {/* CTA Button */}
                <div className=""relative p-6 border-t border-zinc-200 dark:border-zinc-800"">
                    <motion.button
                        onHoverStart={() => setIsHovered(true)}
                        onHoverEnd={() => setIsHovered(false)}
                        whileHover={{ scale: 1.01 }}
                        whileTap={{ scale: 0.99 }}
                        className=""w-full h-11 flex items-center justify-center gap-2 bg-zinc-900 dark:bg-white text-white dark:text-zinc-900 text-sm font-medium rounded-lg transition-all duration-300 hover:bg-zinc-800 dark:hover:bg-zinc-100""
                    >
                        Get started
                        <motion.div
                            animate={{ x: isHovered ? 4 : 0 }}
                            transition={{
                                type: ""spring"",
                                stiffness: 400,
                                damping: 10,
                            }}
                        >
                            <ArrowRight className=""w-4 h-4"" />
                        </motion.div>
                    </motion.button>
                </div>
            </motion.div>
        </div>
    );
};

export default Pricing_01;","This component is a user profile form which includes fields for a user's name, username, avatar, bio and social media handles. The form also includes options for uploading or generating a new avatar."
kokonutui,profile-01,"""use client"";

import { Button } from ""@/components/ui/button"";
import { Check } from ""lucide-react"";
import { cn } from ""@/lib/utils"";

interface PricingTier {
  name: string;
  price: number;
  description: string;
  features: string[];
  highlight?: boolean;
}

const defaultTiers: PricingTier[] = [
  {
    name: ""Basic"",
    price: 9,
    description: ""Essential features for small teams"",
    features: [
      ""5 Team Members"",
      ""Basic Analytics"",
      ""Community Support"",
      ""1GB Storage"",
    ],
  },
  {
    name: ""Pro"",
    price: 29,
    description: ""Everything you need to scale"",
    highlight: true,
    features: [
      ""Unlimited Members"",
      ""Advanced Analytics"",
      ""Priority Support"",
      ""Unlimited Storage"",
      ""Custom Integrations"",
    ],
  },
];

export default function Pricing_05() {
  return (
    <div className=""w-full max-w-3xl mx-auto px-4"">
      <div className=""grid grid-cols-1 md:grid-cols-2 gap-6"">
        {defaultTiers.map((tier) => (
          <div
            key={tier.name}
            className={cn(
              ""relative bg-white dark:bg-black border rounded-lg overflow-hidden"",
              ""border-zinc-200 dark:border-zinc-800"",
              tier.highlight && [
                ""before:absolute before:inset-0"",
                ""before:border before:border-black dark:before:border-white"",
                ""before:rounded-lg before:pointer-events-none"",
                ""before:-m-[1px]"",
              ]
            )}
          >
            {/* Header */}
            <div className=""p-6 border-b border-zinc-100 dark:border-zinc-800"">
              <div className=""flex justify-between items-baseline mb-2"">
                <h3 className=""text-sm font-medium tracking-wide uppercase"">
                  {tier.name}
                </h3>
                {tier.highlight && (
                  <span className=""text-[10px] font-medium uppercase tracking-wider px-2 py-0.5 rounded-full bg-zinc-900 text-white dark:bg-white dark:text-black"">
                    Popular
                  </span>
                )}
              </div>
              <div className=""flex items-baseline gap-1"">
                <span className=""text-2xl font-semibold"">${tier.price}</span>
                <span className=""text-sm text-zinc-500 dark:text-zinc-400"">
                  /month
                </span>
              </div>
              <p className=""mt-2 text-xs text-zinc-500 dark:text-zinc-400"">
                {tier.description}
              </p>
            </div>

            {/* Features */}
            <div className=""p-6"">
              <div className=""space-y-3"">
                {tier.features.map((feature) => (
                  <div key={feature} className=""flex items-start gap-3 text-sm"">
                    <Check className=""w-4 h-4 mt-0.5 text-zinc-900 dark:text-white"" />
                    <span>{feature}</span>
                  </div>
                ))}
              </div>

              {/* CTA Button */}
              <div className=""mt-6"">
                <Button
                  className={cn(
                    ""w-full h-9 text-xs font-medium tracking-wide"",
                    tier.highlight
                      ? ""bg-zinc-900 text-white hover:bg-zinc-800 dark:bg-white dark:text-black dark:hover:bg-zinc-100""
                      : ""bg-white text-zinc-900 border border-zinc-200 hover:bg-zinc-50 dark:bg-black dark:text-white dark:border-zinc-800 dark:hover:bg-zinc-900""
                  )}
                >
                  Get started
                </Button>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}","import React from 'react';
import { Check } from ""lucide-react"";
import { Button } from ""@/components/ui/button"";

// Define the structure of a pricing tier
interface PricingTier {
    name: string;
    price: number;
    description: string;
    features: string[];
    highlight?: boolean;
}

// Default pricing data
const defaultTiers: PricingTier[] = [
    {
        name: ""Basic"",
        price: 9,
        description: ""Essential features for small teams"",
        features: [
            ""5 Team Members"",
            ""Basic Analytics"",
            ""Community Support"",
            ""1GB Storage"",
        ],
    },
    {
        name: ""Pro"",
        price: 29,
        description: ""Everything you need to scale"",
        highlight: true,
        features: [
            ""Unlimited Members"",
            ""Advanced Analytics"",
            ""Priority Support"",
            ""Unlimited Storage"",
            ""Custom Integrations"",
        ],
    },
];

// Functional pricing component
const Pricing_05: React.FC = () => {
    return (
        <div className=""w-full max-w-3xl mx-auto px-4"">
            <div className=""grid grid-cols-1 md:grid-cols-2 gap-6"">
                {defaultTiers.map((tier) => (
                    <div
                        key={tier.name}
                        className={`relative bg-white dark:bg-black border border-zinc-200 dark:border-zinc-800 rounded-lg overflow-hidden ${
                            tier.highlight
                                ? ""before:absolute before:inset-0 before:border before:border-black dark:before:border-white before:rounded-lg before:pointer-events-none before:-m-[1px]""
                                : """"
                        }`}
                    >
                        {/* Header */}
                        <div className=""p-6 border-b border-zinc-100 dark:border-zinc-800"">
                            <div className=""flex justify-between items-baseline mb-2"">
                                <h3 className=""text-sm font-medium tracking-wide uppercase"">
                                    {tier.name}
                                </h3>
                                {tier.highlight && (
                                    <span className=""text-[10px] font-medium uppercase tracking-wider px-2 py-0.5 rounded-full bg-zinc-900 text-white dark:bg-white dark:text-black"">
                                        Popular
                                    </span>
                                )}
                            </div>
                            <div className=""flex items-baseline gap-1"">
                                <span className=""text-2xl font-semibold"">${tier.price}</span>
                                <span className=""text-sm text-zinc-500 dark:text-zinc-400"">/month</span>
                            </div>
                            <p className=""mt-2 text-xs text-zinc-500 dark:text-zinc-400"">
                                {tier.description}
                            </p>
                        </div>

                        {/* Features */}
                        <div className=""p-6"">
                            <div className=""space-y-3"">
                                {tier.features.map((feature) => (
                                    <div
                                        key={feature}
                                        className=""flex items-start gap-3 text-sm""
                                    >
                                        <Check className=""w-4 h-4 mt-0.5 text-zinc-900 dark:text-white"" />
                                        <span>{feature}</span>
                                    </div>
                                ))}
                            </div>

                            {/* CTA Button */}
                            <div className=""mt-6"">
                                <Button
                                    className={`w-full h-9 text-xs font-medium tracking-wide ${
                                        tier.highlight
                                            ? ""bg-zinc-900 text-white hover:bg-zinc-800 dark:bg-white dark:text-black dark:hover:bg-zinc-100""
                                            : ""bg-white text-zinc-900 border border-zinc-200 hover:bg-zinc-50 dark:bg-black dark:text-white dark:border-zinc-800 dark:hover:bg-zinc-900""
                                    }`}
                                >
                                    Get started
                                </Button>
                            </div>
                        </div>
                    </div>
                ))}
            </div>
        </div>
    );
};

export default Pricing_05;","This is a profile card component that displays the user's avatar, name, role, and a list of menu items. It also has a logout button."
kokonutui,profile-04,"""use client"";

import { Button } from ""@/components/ui/button"";
import { Check, ArrowRight } from ""lucide-react"";
import { cn } from ""@/lib/utils"";

interface Feature {
  name: string;
  highlight?: boolean;
  included: boolean;
}

interface PricingTier {
  name: string;
  price: number;
  description: string;
  features: Feature[];
  highlight?: boolean;
  cta?: string;
}

const defaultTiers: PricingTier[] = [
  {
    name: ""SELF"",
    price: 299,
    description: ""For small teams and growing businesses"",
    features: [
      { name: ""Up to 20 team members"", included: true },
      { name: ""Advanced analytics"", included: true },
      { name: ""24/7 email support"", included: true },
      { name: ""API access"", included: true, highlight: true },
      { name: ""Custom integrations"", included: false },
      { name: ""Enterprise features"", included: false },
    ],
    cta: ""Get started"",
  },
  {
    name: ""TEAM"",
    price: 999,
    description: ""For large organizations and enterprises"",
    highlight: true,
    features: [
      { name: ""Unlimited team members"", included: true },
      { name: ""Advanced analytics"", included: true },
      { name: ""24/7 priority support"", included: true },
      { name: ""Unlimited API access"", included: true, highlight: true },
      { name: ""Custom integrations"", included: true },
      { name: ""Enterprise features"", included: true },
    ],
    cta: ""Get started"",
  },
];

export default function Pricing_02({
  tiers = defaultTiers,
}: {
  tiers?: PricingTier[];
}) {
  return (
    <div className=""w-full max-w-5xl mx-auto px-4"">
      <div className=""grid grid-cols-1 md:grid-cols-2 gap-8"">
        {tiers.map((tier) => (
          <div
            key={tier.name}
            className={cn(
              ""relative group rounded-2xl transition-all duration-500 border"",
              tier.highlight
                ? ""bg-gradient-to-b from-neutral-950 to-neutral-900 dark:from-neutral-900 dark:to-neutral-950 border-neutral-200 dark:border-neutral-800 hover:border-neutral-300 dark:hover:border-neutral-700 hover:shadow-[0_8px_40px_-12px_rgba(0,0,0,0.1)] dark:hover:shadow-[0_8px_40px_-12px_rgba(0,0,0,0.3)]""
                : ""bg-white dark:bg-neutral-900 border-neutral-200 dark:border-neutral-800 hover:border-neutral-300 dark:hover:border-neutral-700 hover:shadow-[0_8px_40px_-12px_rgba(0,0,0,0.1)] dark:hover:shadow-[0_8px_40px_-12px_rgba(0,0,0,0.3)]""
            )}
          >
            <div className=""p-10 flex flex-col h-full"">
              <div className=""space-y-4"">
                <h3
                  className={cn(
                    ""text-lg uppercase tracking-wider font-medium"",
                    tier.highlight
                      ? ""text-white""
                      : ""text-neutral-900 dark:text-white""
                  )}
                >
                  {tier.name}
                </h3>
                <div className=""flex items-baseline gap-2"">
                  <span
                    className={cn(
                      ""text-5xl font-light"",
                      tier.highlight
                        ? ""text-white""
                        : ""text-neutral-900 dark:text-white""
                    )}
                  >
                    ${tier.price}
                  </span>
                  <span
                    className={cn(
                      ""text-sm"",
                      tier.highlight
                        ? ""text-neutral-400""
                        : ""text-neutral-500 dark:text-neutral-400""
                    )}
                  >
                    one-time
                  </span>
                </div>
                <p
                  className={cn(
                    ""text-sm pb-6 border-b"",
                    tier.highlight
                      ? ""text-neutral-400 border-neutral-800""
                      : ""text-neutral-500 dark:text-neutral-400 border-neutral-200 dark:border-neutral-800""
                  )}
                >
                  {tier.description}
                </p>
              </div>

              <div className=""mt-8 space-y-4 grow"">
                {tier.features.map((feature) => (
                  <div key={feature.name} className=""flex items-center gap-3"">
                    <div
                      className={cn(
                        ""shrink-0 w-5 h-5 rounded-full flex items-center justify-center"",
                        feature.included
                          ? tier.highlight
                            ? ""text-white""
                            : ""text-neutral-900 dark:text-white""
                          : ""text-neutral-300 dark:text-neutral-700""
                      )}
                    >
                      <Check className=""w-3.5 h-3.5"" />
                    </div>
                    <span
                      className={cn(
                        ""text-sm"",
                        tier.highlight
                          ? ""text-neutral-300""
                          : ""text-neutral-600 dark:text-neutral-300""
                      )}
                    >
                      {feature.name}
                    </span>
                  </div>
                ))}
              </div>

              <div className=""mt-8"">
                <Button
                  className={cn(
                    ""w-full h-12 group relative transition-all duration-300"",
                    tier.highlight
                      ? ""bg-white hover:bg-neutral-100 text-neutral-900""
                      : ""bg-neutral-900 hover:bg-neutral-800 text-white dark:bg-white dark:hover:bg-neutral-100 dark:text-neutral-900""
                  )}
                >
                  <span className=""relative z-10 flex items-center justify-center gap-2 font-medium tracking-wide"">
                    {tier.cta}
                    <ArrowRight className=""w-4 h-4 transition-transform group-hover:translate-x-1"" />
                  </span>
                </Button>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}","import React from 'react';
import { Check, ArrowRight } from 'lucide-react';
import { Button } from '@/components/ui/button';

interface Feature {
  name: string;
  highlight?: boolean;
  included: boolean;
}

interface PricingTier {
  name: string;
  price: number;
  description: string;
  features: Feature[];
  highlight?: boolean;
  cta?: string;
}

interface PricingProps {
  tiers?: PricingTier[];
}

// Default fallback pricing tiers
const defaultTiers: PricingTier[] = [
  {
    name: 'Basic',
    price: 49,
    description: 'Basic features for personal use.',
    cta: 'Get Started',
    highlight: false,
    features: [
      { name: 'Access to all basic tools', included: true },
      { name: 'Email support', included: true },
      { name: 'Community access', included: true },
      { name: 'Advanced analytics', included: false },
    ],
  },
  {
    name: 'Pro',
    price: 99,
    description: 'Advanced tools for professionals.',
    cta: 'Upgrade Now',
    highlight: true,
    features: [
      { name: 'Access to all basic tools', included: true },
      { name: 'Email & chat support', included: true },
      { name: 'Community access', included: true },
      { name: 'Advanced analytics', included: true },
    ],
  },
];

const Pricing: React.FC<PricingProps> = ({ tiers = defaultTiers }) => {
  return (
    <div className=""w-full max-w-5xl mx-auto px-4"">
      <div className=""grid grid-cols-1 md:grid-cols-2 gap-8"">
        {tiers.map((tier) => (
          <div
            key={tier.name}
            className={`relative group rounded-2xl transition-all duration-500 ${
              tier.highlight
                ? 'bg-gradient-to-b from-neutral-950 to-neutral-900 dark:from-neutral-900 dark:to-neutral-950'
                : 'bg-white dark:bg-neutral-900'
            } border border-neutral-200 dark:border-neutral-800 hover:border-neutral-300 dark:hover:border-neutral-700 hover:shadow-[0_8px_40px_-12px_rgba(0,0,0,0.1)] dark:hover:shadow-[0_8px_40px_-12px_rgba(0,0,0,0.3)]`}
          >
            <div className=""p-10 flex flex-col h-full"">
              <div className=""space-y-4"">
                <h3
                  className={`text-lg uppercase tracking-wider font-medium ${
                    tier.highlight ? 'text-white' : 'text-neutral-900 dark:text-white'
                  }`}
                >
                  {tier.name}
                </h3>
                <div className=""flex items-baseline gap-2"">
                  <span
                    className={`text-5xl font-light ${
                      tier.highlight ? 'text-white' : 'text-neutral-900 dark:text-white'
                    }`}
                  >
                    ${tier.price}
                  </span>
                  <span
                    className={`text-sm ${
                      tier.highlight ? 'text-neutral-400' : 'text-neutral-500 dark:text-neutral-400'
                    }`}
                  >
                    one-time
                  </span>
                </div>
                <p
                  className={`text-sm pb-6 border-b ${
                    tier.highlight
                      ? 'text-neutral-400 border-neutral-800'
                      : 'text-neutral-500 dark:text-neutral-400 border-neutral-200 dark:border-neutral-800'
                  }`}
                >
                  {tier.description}
                </p>
              </div>

              <div className=""mt-8 space-y-4 grow"">
                {tier.features.map((feature) => (
                  <div key={feature.name} className=""flex items-center gap-3"">
                    <div
                      className={`shrink-0 w-5 h-5 rounded-full flex items-center justify-center ${
                        feature.included
                          ? tier.highlight
                            ? 'text-white'
                            : 'text-neutral-900 dark:text-white'
                          : 'text-neutral-300 dark:text-neutral-700'
                      }`}
                    >
                      <Check className=""w-3.5 h-3.5"" />
                    </div>
                    <span
                      className={`text-sm ${
                        tier.highlight ? 'text-neutral-300' : 'text-neutral-600 dark:text-neutral-300'
                      }`}
                    >
                      {feature.name}
                    </span>
                  </div>
                ))}
              </div>

              <div className=""mt-8"">
                <Button
                  className={`w-full h-12 group relative ${
                    tier.highlight
                      ? 'bg-white hover:bg-neutral-100 text-neutral-900'
                      : 'bg-neutral-900 hover:bg-neutral-800 text-white dark:bg-white dark:hover:bg-neutral-100 dark:text-neutral-900'
                  } transition-all duration-300`}
                >
                  <span className=""relative z-10 flex items-center justify-center gap-2 font-medium tracking-wide"">
                    {tier.cta}
                    <ArrowRight className=""w-4 h-4 transition-transform group-hover:translate-x-1"" />
                  </span>
                </Button>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default Pricing;","This component displays a user's profile with their avatar, subscription, role, email, and some other details like current level, daily streak, and achievements."
kokonutui,ai-input-15,"""use client"";

import { useState } from ""react"";
import { Button } from ""@/components/ui/button"";
import { Check, ArrowRight } from ""lucide-react"";
import { cn } from ""@/lib/utils"";

interface Feature {
  name: string;
  included: ""starter"" | ""pro"" | ""all"" | null;
}

const features: Feature[] = [
  { name: ""Basic Analytics"", included: ""starter"" },
  { name: ""Up to 5 team members"", included: ""starter"" },
  { name: ""Basic support"", included: ""starter"" },
  { name: ""Advanced Analytics"", included: ""pro"" },
  { name: ""Up to 20 team members"", included: ""pro"" },
  { name: ""Priority support"", included: ""pro"" },
  { name: ""Custom integrations"", included: ""all"" },
  { name: ""Unlimited team members"", included: ""all"" },
  { name: ""24/7 phone support"", included: ""all"" },
];

const plans = [
  {
    name: ""Starter"",
    price: { monthly: 15, yearly: 144 },
    level: ""starter"" as const,
  },
  {
    name: ""Pro"",
    price: { monthly: 49, yearly: 470 },
    level: ""pro"" as const,
  },
  {
    name: ""Enterprise"",
    price: { monthly: 99, yearly: 990 },
    level: ""all"" as const,
  },
];

type PlanLevel = typeof plans[number][""level""];

export default function Pricing_03() {
  const [isYearly, setIsYearly] = useState(false);
  const [selectedPlan, setSelectedPlan] = useState<PlanLevel>(""pro"");

  function shouldShowCheck(included: Feature[""included""], level: PlanLevel): boolean {
    if (included === ""all"") return true;
    if (included === ""pro"" && (level === ""pro"" || level === ""all"")) return true;
    if (included === ""starter"" && (level === ""starter"" || level === ""pro"" || level === ""all"")) return true;
    return false;
  }

  return (
    <div className=""w-full max-w-3xl mx-auto px-4"">
      <div className=""flex justify-end mb-4 sm:mb-8"">
        <div className=""inline-flex items-center gap-2 text-xs sm:text-sm"">
          <button
            type=""button""
            onClick={() => setIsYearly(false)}
            className={cn(
              ""px-3 py-1 rounded-md transition-colors"",
              !isYearly ? ""bg-zinc-100 dark:bg-zinc-800"" : ""text-zinc-500""
            )}
          >
            Monthly
          </button>
          <button
            type=""button""
            onClick={() => setIsYearly(true)}
            className={cn(
              ""px-3 py-1 rounded-md transition-colors"",
              isYearly ? ""bg-zinc-100 dark:bg-zinc-800"" : ""text-zinc-500""
            )}
          >
            Yearly
          </button>
        </div>
      </div>
      <div className=""flex flex-col sm:flex-row gap-4 mb-8"">
        {plans.map((plan) => (
          <button
            key={plan.name}
            type=""button""
            onClick={() => setSelectedPlan(plan.level)}
            className={cn(
              ""flex-1 p-4 rounded-xl text-left transition-all"",
              ""border border-zinc-200 dark:border-zinc-800"",
              selectedPlan === plan.level && ""ring-2 ring-blue-500 dark:ring-blue-400""
            )}
          >
            <div className=""flex items-center justify-between mb-2"">
              <span className=""text-sm font-medium"">{plan.name}</span>
              {plan.level === ""pro"" && (
                <span className=""text-xs bg-blue-100 dark:bg-blue-900 text-blue-600 dark:text-blue-300 px-2 py-0.5 rounded-full"">
                  Popular
                </span>
              )}
            </div>
            <div className=""text-2xl font-bold"">
              ${isYearly ? plan.price.yearly : plan.price.monthly}
              <span className=""text-sm font-normal text-zinc-500"">/{isYearly ? ""year"" : ""month""}</span>
            </div>
          </button>
        ))}
      </div>
      <div className=""border border-zinc-200 dark:border-zinc-800 rounded-xl overflow-hidden"">
        <div className=""overflow-x-auto"">
          <div className=""min-w-[640px] divide-y divide-zinc-200 dark:divide-zinc-800"">
            <div className=""flex items-center p-4 bg-zinc-50 dark:bg-zinc-900"">
              <div className=""flex-1 text-sm font-medium"">Features</div>
              <div className=""flex items-center gap-8 text-sm"">
                {plans.map((plan) => (
                  <div key={plan.level} className=""w-16 text-center font-medium"">
                    {plan.name}
                  </div>
                ))}
              </div>
            </div>
            {features.map((feature) => (
              <div
                key={feature.name}
                className={cn(
                  ""flex items-center p-4 transition-colors"",
                  feature.included === selectedPlan && ""bg-blue-50/50 dark:bg-blue-900/20""
                )}
              >
                <div className=""flex-1 text-sm"">{feature.name}</div>
                <div className=""flex items-center gap-8 text-sm"">
                  {plans.map((plan) => (
                    <div
                      key={plan.level}
                      className={cn(""w-16 flex justify-center"", plan.level === selectedPlan && ""font-medium"")}
                    >
                      {shouldShowCheck(feature.included, plan.level) ? (
                        <Check className=""w-5 h-5 text-blue-500"" />
                      ) : (
                        <span className=""text-zinc-300 dark:text-zinc-700"">-</span>
                      )}
                    </div>
                  ))}
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
      <div className=""mt-8 text-center"">
        <Button className=""w-full sm:w-auto bg-blue-500 hover:bg-blue-600 text-white px-8 py-2 rounded-xl"">
          Get started with {plans.find((p) => p.level === selectedPlan)?.name}
          <ArrowRight className=""w-4 h-4 ml-2"" />
        </Button>
      </div>
    </div>
  );
}","import { useState } from ""react"";
import { Check, ArrowRight } from ""lucide-react"";

interface Feature {
  name: string;
  included: ""starter"" | ""pro"" | ""all"" | null;
}

interface Plan {
  name: string;
  price: { monthly: number; yearly: number };
  level: ""starter"" | ""pro"" | ""all"";
}

const features: Feature[] = [
  { name: ""Basic Analytics"", included: ""starter"" },
  { name: ""Up to 5 team members"", included: ""starter"" },
  { name: ""Basic support"", included: ""starter"" },
  { name: ""Advanced Analytics"", included: ""pro"" },
  { name: ""Up to 20 team members"", included: ""pro"" },
  { name: ""Priority support"", included: ""pro"" },
  { name: ""Custom integrations"", included: ""all"" },
  { name: ""Unlimited team members"", included: ""all"" },
  { name: ""24/7 phone support"", included: ""all"" },
];

const plans: Plan[] = [
  { name: ""Starter"", price: { monthly: 15, yearly: 144 }, level: ""starter"" },
  { name: ""Pro"", price: { monthly: 49, yearly: 470 }, level: ""pro"" },
  { name: ""Enterprise"", price: { monthly: 99, yearly: 990 }, level: ""all"" },
];

export default function Pricing_03() {
  const [isYearly, setIsYearly] = useState<boolean>(false);
  const [selectedPlan, setSelectedPlan] = useState<string>(""pro"");

  return (
    <div className=""w-full max-w-3xl mx-auto px-4"">
      {/* Billing period toggle */}
      <div className=""flex justify-end mb-4 sm:mb-8"">
        <div className=""inline-flex items-center gap-2 text-xs sm:text-sm"">
          <button
            type=""button""
            onClick={() => setIsYearly(false)}
            className={`px-3 py-1 rounded-md transition-colors ${
              !isYearly ? ""bg-zinc-100 dark:bg-zinc-800"" : ""text-zinc-500""
            }`}
          >
            Monthly
          </button>
          <button
            type=""button""
            onClick={() => setIsYearly(true)}
            className={`px-3 py-1 rounded-md transition-colors ${
              isYearly ? ""bg-zinc-100 dark:bg-zinc-800"" : ""text-zinc-500""
            }`}
          >
            Yearly
          </button>
        </div>
      </div>

      {/* Plans */}
      <div className=""flex flex-col sm:flex-row gap-4 mb-8"">
        {plans.map((plan) => (
          <button
            key={plan.name}
            type=""button""
            onClick={() => setSelectedPlan(plan.level)}
            className={`flex-1 p-4 rounded-xl text-left transition-all border border-zinc-200 dark:border-zinc-800 ${
              selectedPlan === plan.level
                ? ""ring-2 ring-blue-500 dark:ring-blue-400""
                : """"
            }`}
          >
            <div className=""flex items-center justify-between mb-2"">
              <span className=""text-sm font-medium"">{plan.name}</span>
              {plan.level === ""pro"" && (
                <span className=""text-xs bg-blue-100 dark:bg-blue-900 text-blue-600 dark:text-blue-300 px-2 py-0.5 rounded-full"">
                  Popular
                </span>
              )}
            </div>
            <div className=""text-2xl font-bold"">
              ${isYearly ? plan.price.yearly : plan.price.monthly}
              <span className=""text-sm font-normal text-zinc-500"">
                /{isYearly ? ""year"" : ""month""}
              </span>
            </div>
          </button>
        ))}
      </div>

      {/* Features Table */}
      <div className=""border border-zinc-200 dark:border-zinc-800 rounded-xl overflow-hidden"">
        <div className=""overflow-x-auto"">
          <div className=""min-w-[640px] divide-y divide-zinc-200 dark:divide-zinc-800"">
            <div className=""flex items-center p-4 bg-zinc-50 dark:bg-zinc-900"">
              <div className=""flex-1 text-sm font-medium"">Features</div>
              <div className=""flex items-center gap-8 text-sm"">
                {plans.map((plan) => (
                  <div
                    key={plan.level}
                    className=""w-16 text-center font-medium""
                  >
                    {plan.name}
                  </div>
                ))}
              </div>
            </div>

            {features.map((feature) => (
              <div
                key={feature.name}
                className={`flex items-center p-4 transition-colors ${
                  feature.included === selectedPlan
                    ? ""bg-blue-50/50 dark:bg-blue-900/20""
                    : """"
                }`}
              >
                <div className=""flex-1 text-sm"">{feature.name}</div>
                <div className=""flex items-center gap-8 text-sm"">
                  {plans.map((plan) => (
                    <div
                      key={plan.level}
                      className={`w-16 flex justify-center ${
                        plan.level === selectedPlan ? ""font-medium"" : """"
                      }`}
                    >
                      {shouldShowCheck(feature.included, plan.level) ? (
                        <Check className=""w-5 h-5 text-blue-500"" />
                      ) : (
                        <span className=""text-zinc-300 dark:text-zinc-700"">-</span>
                      )}
                    </div>
                  ))}
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Call to Action Button */}
      <div className=""mt-8 text-center"">
        <button className=""w-full sm:w-auto bg-blue-500 hover:bg-blue-600 text-white px-8 py-2 rounded-xl flex items-center justify-center gap-2"">
          Get started with {plans.find((p) => p.level === selectedPlan)?.name}
          <ArrowRight className=""w-4 h-4"" />
        </button>
      </div>
    </div>
  );
}

function shouldShowCheck(included: Feature[""included""], level: string): boolean {
  if (included === ""all"") return true;
  if (included === ""pro"" && (level === ""pro"" || level === ""all"")) return true;
  if (
    included === ""starter"" &&
    (level === ""starter"" || level === ""pro"" || level === ""all"")
  )
    return true;
  return false;
}","This component handles the AI input interface, including the text area for input, toolbar buttons, and memory toggle."
